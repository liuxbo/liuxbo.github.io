<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liuxbo.github.io</id>
    <title>lxb&apos;blog</title>
    <updated>2020-05-07T02:26:06.769Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liuxbo.github.io"/>
    <link rel="self" href="https://liuxbo.github.io/atom.xml"/>
    <subtitle>菜鸡成长之路</subtitle>
    <logo>https://liuxbo.github.io/images/avatar.png</logo>
    <icon>https://liuxbo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, lxb&apos;blog</rights>
    <entry>
        <title type="html"><![CDATA[疫情]]></title>
        <id>https://liuxbo.github.io/post/yi-qing/</id>
        <link href="https://liuxbo.github.io/post/yi-qing/">
        </link>
        <updated>2020-05-06T13:24:14.000Z</updated>
        <content type="html"><![CDATA[<p>规划已久的学习计划被一场突如其来的疫情打乱。起初大家不以为意，没想到后来传播速度如此之快，到现在发展到中国境外许多国家也出现了大量确诊病例...<br>
​ 奋斗在一线的医务人员、公安民警等各方面力量日日夜夜为打赢这场战斗而坚守，自发请战，医生护士们剪去长发，穿着密不透风的防护服连续长时间工作，汗如雨下，感谢这些美丽的女汉子们。每天都有英雄倒在防疫一线，令人悲痛不已， 同样每天也有患者走出医院，重获健康，让我们看到这场战役的希望。在此对奋斗在一线的人们致以崇高的敬意。<br>
​ 一方有难，八方支援，国难当头，我们更多地看到了人性的真实，有贪生怕死、临阵逃跑的某些官员，有无私奉献，无偿提供帮助的外卖小哥、私家车司机、理发师、酒店老板，有向医务人员吐口水、不戴口罩、骂骂咧咧的无知群众，有及时捐款援助的企业家、明星，有坚守岗位、不幸离世的医生护士、民警辅警、村官干部...... 。2月7日凌晨，湖北武汉市眼科李文亮医生去世，悲痛难以言表。当时同胡明医生一起来支援前线的战友如今却躺在ICU，多么令人心酸......，希望大家都能平安的看到疫情结束的那一天。<br>
​ 宅在家的我们该怎样充实地度过呢。大家有的厨艺见长，有的可以在家好好陪陪亲人，有的趁此机会专心学习，比如我，学会了和面、包饺子、烙饼、做凉皮、蒸蛋糕😂等好多技能，并且可以在家陪伴父母这么长时间，也是不错的一段时光。安逸归安逸，身在大三的我们也万不能停下前进的脚步，前几日教育部一位专家说的话我认为很有道理，话说的少了，思考的就多了，这是难得的在浮躁喧哗中突然获取平静的日子，我们可以停下脚步，思考并规划一下自己的奋斗计划，多学知识，多掌握些技能，所谓技多不压身，准备四六级、考研、面试、出国等。<br>
​ 静待花开。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PAT考试大纲]]></title>
        <id>https://liuxbo.github.io/post/pat-kao-shi-da-gang/</id>
        <link href="https://liuxbo.github.io/post/pat-kao-shi-da-gang/">
        </link>
        <updated>2020-05-06T13:23:34.000Z</updated>
        <content type="html"><![CDATA[<p>考试大纲<br>
乙级（Basic Level）</p>
<p>考生应具备以下基本能力：<br>
1· 基本的C/C++的代码设计能力，以及相关开发环境的基本调试技巧；<br>
2· 理解并掌握最基本的数据存储结构，即：数组、链表；<br>
3· 理解并熟练编程实现与基本数据结构相关的基础算法，包括递归、排序、查找等；<br>
4· 能够分析算法的时间复杂度、空间复杂度和算法稳定性；<br>
5· 具备问题抽象和建模的初步能力，并能够用所学方法解决实际问题。</p>
<p>甲级（Advanced Level）</p>
<p>在达到乙级要求的基础上，还要求：<br>
1· 具有充分的英文阅读理解能力；<br>
2· 理解并掌握基础数据结构，包括：线性表、树、图；<br>
3· 理解并熟练编程实现经典高级算法，包括哈希映射、并查集、最短路径、拓扑排序、关键路径、贪心、深度优先搜索、广度优先搜索、回溯剪枝等；<br>
4· 具备较强的问题抽象和建模能力，能实现对复杂实际问题的模拟求解。</p>
<p>顶级（Top Level）</p>
<p>在达到甲级要求的基础上，还要求：<br>
1· 对高级、复杂数据结构掌握其用法并能够熟练使用，如后缀数组、树状数组、线段树、Treap、静态KDTree等；<br>
2· 能够利用经典算法思想解决较难的算法问题，如动态规划、计算几何、图论高级应用（包括最大流/最小割，强连通分支、最近公共祖先、最小生成树、欧拉序列）等，并灵活运用；<br>
3· 能够解决复杂的模拟问题，编写并调试代码量较大的程序；<br>
4· 具有缜密的科学思维，考虑问题周全，能够正确应对复杂问题的边界情况。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IDEA的使用]]></title>
        <id>https://liuxbo.github.io/post/idea-de-shi-yong/</id>
        <link href="https://liuxbo.github.io/post/idea-de-shi-yong/">
        </link>
        <updated>2020-05-06T13:22:10.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>
<p>构成</p>
<p>文件从大到小依次是project-&gt;module-&gt;package，</p>
</li>
</ul>
<p>​       自己的代码放在src文件下</p>
<p>​       package的命名一般由数字、小数点 、小写字母构成(例如 cn.itcast.day04.demo01 每个小数点前都是一个文</p>
<p>​       件夹，包含小数点后的文件，是一组层级文件)</p>
<ul>
<li>设置和操作</li>
</ul>
<p>​       导入一个模块：file-&gt;project Structure-&gt;import module</p>
<p>​       settings-&gt;keymap-&gt;Mainmenu-&gt;code-&gt;completion-&gt;basic(将其改为Alt+/) ，用于代码提示快捷输入。</p>
<ul>
<li>
<p>常用快捷键</p>
<p><code>Alt+/</code>，快捷输入 ； <code>Alt+Enter</code>，导入包，自动修正代码； <code>Ctrl+Y</code> 删除光标所在行；</p>
<p><code>Ctrl+D</code> 复制光标所在行的内容，插入光标位置下面 ；  <code>Ctrl+Alt+L</code> 格式化代码 ；</p>
<p><code>Ctrl+/</code>单行注释 ； <code>Ctrl+Shift+/</code>选中代码注释，多行注释，再按取消注释 ；</p>
<p><code>Alt+Ins</code>自动生成代码，toString，get，set等方法 ；<code>Alt+Shift+上下箭头</code> 移动当前代码行</p>
<p><code>n.fori</code> 快速生成n次循环for语句</p>
<p>psvm快捷生成<code>public static void main(String[], args)</code></p>
<p>sout快速输出</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PAT题解]]></title>
        <id>https://liuxbo.github.io/post/pat-ti-jie/</id>
        <link href="https://liuxbo.github.io/post/pat-ti-jie/">
        </link>
        <updated>2020-05-06T13:21:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="a-1001">A 1001</h3>
<pre><code>#include&lt;cstdio&gt;
int main(){
	int a,b,res[10];
	long long sum;
	scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
	sum=a+b;
	if(sum&lt;0){
		sum=-sum;
		printf(&quot;-&quot;);
	}
	int i=0;
	if(sum==0) printf(&quot;0&quot;);
	while(sum&gt;0){
		res[i++]=sum%10;
		sum=sum/10;
	}
	for(int j=i-1;j&gt;=0;j--){
		printf(&quot;%d&quot;,res[j]);
		if(j%3==0&amp;&amp;j!=0) printf(&quot;,&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1002多项式求和">A1002(多项式求和)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;string.h&gt;
const int maxn=1001;
int count1,count2;
double coe[maxn]={},a;
int number=0;
int main(){
	scanf(&quot;%d&quot;,&amp;count1);
	while(count1--){
		int i;
	    scanf(&quot;%d%lf&quot;,&amp;i,&amp;a);
		coe[i]=coe[i]+a;
	}
	scanf(&quot;%d&quot;,&amp;count2);
	while(count2--){
        int k;
		scanf(&quot;%d%lf&quot;,&amp;k,&amp;a);
		coe[k]=coe[k]+a;
	}
	for(int k=maxn-1;k&gt;=0;k--){
		if(coe[k]!=0){
			number++;
		}
	}
    printf(&quot;%d&quot;,number);
	for(int k=maxn-1;k&gt;=0;k--){
		if(coe[k]!=0) printf(&quot; %d %.1f&quot;,k,coe[k]);
	}
	return 0;
} 
</code></pre>
<h3 id="a1003">A1003</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=510;
const int INF=1000000000;
int weight[maxn],d[maxn],w[maxn],num[maxn],G[maxn][maxn];
int n;
bool vis[maxn]={false};
void dijks(int s){
	fill(d,d+maxn,INF);
	fill(num,num+maxn,0);
	fill(w,w+maxn,0);
	w[s]=weight[s];
	d[s]=0;
	num[s]=1;
	for(int i=0;i&lt;n;i++){
		int u=-1,MIN=INF;
		for(int j=0;j&lt;n;j++){
			if(vis[j]==false&amp;&amp;d[j]&lt;MIN){
				u=j;
				MIN=d[j];
			}
		}
		if(u==-1) return;
		vis[u]=true;
		for(int v=0;v&lt;n;v++){
			if(vis[v]==false&amp;&amp;G[u][v]!=INF){
				if(d[u]+G[u][v]&lt;d[v]){
					num[v]=num[u];
					d[v]=d[u]+G[u][v];
					w[v]=w[u]+weight[v];
				}else if(d[u]+G[u][v]==d[v]){
					if(w[v]&lt;w[u]+weight[v]){
						w[v]=w[u]+weight[v];
					}
					num[v]+=num[u];
				}
			}
		}
	}
}
int main(){
	int m,st,end;
	scanf(&quot;%d%d%d%d&quot;,&amp;n,&amp;m,&amp;st,&amp;end);
	for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,&amp;weight[i]);
	fill(G[0],G[0]+maxn*maxn,INF);
	for(int i=0;i&lt;m;i++){
		int c1,c2;
		scanf(&quot;%d%d&quot;,&amp;c1,&amp;c2);
		scanf(&quot;%d&quot;,&amp;G[c1][c2]);
		G[c2][c1]=G[c1][c2]; 
	}
	dijks(st);
	printf(&quot;%d %d&quot;,num[end],w[end]);
	return 0;
}
</code></pre>
<h3 id="a1004">A1004</h3>
<pre><code>1.DFS法
#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
const int maxn = 110;
int hashtable[maxn] = { 0 };
vector&lt;int&gt; child[maxn];
int n,m,totallevel=0;
void DFS(int index, int level) {
	if (child[index].size() == 0) {
		hashtable[level]++;
		if (level &gt; totallevel) totallevel=level;
		return;
	}
	for (int i = 0; i &lt; child[index].size(); i++) {
		DFS(child[index][i], level + 1);
	}
}
int main() {
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	int father,num,temp;
	while (m--) {
		scanf(&quot;%d%d&quot;, &amp;father, &amp;num);
		while (num--) {
			scanf(&quot;%d&quot;, &amp;temp);
			child[father].push_back(temp);
		}
	}
	DFS(1, 0);
	for (int i = 0; i &lt;= totallevel; i++) {
		printf(&quot;%d&quot;, hashtable[i]);
		if (i &lt; totallevel) printf(&quot; &quot;);
	}
	return 0;
}

2.BFS法
#include&lt;cstdio&gt;
#include&lt;queue&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 110;
int hashtable[maxn] = { 0 };
vector&lt;int&gt; child[maxn];
int n, m, level[maxn] = { 0 },maxlevel=0;
void BFS() {
	level[1] = 1;
	queue&lt;int&gt; q;
	q.push(1);
	while (!q.empty()) {
		int now = q.front();
		q.pop();
		if (child[now].size() == 0) {
			hashtable[level[now]]++;
			maxlevel = max(maxlevel, level[now]);
		}
		for (int i = 0; i &lt; child[now].size(); i++) {
			level[child[now][i]] = level[now] + 1;
			q.push(child[now][i]);
		}
	}
}
int main() {
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	int father,num,temp;
	while (m--) {
		scanf(&quot;%d%d&quot;, &amp;father, &amp;num);
		while (num--) {
			scanf(&quot;%d&quot;, &amp;temp);
			child[father].push_back(temp);
		}
	}
	BFS();
	for (int i = 1; i &lt;= maxlevel; i++) {
		printf(&quot;%d&quot;, hashtable[i]);
		if (i &lt; maxlevel) printf(&quot; &quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1005">A1005</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;string&gt;
#include&lt;cstring&gt;
using namespace std;
int main(){
	int res[3],sum[110],i,result=0;
	char number[110];
	string english[10]={&quot;zero&quot;,&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,&quot;four&quot;,&quot;five&quot;,&quot;six&quot;,&quot;seven&quot;,&quot;eight&quot;,&quot;nine&quot;};
	scanf(&quot;%s&quot;,number);
	int len=strlen(number);
	for(i=0;i&lt;len;i++){
		sum[i]=number[i]-'0';
		result+=sum[i];
	}
	int j=0;
	if(result==0) printf(&quot;zero&quot;);
	while(result){
		res[j++]=result%10;
		result/=10;
	}
	for(int x=j-1;x&gt;=0;x--){
		printf(&quot;%s&quot;,english[res[x]].c_str());
		if(x!=0) printf(&quot; &quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1006">A1006</h3>
<pre><code>#include&lt;cstdio&gt; 

struct person {
	char id[16];
	int hh, mm, ss;
}temp,first,last;
bool great(person node1, person node2) {
	if (node1.hh != node2.hh) return node1.hh &gt; node2.hh;
	if (node2.mm != node2.mm) return node1.mm &gt; node2.mm;
	return node1.ss &gt; node2.ss;
}
int main() {
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	first.hh = 24, first.mm = 60, first.ss = 60;
	last.hh = 0, last.mm = 0, last.ss = 0;
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%s %d:%d:%d&quot;, temp.id, &amp;temp.hh, &amp;temp.mm, &amp;temp.ss);
		if (great(temp, first) == false)  first = temp;
		scanf(&quot;%d:%d:%d&quot;, &amp;temp.hh, &amp;temp.mm, &amp;temp.ss);
		if (great(temp, last))   last = temp;
	}
	printf(&quot;%s %s&quot;, first.id, last.id);
	return 0;
}
</code></pre>
<h3 id="a1007">A1007</h3>
<pre><code>#include&lt;cstdio&gt;
const int maxn=10010;
int a[maxn],dp[maxn],s[maxn]={0};
int main(){
	int n;
	scanf(&quot;%d&quot;,&amp;n);
	bool flag=false;
	for(int i=0;i&lt;n;i++){
		scanf(&quot;%d&quot;,&amp;a[i]);
		if(a[i]&gt;=0) flag=true;
	}
	if(flag==false){
		printf(&quot;0 %d %d&quot;,a[0],a[n-1]);
		return 0;
	}
	dp[0]=a[0];
	for(int i=1;i&lt;n;i++){
		if(a[i]&gt;dp[i-1]+a[i]){
			dp[i]=a[i];
			s[i]=i;
		} 
		else {
			dp[i]=dp[i-1]+a[i];
			s[i]=s[i-1];
		}
	}
	int k=0;
	for(int i=1;i&lt;n;i++){
		if(dp[i]&gt;dp[k]){
			k=i;
		}
	}
	printf(&quot;%d %d %d&quot;,dp[k],a[s[k]],a[k]);
	return 0;
}
</code></pre>
<h3 id="a1008">A1008</h3>
<pre><code>#include &lt;iostream&gt;
using namespace std;
int main()
{
	int n,a[100000],totaltime=0;
	cin &gt;&gt; n;
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; a[i];
		if (i == 0) totaltime = a[i] * 6 + 5;
		else {
			if (a[i] &gt; a[i - 1]) totaltime +=(a[i] - a[i - 1]) * 6 + 5;
			else totaltime += ((a[i-1] - a[i]) * 4 + 5);
		}
	}
	cout &lt;&lt; totaltime;
	return 0;
}
</code></pre>
<h3 id="a1009-多项式相乘">A1009 多项式相乘</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;string.h&gt;
const int maxn=2001;
int count1,count2;
struct poly{
	int exp;
	double coef;
}coe[1001];
double result[maxn];
int number=0;
int main(){
	scanf(&quot;%d&quot;,&amp;count1);
for(int i =0;i&lt;count1;i++){
	scanf(&quot;%d%lf&quot;,&amp;coe[i].exp,&amp;coe[i].coef);
    }
	scanf(&quot;%d&quot;,&amp;count2);
for(int i=0;i&lt;count2;i++){
	int k;
	double a;
		scanf(&quot;%d%lf&quot;,&amp;k,&amp;a);
		for(int i=0;i&lt;count1;i++){
			result[k+coe[i].exp]+=(a*coe[i].coef);
		}
	}
	for(int k=maxn-1;k&gt;=0;k--){
		if(result[k]!=0){
			number++;
		}
	}
    printf(&quot;%d&quot;,number);
	for(int k=maxn-1;k&gt;=0;k--){
		if(result[k]!=0) printf(&quot; %d %.1f&quot;,k,result[k]);
	}
	return 0;
} 
</code></pre>
<h3 id="a1010-二分">A1010 二分</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cctype&gt;
#include&lt;algorithm&gt;
#include&lt;cmath&gt;
#include&lt;string&gt;
using namespace std;
long long convert_to10(string n, long long radix) {
	int temp=0, index = 0;
	long long sum = 0;
	for (auto it = n.rbegin(); it != n.rend(); it++) {
		temp = isdigit(*it) ? *it - '0' : *it - 'a' + 10;
		sum += temp * pow(radix, index++);
	}
	return sum;
}
long long find_radix(string n, long long num) {
	char it = *max_element(n.begin(), n.end());
	long long low = (isdigit(it) ? it - '0' : it - 'a' + 10) + 1;
	long long high = max(low, num);
	while (low &lt;= high) {
		long long mid = (low + high) / 2;
		long long t = convert_to10(n, mid);
		if (t &gt; num || t &lt; 0) high = mid - 1;
		else if (t == num) return mid;
		else if (t &lt; num)  low = mid + 1;
	}
	return -1;
}
int main() {
	string n1, n2;
	int tag;
	long long radix;
	cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; tag &gt;&gt; radix;
	long long ans = tag == 1 ? find_radix(n2, convert_to10(n1, radix)) : find_radix(n1, convert_to10(n2, radix));
	if (ans == -1) printf(&quot;Impossible&quot;);
	else printf(&quot;%lld&quot;, ans);
	return 0;
}
</code></pre>
<h3 id="a1011">A1011</h3>
<pre><code>#include&lt;cstdio&gt; 
char s[4] = &quot;WTL&quot;;
double a,res=1;
int main() {
	for (int i = 0; i &lt; 3; i++) {
		int imax;
		double temp = 0;
		for (int i = 0; i &lt; 3; i++) {
			scanf_s(&quot;%lf&quot;, &amp;a);
			if (a &gt; temp) {
				temp = a;
				imax = i;
			}
		}
		res *= temp;
		printf(&quot;%c &quot;, s[imax]);
	}
	printf(&quot;%.2f&quot;, (res * 0.65 - 1) * 2);
	return 0;
}
</code></pre>
<h3 id="a1012">A1012</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node {
	int id;
	int grade[4];
}stu[2100];
int now;
bool cmp(node a, node b) {return a.grade[now] &gt; b.grade[now];}
int rank_stu[1000000][4] = { 0 };
char course[4] = { 'A','C','M','E' };
int main() {
	int n, m;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d%d%d%d&quot;, &amp;stu[i].id, &amp;stu[i].grade[1], &amp;stu[i].grade[2], &amp;stu[i].grade[3]);
		stu[i].grade[0] = stu[i].grade[1] + stu[i].grade[2] + stu[i].grade[3];
	}
	for (now = 0; now &lt; 4; now++) {
		sort(stu, stu + n, cmp);
		rank_stu[stu[0].id][now] = 1;
		for (int i = 1; i &lt; n; i++) {
			if (stu[i].grade[now] == stu[i - 1].grade[now]) rank_stu[stu[i].id][now] = rank_stu[stu[i - 1].id][now];
			else rank_stu[stu[i].id][now] = i+1;
		}
	}
	int query;
	for (int i = 0; i &lt; m; i++) {
		scanf(&quot;%d&quot;, &amp;query);
		if (rank_stu[query][0] == 0) printf(&quot;N/A\n&quot;);
		else {
			int best=0;
			for (int j = 0; j &lt; 4; j++) {
				if (rank_stu[query][j] &lt; rank_stu[query][best])
					best = j;
			}
			printf(&quot;%d %c\n&quot;, rank_stu[query][best], course[best]);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1013">A1013</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=1010;
vector&lt;int&gt; G[maxn];
bool vis[maxn]={false};
int deletepoint;
void DFS(int v){
	if(v==deletepoint) return;
	vis[v]=true;
	for(int i=0;i&lt;G[v].size();i++){
		if(vis[G[v][i]]==false){
			DFS(G[v][i]);
		}
	}
}
int main(){
	int n,m,k;
	scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;k);
	while(m--){
		int a,b;
		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
		G[a].push_back(b);
		G[b].push_back(a);
	}
	for(int i=0;i&lt;k;i++){
		int block=0;
		scanf(&quot;%d&quot;,&amp;deletepoint);
		fill(vis,vis+maxn,false);
		for(int j=1;j&lt;=n;j++){
			if(j!=deletepoint&amp;&amp;vis[j]==false){
				DFS(j);
				block++;
			}
		}
		printf(&quot;%d\n&quot;,block-1);
	}
	return 0;
}
</code></pre>
<h3 id="a101430-模拟-难题">A1014(30 模拟  难题)</h3>
<pre><code>#include&lt;vector&gt;
#include&lt;cstdio&gt;
#include&lt;queue&gt;
using namespace std;
struct node {
	int poptime, endtime;
	queue&lt;int&gt; q;
};
int main() {
	int n, m, k, Q, index = 1, query;
	scanf(&quot;%d%d%d%d&quot;, &amp;n, &amp;m, &amp;k, &amp;Q);
	vector&lt;int&gt; time(k + 1), ans(k + 1);
	for (int i = 1; i &lt;= k; i++) scanf(&quot;%d&quot;, &amp;time[i]);
	vector&lt;node&gt;window(n + 1);
	vector&lt;bool&gt;sorry(k + 1, false);
	for (int i = 1; i &lt;= m; i++) {
		for (int j = 1; j &lt;= n; j++) {
			if (index &lt;= k) {
				window[j].q.push(time[index]);
				if (window[j].endtime &gt;= 540) sorry[index] = true;
				window[j].endtime += time[index];
				if (i == 1) window[j].poptime = window[j].endtime;
				ans[index] = window[j].endtime;
				index++;
			}
		}
	}
	while (index &lt;= k) {
		int minpoptime = window[1].poptime, tempwindow = 1;
		for (int i = 2; i &lt;= n; i++) {
			if (window[i].poptime &lt; minpoptime) {
				minpoptime = window[i].poptime;
				tempwindow = i;
			}
		}
		window[tempwindow].q.pop();
		window[tempwindow].poptime += window[tempwindow].q.front();
		window[tempwindow].q.push(time[index]);
		if (window[tempwindow].endtime &gt;= 540) sorry[index] = true;
		window[tempwindow].endtime += time[index];
		ans[index] = window[tempwindow].endtime;
		index++;
	}
	while (Q--) {
		scanf(&quot;%d&quot;, &amp;query);
		if (sorry[query] == true) printf(&quot;Sorry\n&quot;);
		else printf(&quot;%02d:%02d\n&quot;, (ans[query] + 480) / 60, (ans[query] + 480) % 60);
	}
	return 0;
}
</code></pre>
<h3 id="a1015">A1015</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cmath&gt;
#include&lt;algorithm&gt;
using namespace std;
bool isprime(int n) {
	if (n &lt;= 1) return false;
	int sqr = (int)sqrt(n * 1.0);
	for (int i = 2; i &lt;= sqr; i++) {
		if (n % i == 0) return false;
	}
	return true;
}
int change(int n,int b) {
	int res[20],ans=0;
	int j = 0;
	do {
		res[j++] = n % b;
		n = n / b;
	} while (n != 0);
	reverse(res, res+ j);
	for (int i = 0; i &lt; j; i++) {
		ans += res[i] * pow(b*(1.0), i*(1.0));
	}
	return ans;
}
int main() {
	while (1) {
		int num, radix;
		scanf_s(&quot;%d&quot;, &amp;num);
		if (num &lt; 0) break;
		else {
			scanf_s(&quot;%d&quot;, &amp;radix);
			int ans = change(num, radix);
			if (isprime(num) &amp;&amp; isprime(ans)) printf(&quot;Yes\n&quot;);
			else printf(&quot;No\n&quot;);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1016">A1016</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 1010;
int toll[24];
struct Record {
	char name[21];
	int mon, dd, hh, mm;
	bool status;
}rec[maxn],temp;
bool cmp(Record a, Record b) {
	if (strcmp(a.name, b.name) != 0) return strcmp(a.name, b.name) &lt; 0;
	else if (a.mon != b.mon) return a.mon &lt; b.mon;
	else if (a.dd != b.dd) return a.dd &lt; b.dd;
	else if (a.hh != b.hh) return a.hh &lt; b.hh;
	else return a.mm &lt; b.mm;
}
void get_ans(int on, int off, int&amp; time, int&amp; money) {
	temp = rec[on];
	while (temp.dd &lt; rec[off].dd || temp.hh &lt; rec[off].hh || temp.mm &lt; rec[off].mm) {
		time++;
		money += toll[temp.hh];
		temp.mm++;
		if (temp.mm &gt;= 60) {
			temp.mm = 0;
			temp.hh++;
		}
		if (temp.hh &gt;= 24) {
			temp.hh = 0;
			temp.dd++;
		}
	}
}
int main() {
	char line_status[10];
	int n;
	for (int i = 0; i &lt; 24; i++) scanf(&quot;%d&quot;, &amp;toll[i]);
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%s %d:%d:%d:%d %s&quot;, rec[i].name, &amp;rec[i].mon, &amp;rec[i].dd, &amp;rec[i].hh, &amp;rec[i].mm,line_status);
		if (strcmp(line_status, &quot;on-line&quot;) == 0) rec[i].status = true;
		if (strcmp(line_status, &quot;off-line&quot;) == 0) rec[i].status = false;
	}
	sort(rec, rec + n, cmp);
	int on = 0, off, next;
	while (on &lt; n) {//每次处理一个用户的所有记录
		int needprint = 0;
		next = on;
		while (next &lt; n &amp;&amp; strcmp(rec[next].name, rec[on].name) == 0) {//判断是否有配对项
			if (rec[next].status == true &amp;&amp; needprint == 0) needprint = 1;
			else if (rec[next].status == false &amp;&amp; needprint == 1) needprint = 2;
			next++;
		}
		if (needprint &lt; 2) {
			on = next;
			continue;
		}
		int allmoney = 0;
		printf(&quot;%s %02d\n&quot;, rec[on].name, rec[on].mon);
		while (on &lt; next) {
			while (on &lt; next - 1 &amp;&amp; !(rec[on].status == true &amp;&amp; rec[on + 1].status == false)) on++;
			off = on + 1;
			if (off == next) {
				on = next;
				break;
			}
			int time = 0;
			int  money = 0;
			get_ans(on, off, time, money);
			allmoney += money;
			printf(&quot;%02d:%02d:%02d &quot;, rec[on].dd, rec[on].hh, rec[on].mm);
			printf(&quot;%02d:%02d:%02d &quot;, rec[off].dd, rec[off].hh, rec[off].mm);
			printf(&quot;%d $%.2f\n&quot;, time, money / 100.0);
			on=off+1;
		}
		printf(&quot;Total amount:$%.2f\n&quot;, double(allmoney) / 100);
	}
	return 0;
}
</code></pre>
<h3 id="a1017-25-模拟-时间处理-排序">A1017 （25 模拟 ，时间处理、排序、）</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node{
	int cometime;
	int servetime;
}newcustomer; 
int Endtime[101];
vector&lt;node&gt; customer;
int convert(int h,int m,int s){
	return h*3600+m*60+s;
}
bool cmp(node a,node b){
	return a.cometime&lt;b.cometime;
}
int main(){
	int n,w,totwait=0;
	scanf(&quot;%d%d&quot;,&amp;n,&amp;w);
	int starttime=convert(8,0,0);
	int endtime=convert(17,0,0);
	for(int i=0;i&lt;n;i++){
		int hh,mm,ss,serve;
		scanf(&quot;%d:%d:%d %d&quot;,&amp;hh,&amp;mm,&amp;ss,&amp;serve);
		newcustomer.cometime=convert(hh,mm,ss);
		if(newcustomer.cometime&gt;endtime) continue;
		newcustomer.servetime=(serve&lt;=60?serve*60:3600);
		customer.push_back(newcustomer);
	}
	sort(customer.begin(),customer.end(),cmp);
	for(int i=0;i&lt;=101;i++) Endtime[i]=starttime;
	for(int i=0;i&lt;customer.size();i++){
		int minendtime=1000000000,id=-1;
		for(int j=0;j&lt;w;j++){
			if(Endtime[j]&lt;minendtime){
				minendtime=Endtime[j];
				id=j;
			}
		}
		if(Endtime[id]&lt;=customer[i].cometime){
			Endtime[id]=customer[i].cometime+customer[i].servetime;
		}else{
			totwait+=Endtime[id]-customer[i].cometime; 
			Endtime[id]+=customer[i].servetime; 
		}
	}
	if(customer.size()==0) printf(&quot;0.0&quot;);
	else printf(&quot;%.1f&quot;,(double)((totwait*1.0/60.0)/customer.size()));
	return 0;
}
</code></pre>
<h3 id="a1018">A1018</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;
const int  maxn=510;
const int INF=1000000000;
int minneed=INF,minremain=INF,cmax,n,sp,m;
int G[maxn][maxn],d[maxn],weight[maxn];
vector&lt;int&gt; path,temppath;
vector&lt;int&gt;pre[maxn];
bool vis[maxn]={false};
void dijkst(int s){
	fill(d,d+maxn,INF);
	d[s]=0;
	for(int i=0;i&lt;=n;i++){
		int u=-1,MIN=INF;
		for(int j=0;j&lt;=n;j++){
			if(vis[j]==false&amp;&amp;d[j]&lt;MIN){
				u=j;
				MIN=d[u];
			}
		}
		if(u==-1) return;
		vis[u]=true;
		for(int v=0;v&lt;=n;v++){
			if(vis[v]==false&amp;&amp;G[u][v]!=INF){
				if(d[v]&gt;d[u]+G[u][v]){
					d[v]=d[u]+G[u][v];
					pre[v].clear();
					pre[v].push_back(u);
				}else if(d[v]==G[u][v]+d[u]){
					pre[v].push_back(u);
				}
			}
		}
	}
}
void DFS(int v){
	if(v==0){
		temppath.push_back(v);
		int need=0,remain=0;
		for(int i=temppath.size()-1;i&gt;=0;i--){
			int id=temppath[i];
			if(weight[id]&gt;0){
				remain+=weight[id];
			}else{
				if(abs(weight[id])&lt;remain){
					remain-=abs(weight[id]);
				}else {
					need+=abs(weight[id])-remain;
					remain=0;
				}
			}
		} 
		if(need&lt;minneed){
			minneed=need;
			minremain=remain;
			path=temppath;
		}else if(need==minneed&amp;&amp;remain&lt;minremain){
			minremain=remain;
			path=temppath;
		}
		temppath.pop_back();
		return;
	}
	temppath.push_back(v);
	for(int i=0;i&lt;pre[v].size();i++){
		DFS(pre[v][i]);
	}
	temppath.pop_back();
}
int main(){
	scanf(&quot;%d%d%d%d&quot;,&amp;cmax,&amp;n,&amp;sp,&amp;m);
	fill(G[0],G[0]+maxn*maxn,INF);
	for(int i=1;i&lt;=n;i++){
		scanf(&quot;%d&quot;,&amp;weight[i]);
		weight[i]-=cmax/2;
	}
	for(int i=1;i&lt;=m;i++){
		int a,b;
		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
		scanf(&quot;%d&quot;,&amp;G[a][b]);
		G[b][a]=G[a][b];
	}
	dijkst(0);
	DFS(sp);
	printf(&quot;%d &quot;,minneed);
	for(int i=path.size()-1;i&gt;=0;i--){
		printf(&quot;%d&quot;,path[i]);
		if(i&gt;0) printf(&quot;-&gt;&quot;);
	}
	printf(&quot; %d&quot;,minremain);
	return 0;
}
</code></pre>
<h3 id="a1019">A1019</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
vector&lt;int&gt; a,c;
void change(int n,int b){
	if(n&gt;0){
		int i=0;
		change(n/b,b);
		a.push_back(n%b);
	}
	else return;
}
bool judge(vector&lt;int&gt; a,vector&lt;int&gt; b){
	for(int i=0;i&lt;a.size();i++){
		if (a[i]==b[i]) continue;
		else return false;
	}
	return true;
}
int main(){
	int n,b;
	scanf(&quot;%d %d&quot;,&amp;n,&amp;b);
	change(n,b);
	for(int i=0;i&lt;a.size();i++){
		c.push_back(a[i]);
	}
	for (int min = 0, max = a.size()-1; min &lt;= max; min++, max--) {
		int temp = a[min];
		a[min] = a[max];
		a[max] = temp;
	}
	if(judge(a,c)==true){
		printf(&quot;Yes\n&quot;);
		for(int i=0;i&lt;c.size();i++){
			printf(&quot;%d&quot;,c[i]);
			if(i!=c.size()-1) printf(&quot; &quot;);
		}
	}
	if(judge(a,c)==false) {
		printf(&quot;No\n&quot;);
		for(int i=0;i&lt;c.size();i++){
			printf(&quot;%d&quot;,c[i]);
			if(i!=c.size()-1) printf(&quot; &quot;);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1020">A1020</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;queue&gt;
using namespace std;
int postorder[31], inorder[31], n;
struct node {
	int data;
	node* lchild;
	node* rchild;
};
node* create(int postL, int postR, int inL, int inR) {
	if (postL &gt; postR) return NULL;
	node* root = new node;
	root-&gt;data = postorder[postR];
	int k;
	for (int i = inL; i &lt;= inR; i++) {
		if (inorder[i] == root-&gt;data) {
			k = i;
			break;
		}
	}
	int leafnum = k - inL;
	root-&gt;lchild = create(postL, postL + leafnum - 1, inL, k - 1);
	root-&gt;rchild = create(postL + leafnum, postR - 1, k + 1, inR);
	return root;
}
int num = 0;
void layerorder(node* root) {
	queue&lt;node*&gt; q;
	q.push(root);
	while (!q.empty()) {
		node* now = q.front();
		q.pop();
		printf(&quot;%d&quot;, now-&gt;data);
        num++;
		if (num &lt; n) printf(&quot; &quot;);
		if (now-&gt;lchild != NULL) q.push(now-&gt;lchild);
		if (now-&gt;rchild != NULL) q.push(now-&gt;rchild);
	}
}
int main() {
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;postorder[i]);
	}
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;inorder[i]);
	}
	node* root = create(0, n - 1, 0, n - 1);
	layerorder(root);
	return 0;
}
</code></pre>
<h3 id="a1021">A1021</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;set&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=10010;
vector&lt;vector&lt;int&gt; &gt; G;
set&lt;int&gt; ans;
vector&lt;int&gt; temp;
bool vis[maxn]={false};
int maxheight=0;
void DFS(int node,int height){
	if(height&gt;maxheight){
		maxheight=height;
		temp.clear();
		temp.push_back(node);
	}else if(height==maxheight){
		temp.push_back(node);
	}
	vis[node]=true;
	for(int i=0;i&lt;G[node].size();i++){
		if(vis[G[node][i]]==false){
			DFS(G[node][i],height+1);
		}
	}
}
int main(){
	int n,count=0,select1;
	scanf(&quot;%d&quot;,&amp;n);
	G.resize(n+1);
	for(int i=0;i&lt;n-1;i++){
		int a,b;
		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
		G[a].push_back(b);
		G[b].push_back(a);
	}
	for(int i=1;i&lt;=n;i++){
		if(vis[i]==false){
			DFS(i,1);
		    if(i==1){
			   if(temp.size()!=0) select1=temp[0];
			   for(int j=0;j&lt;temp.size();j++)	ans.insert(temp[j]);
	    	}
	    	count++;
		} 	
	}
	if(count&gt;=2) printf(&quot;Error: %d components&quot;,count);
	else{
		temp.clear();
		maxheight=0;
		fill(vis,vis+maxn,false);
		DFS(select1,1);
		for(int i=0;i&lt;temp.size();i++) ans.insert(temp[i]);
		for(auto it=ans.begin();it!=ans.end();it++) printf(&quot;%d\n&quot;,*it);
	}
	return 0;
}
</code></pre>
<h3 id="a1022">A1022</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;map&gt;
#include&lt;set&gt;
#include&lt;string&gt;
using namespace std;
map&lt;string, set&lt;int&gt; &gt; mptitle, mpautor, mpkey, mppublish, mpyear;
void query(map&lt;string, set&lt;int&gt; &gt;&amp; mp, string&amp; str) {
	if (mp.count(str) == 0) cout &lt;&lt; &quot;Not Found\n&quot;;
	else {
		for (auto it = mp[str].begin(); it != mp[str].end(); it++) {
			printf(&quot;%07d\n&quot;, *it);
		}
	}
}
int main() {
	int n,m,id;
	cin &gt;&gt; n;
	string title, autor, keyword, publish, year;
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; id;
		char c = getchar();
		getline(cin, title);
		mptitle[title].insert(id);
		getline(cin, autor);
		mpautor[autor].insert(id);
		while (cin &gt;&gt; keyword) {
			mpkey[keyword].insert(id);
			 c = getchar();
			if (c == '\n') break;
		}
		getline(cin, publish);
		mppublish[publish].insert(id);
		getline(cin, year);
		mpyear[year].insert(id);
	}
	cin &gt;&gt; m;
	while(m--){
		int type;
		string temp;
		scanf(&quot;%d: &quot;, &amp;type);
		getline(cin, temp);
		cout &lt;&lt; type &lt;&lt; &quot;:&quot; &lt;&lt; &quot; &quot; &lt;&lt; temp&lt;&lt;endl;
		if (type == 1) query(mptitle, temp);
		if (type == 2) query(mpautor, temp);
		if (type == 3) query(mpkey, temp);
		if (type == 4) query(mppublish, temp);
		if (type == 5) query(mpyear, temp);
	}
	return 0;
}
</code></pre>
<h3 id="a1023">A1023</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;cstring&gt;
using namespace std;
struct bign {
	int d[1000];
	int len;
	bign() {
		len = 0;
		memset(d, 0, sizeof(d));
	}
};
bign change(string str) {
	bign a;
	a.len = str.length();
	for (int i = 0; i &lt; a.len; i++) {
		a.d[i] = str[a.len - 1 - i]-'0';
	}
	return a;
}
bign multi(bign a, int b) {
	bign c;
	int carry=0;
	for (int i = 0; i &lt; a.len; i++) {
		int temp = a.d[i] * b + carry;
		c.d[c.len++] = temp % 10;
		carry = temp / 10;
	}
	while (carry != 0) {
		c.d[c.len++] = carry % 10;
		carry /= 10;
	}
	return c;
}
bool judge(bign a, bign b) {
	if (a.len != b.len) return false;
	else {
		int count[10] = { 0 };
		for (int i = 0; i &lt; a.len; i++) {
			count[a.d[i]]++;
			count[b.d[i]]--;
		}
		for (int i = 0; i &lt; 10; i++) {
			if (count[i] != 0) {
				return false;
			}
		}
	}
	return true;
}
void print(bign a) {
	for (int i = a.len - 1; i &gt;= 0; i--) {
		printf(&quot;%d&quot;, a.d[i]);
	}
}
int main() {
	string str;
	cin &gt;&gt; str;
	bign a, ans;
	a=change(str);
	ans = multi(a, 2);
	if (judge(a, ans)) cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;
	else cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;
	print(ans);
	return 0;
}
</code></pre>
<h3 id="a1024">A1024</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
struct bign {
	int d[100];
	int len;
	bign() {
		len = 0;
		memset(d, 0, sizeof(d));
	}
};
bign change(string str) {
	bign res;
	res.len = str.size();
	for (int i = 0; i &lt; res.len; i++) {
		res.d[i] = str[res.len - 1 - i]-'0';
	}
	return res;
}
bign add(bign a, bign b) {
	bign c;
	int carry=0;
	for (int i = 0; i &lt; a.len || i &lt; b.len; i++) {
		int temp = a.d[i] + b.d[i] + carry;
		c.d[c.len++] = temp % 10;
		carry = temp / 10;
	}
	if (carry != 0) {
		c.d[c.len++] = carry % 10;
	}
	return c;
}
bool judge(bign a) {
	for (int i = 0; i &lt;= a.len / 2; i++) {
		if (a.d[i] != a.d[a.len - 1 - i]) {
			return false;
		}
	}
	return true;
}
void print(bign a) {
	for (int i = a.len - 1; i &gt;= 0; i--) {
		printf(&quot;%d&quot;, a.d[i]);
	}
	cout &lt;&lt; endl;
}
int main() {
	string str;
	int k;
	cin &gt;&gt; str;
	cin &gt;&gt; k;
	bign ans=change(str);
	int i;
	for ( i = 0; i &lt; k; i++) {
		if (judge(ans)) break;
		bign temp = ans;
		reverse(temp.d, temp.d + temp.len);
		ans = add(temp, ans);
	}
	print(ans);
	if (i &lt;= k) cout &lt;&lt; i;
	else cout &lt;&lt; k;
	return 0;
}
</code></pre>
<h3 id="a1025">A1025</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
struct student{
	char id[15];
	int grade;
	int lrank,frank;
	int local_num;
}testee[30010];
bool cmp1(student a,student b){ 
     return a.grade&gt;b.grade;
}
bool cmp2(student a,student b){
	if(a.frank!=b.frank) return a.frank&lt;b.frank;
	else if(strcmp(a.id,b.id)!=0) return strcmp(a.id,b.id)&lt;0;
}
int main(){
	int n;
	int total=0;
	int localnum=0;
	scanf(&quot;%d&quot;,&amp;n);
	for(int i=0;i&lt;n;i++){
		int temp;
		localnum++;
		int on,off;
		on=total;
		off=on;
		scanf(&quot;%d&quot;,&amp;temp);
		for(int j=0;j&lt;temp;j++){
			scanf(&quot;%s%d&quot;,testee[total].id,&amp;testee[total].grade);
			testee[total].local_num=localnum;
			total++;
			off++;
		}
		sort(testee+on,testee+off,cmp1);
		testee[on].lrank=1;
		for(int k=on+1;k&lt;off;k++){
			if(testee[k].grade==testee[k-1].grade) testee[k].lrank=testee[k-1].lrank;
			else testee[k].lrank=k-on+1;
		}
	}
	sort(testee,testee+total,cmp1);
	testee[0].frank=1;
	for(int k=1;k&lt;total;k++){
		if(testee[k].grade==testee[k-1].grade) testee[k].frank=testee[k-1].frank;
		else testee[k].frank=k+1;
	}
	sort(testee,testee+total,cmp2);
	printf(&quot;%d\n&quot;,total);
	for(int i=0;i&lt;total;i++){
		printf(&quot;%s %d %d %d\n&quot;,testee[i].id,testee[i].frank,testee[i].local_num,testee[i].lrank);
	}
	return 0;
}
</code></pre>
<h3 id="a1027">A1027</h3>
<pre><code>#include&lt;cstdio&gt;
int a[2],b[2],c[2];
	void change(int x,int a[]){
		if(x==0) {
			a[0]=0;
			a[1]=0;
		}
		else{
			a[0]=x%13;
			if((x/13)==0) a[1]=0;
			else a[1]=(x/13)%13;
		}
	}
int main(){
	int red,green,blue;
	scanf(&quot;%d %d %d&quot;,&amp;red,&amp;green,&amp;blue);
	char str[15]={'0','1','2','3','4','5','6','7','8','9','A','B','C'};
    change(red,a);
	printf(&quot;#%c%c&quot;,str[a[1]],str[a[0]]);
	change(green,b);
	printf(&quot;%c%c&quot;,str[b[1]],str[b[0]]);
	change(blue,c);
	printf(&quot;%c%c&quot;,str[c[1]],str[c[0]]);
	return 0;
} 
</code></pre>
<h3 id="a1028">A1028</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 100010;
struct node {
	char id[10];
	char name[10];
	int grade;
}student[100010];
int c;
bool cmp(node a, node b) {
	if (c == 1) return strcmp(a.id, b.id) &lt; 0;
	if (c == 2) {
		if (strcmp(a.name, b.name) != 0) return strcmp(a.name, b.name) &lt; 0;
		else return strcmp(a.id, b.id) &lt; 0;
	}
	if (c == 3) {
		if (a.grade != b.grade) return a.grade &lt; b.grade;
		else return strcmp(a.id, b.id) &lt; 0;
	}
}
int main() {
		int n;
		scanf(&quot;%d&quot;, &amp;n);
		scanf(&quot;%d&quot;, &amp;c);
		for (int i = 0; i &lt; n; i++) scanf(&quot;%s%s%d&quot;, student[i].id, student[i].name, &amp;student[i].grade);
		sort(student, student + n, cmp);
		for (int i = 0; i &lt; n; i++) printf(&quot;%s%s%d\n&quot;, student[i].id, student[i].name, student[i].grade);
		return 0;
}
</code></pre>
<h3 id="a1029">A1029</h3>
<pre><code>1.直接暴力
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=400010;
int main(){
    int n1,n2;
    long long a[maxn];
    scanf(&quot;%d&quot;,&amp;n1);
    int i;
    for( i=0;i&lt;n1;i++){
        scanf(&quot;%lld&quot;,&amp;a[i]);
    }
      scanf(&quot;%d&quot;,&amp;n2);
    for( i=n1;i&lt;n2+n1;i++){
        scanf(&quot;%lld&quot;,&amp;a[i]);
    }
    sort(a,a+n1+n2);
    printf(&quot;%d&quot;,a[(n1+n2-1)/2]);
    return 0;
}

2.two points

#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=400010;
const int INF=(1&lt;&lt;31)-1;
int main(){
    int n1,n2;
    long long a[maxn],b[maxn];
    scanf(&quot;%d&quot;,&amp;n1);
    for(int i=0;i&lt;n1;i++){
        scanf(&quot;%lld&quot;,&amp;a[i]);
    }
      scanf(&quot;%d&quot;,&amp;n2);
    for(int i=0;i&lt;n2;i++){
        scanf(&quot;%lld&quot;,&amp;b[i]);
    }
    a[n1]=INF;
    b[n2]=INF;
    int midpos=(n1+n2-1)/2;
    int count=0,j=0,i=0;
    while(count&lt;midpos){
        if(a[i]&lt;b[j]) i++;
        else j++;
        count++;
    }
    if(a[i]&lt;b[j]) printf(&quot;%lld&quot;,a[i]);
    else printf(&quot;%lld&quot;,b[j]);
    return 0;
}
</code></pre>
<h3 id="a1030">A1030</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int  maxn=510;
const int INF=1000000000;
int n,m,st,destination;
int G[maxn][maxn],d[maxn],cost[maxn][maxn],pre[maxn],costtotal[maxn];
bool vis[maxn]={false};
void dijkst(int s){
	fill(d,d+maxn,INF);
	fill(costtotal,costtotal+maxn,INF);
	d[s]=0;
	costtotal[s]=0;
	for(int i=0;i&lt;n;i++){
		int u=-1,MIN=INF;
		for(int j=0;j&lt;n;j++){
			if(vis[j]==false&amp;&amp;d[j]&lt;MIN){
				u=j;
				MIN=d[u];
			}
		}
		if(u==-1) return;
		vis[u]=true;
		for(int v=0;v&lt;n;v++){
			if(vis[v]==false&amp;&amp;G[u][v]!=INF){
				if(d[v]&gt;d[u]+G[u][v]){
					d[v]=d[u]+G[u][v];
					costtotal[v]=cost[u][v]+costtotal[u];
					pre[v]=u;
				}else if(d[v]==G[u][v]+d[u]&amp;&amp;costtotal[v]&gt;costtotal[u]+cost[u][v]){
					costtotal[v]=cost[u][v]+costtotal[u];
					pre[v]=u;
				}
			}
		}
	}
}
void DFS(int v){
	if(v==st){
		printf(&quot;%d &quot;,v);
		return;
	}
    DFS(pre[v]);
    printf(&quot;%d &quot;,v);
}
int main(){
	scanf(&quot;%d%d%d%d&quot;,&amp;n,&amp;m,&amp;st,&amp;destination);
	fill(G[0],G[0]+maxn*maxn,INF);
	for(int i=1;i&lt;=m;i++){
		int c1,c2,dis,cos;
		scanf(&quot;%d%d&quot;,&amp;c1,&amp;c2);
		scanf(&quot;%d&quot;,&amp;G[c1][c2]);
		G[c2][c1]=G[c1][c2];
		scanf(&quot;%d&quot;,&amp;cost[c1][c2]);
		cost[c2][c1]=cost[c1][c2];
	}
	dijkst(st);
	DFS(destination);
	printf(&quot;%d %d&quot;,d[destination],costtotal[destination]);
	return 0;
}
</code></pre>
<h3 id="a1031">A1031</h3>
<pre><code>#include&lt;cstdio&gt; 
#include&lt;cstring&gt;
int main() {
	char str[100], uu[40][40];
    scanf(&quot;%s&quot;,str); 
	int N = strlen(str);
	int n1=(N+2)/3;
	int n3=(N+2)/3;
	int n2=N-n1-n3+2;
	int pos=0;
    memset(uu,' ',sizeof(uu));
	for(int i=0;i&lt;n1-1;i++){
		uu[i][0]=str[pos++];
	} 
	for(int j=0;j&lt;n2;j++){
		uu[n1-1][j]=str[pos++];
	}
	for(int k=n3-2;k&gt;=0;k--){
		uu[k][n2-1]=str[pos++];
	}
	for(int i=0;i&lt;n1;i++){
		for(int j=0;j&lt;n2;j++){
			printf(&quot;%c&quot;,uu[i][j]);
		}
		printf(&quot;\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1032链表">A1032(链表)</h3>
<pre><code>#include&lt;cstdio&gt;
const int maxn = 100010;
struct Node {
	int data;
	int next;
	bool flag;
}node[maxn];
int main() {
	int begin1, begin2, n;
	scanf(&quot;%d%d%d&quot;, &amp;begin1, &amp;begin2, &amp;n);
	for (int i = 0; i &lt; maxn; i++) {
		node[i].flag = false;
	}
	int address, data, next;
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d %c %d&quot;, &amp;address, &amp;data, &amp;next);
		node[address].data = data;
		node[address].next = next;
	}
	int p;
	for (p = begin1; p != -1; p = node[p].next) {
		node[p].flag = true;
	}
	for (p = begin2; p != -1; p = node[p].next) {
		if (node[p].flag == true) {
			printf(&quot;%05d&quot;, p);
			break;
		}
	}
	if (p == -1) {
		printf(&quot;-1&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1033">A1033</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 510;
const int INF = 1000000000;
struct node{
	double price;
	double distance;
}station[maxn];
bool cmp(node a, node b) {
	return a.distance &lt; b.distance;
}
int main() {
	double cmax, d, davg;
	int n;
	scanf(&quot;%lf%lf%lf%d&quot;, &amp;cmax, &amp;d, &amp;davg, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%lf%lf&quot;, &amp;station[i].price, &amp;station[i].distance);
	}
	station[n].distance = d;
	station[n].price = 0;
	sort(station, station + n + 1, cmp);
	if (station[0].distance != 0) {
		printf(&quot;The maximum travel distance = 0.00&quot;);
		return 0;
	}
	int now = 0;
	double nowtank = 0, expend = 0,  canrun = cmax * davg;
	while (now &lt; n) {
        int k=-1;
        double minprice=INF;
		for (int i = now + 1; (station[i].distance - station[now].distance) &lt;= canrun &amp;&amp; i &lt;= n; i++) {
			if (station[i].price &lt; minprice) {
				minprice = station[i].price;
				k = i;
				if (minprice &lt; station[now].price) {
					break;
				}
			}
		}
		if (k == -1) break;
		double need = (station[k].distance - station[now].distance) / davg;
		if (station[k].price &lt; station[now].price) {
			if (nowtank &lt; need) {
				expend += (need - nowtank) * station[now].price;
				nowtank = 0;
			}
			else {
				nowtank -= need;
			}
		}
		else {
			expend += (cmax - nowtank) * station[now].price;
			nowtank = cmax - need;
		}
		now = k;
	}
	if (now == n) printf(&quot;%.2f&quot;, expend);
	else printf(&quot;The maximum travel distance = %.2f&quot;, station[now].distance + canrun);
	return 0;
}
</code></pre>
<h3 id="a1034">A1034</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;map&gt;
#include&lt;string&gt;
using namespace std;
const int maxn = 2100;
map&lt;string, int&gt; stringtoint;
map&lt;int, string&gt; inttostring;
map&lt;string, int&gt; gang;
int G[maxn][maxn] = { 0 }, numperson = 0, weight[maxn] = { 0 }, k;
bool vis[maxn] = { false };
void DFS(int visnow, int&amp; head, int&amp; nummember, int&amp; totalvalue) {
	nummember++;
	vis[visnow] = true;
	if (weight[visnow] &gt; weight[head]) head = visnow;
	for (int i = 0; i &lt; numperson; i++) {
		if (G[visnow][i] &gt; 0) {
			totalvalue += G[visnow][i];
			G[visnow][i] = 0;
			G[i][visnow] = 0;
            if (vis[i] == false) {
			DFS(i, head, nummember, totalvalue);
	 	  }
		}	
	}
}
void DFStrave() {
	for (int i = 0; i &lt; numperson; i++) {
		if (vis[i] == false) {
			int head = i, nummember = 0, totalvalue = 0;
			DFS(i, head, nummember, totalvalue);
			if (totalvalue &gt; k &amp;&amp; nummember &gt; 2) {
				gang[inttostring[head]] = nummember;
			}
		}
	}
}
int change(string str) {
	if (stringtoint.count(str) == 0) {
		stringtoint[str] = numperson;
		inttostring[numperson] = str;
		return numperson++;
	}
	else {
		return stringtoint[str];
	}
}
int main() {
	int n, phonetime;
	string str1, str2;
	cin &gt;&gt; n &gt;&gt; k;
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; str1 &gt;&gt; str2 &gt;&gt; phonetime;
		int id1 = change(str1);
		int id2 = change(str2);
		weight[id1] += phonetime;
		weight[id2] += phonetime;
		G[id1][id2] += phonetime;
		G[id2][id1] += phonetime;
	}
	DFStrave();
	cout &lt;&lt; gang.size() &lt;&lt; endl;
	for (auto it = gang.begin();it!=gang.end();it++) {
		cout &lt;&lt; it-&gt;first &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;
	}
	return 0;
}
</code></pre>
<h3 id="a1035">A1035</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
struct node {
	char name[11];
	char password[11];
	bool flag;
}user[1010];
int main() {
	int n, change = 0;;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%s%s&quot;, user[i].name, user[i].password);
		user[i].flag = false;
		int len1 = strlen(user[i].password);
		for (int j = 0; j &lt; len1; j++) {
			if (user[i].password[j] == '1') {
				user[i].password[j] = '@';
				user[i].flag = true;
			}
			else if (user[i].password[j] == '0') {
				user[i].password[j] = '%';
				user[i].flag = true;
			}
			else if (user[i].password[j] == 'l') {
				user[i].password[j] = 'L';
				user[i].flag = true;
			}
			else if (user[i].password[j] == 'O') {
				user[i].password[j] = 'o';
				user[i].flag = true;
			}
		}
		if (user[i].flag == true) change++;
	}
	if (n == 1) printf(&quot;There is 1 account and no account is modified&quot;);
	else if (n &gt; 1 &amp;&amp; change == 0) printf(&quot;There are %d accounts and no account is modified&quot;, n);
	else if (n &gt; 1 &amp;&amp; change &gt; 0) {
		printf(&quot;%d\n&quot;, change);
		for (int i = 0; i &lt; n; i++) {
			if (user[i].flag == true) {
				printf(&quot;%s %s\n&quot;, user[i].name, user[i].password);
			}
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1036">A1036</h3>
<pre><code>#include&lt;cstdio&gt; 
#include&lt;algorithm&gt;
using namespace std;
struct student {
	char name[11];
	char gender;
	char id[11];
	int score;
}male,female,temp;
int main() {
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	female.score = -1;
	male.score = 101;
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%s %c %s %d&quot;, temp.name, &amp;temp.gender, temp.id, &amp;temp.score);
		if (temp.gender == 'F') {
			if (temp.score &gt; female.score) {
				female = temp;
			}
		}
		if (temp.gender == 'M') {
			if (temp.score &lt; male.score) {
				male = temp;
			}
		}
	}
	if (female.score == -1) printf(&quot;Absent\n&quot;);
	if (female.score &gt; -1) printf(&quot;%s %s\n&quot;, female.name, female.id);
	if (male.score == 101) printf(&quot;Absent\n&quot;);
	if (male.score &lt;101) printf(&quot;%s %s\n&quot;, male.name, male.id);
	if (female.score == -1 || male.score == 101) printf(&quot;NA&quot;);
	if (female.score &gt; -1 &amp;&amp; male.score &lt; 101) printf(&quot;%d&quot;, female.score - male.score);
	return 0;
}
</code></pre>
<h3 id="a1037">A1037</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 100010;
int main() {
	int coupon[maxn];
	int product[maxn];
	int n, m;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;coupon[i]);
	}
	scanf(&quot;%d&quot;, &amp;m);
	for (int i = 0; i &lt; m; i++) {
		scanf(&quot;%d&quot;, &amp;product[i]);
	}
	sort(coupon, coupon + n);
	sort(product, product + m);
	int j = 0, ans = 0;
	while (j &lt; n &amp;&amp; coupon[j] &lt; 0 &amp;&amp; product[j] &lt; 0 &amp;&amp; j &lt; m) {
		ans += coupon[j] * product[j];
		j++;
	}
	int k = n - 1, i = m - 1;
	while (k &gt;= 0 &amp;&amp; i &gt;= 0 &amp;&amp; coupon[k] &gt; 0 &amp;&amp; product[i] &gt; 0) {
		ans += coupon[k] * product[i];
		k--;
		i--;
	}
	printf(&quot;%d&quot;, ans);
	return 0;
}
</code></pre>
<h3 id="a1038">A1038</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 10010;
bool cmp(string a, string b) {
	return a + b &lt; b + a;
}
int main() {
	int n;
	string str[maxn];
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; str[i];
	}
	sort(str, str + n, cmp);
	string ans;
	for (int i = 0; i &lt; n; i++) {
		ans += str[i];
	}
	while (ans[0] == '0' &amp;&amp; ans.size() != 0) {
		ans.erase(ans.begin());
	}
	if (ans.length() != 0) cout &lt;&lt; ans;
	else cout &lt;&lt; &quot;0&quot;;
	return 0;
}
</code></pre>
<h3 id="a1039">A1039</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 26 * 26 * 26 * 10 + 10;
vector&lt;int&gt; stu[maxn];
int getid(char name[]) {
	int id=0;
	for (int i = 0; i &lt; 3; i++) 
		id = id * 26 + (name[i] - 'A');
	id = id * 10 + (name[3] - '0');
	return id;
}
int main() {
	int n, k, no, num;
	char name[5];
	scanf(&quot;%d%d&quot;, &amp;n, &amp;k);
	for (int i = 0; i &lt; k; i++) {
		scanf(&quot;%d%d&quot;, &amp;no, &amp;num);
		for (int j = 0; j &lt; num; j++) {
			scanf(&quot;%s&quot;, name);
			stu[getid(name)].push_back(no);
		}
	}
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%s&quot;, name);
		printf(&quot;%s &quot;, name);
		printf(&quot;%d&quot;, stu[getid(name)].size());
		sort(stu[getid(name)].begin(), stu[getid(name)].end());
		for (int j = 0; j &lt; stu[getid(name)].size(); j++) {
			printf(&quot; %d&quot;, stu[getid(name)][j]);
		}
		printf(&quot;\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1040">A1040</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;string&gt;
using namespace std;
const int maxn=1010;
string str;
int dp[maxn][maxn];
int main(){
	memset(dp,0,sizeof(dp));
	getline(cin,str);
	int ans=1,len=str.length();
	for(int i=0;i&lt;len;i++){
		dp[i][i]=1;
		if(i&lt;len-1){
			if(str[i]==str[i+1]){
				dp[i][i+1]=1;
				ans=2;
			}
		}
	}
	for(int L=3;L&lt;=len;L++){
		for(int i=0;i+L-1&lt;len;i++){
			int j=i+L-1;
			if(str[i]==str[j]&amp;&amp;dp[i+1][j-1]==1){
				dp[i][j]=1;
				ans=L;
			}
		}
	}
	printf(&quot;%d&quot;,ans);
	return 0;
}
</code></pre>
<h3 id="a1041">A1041</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 10010;
struct node {
	int choice;
	int num;
	int rank;
}bets[maxn];
bool cmp(node a, node b) {
	if (a.num != b.num) return a.num &lt; b.num;
	else return a.rank &lt; b.rank;
}
int main() {
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; maxn; i++) {
		bets[i].num = maxn;
		bets[i].rank = maxn;
	}
	for (int i = 0; i &lt; n; i++) {
		int choice;
		scanf(&quot;%d&quot;, &amp;choice);
		bets[choice].choice = choice;
		if (bets[choice].num == maxn) {
			bets[choice].num = 1;
		}
		else {
			bets[choice].num++;
		}
		if (bets[choice].rank == maxn) bets[choice].rank = i;
	}
	sort(bets, bets + maxn, cmp);
	if (bets[0].num == 1) printf(&quot;%d&quot;, bets[0].choice);
	else printf(&quot;None&quot;);
	return 0;
}
</code></pre>
<h3 id="a1042">A1042</h3>
<pre><code>#include&lt;cstdio&gt;
const int N = 55;
int main()
{
	char mp[5] = { 'S','H','C','D','J' };
	int start[N], next[N], end[N];
	int times;
	scanf(&quot;%d&quot;, &amp;times);
	for (int i = 1; i &lt;= 54; i++) {
		scanf(&quot;%d&quot;, &amp;next[i]);
	}
	for (int i = 1; i &lt;= 54; i++) {
		start[i] = i;
	}
	for (int step = 0; step &lt; times; step++) {
		for (int i = 1; i &lt;= 54; i++) {
			end[next[i]] = start[i];
		}
		for (int i = 1; i &lt;= 54; i++) {
			start[i] = end[i];
		}
	}
	for (int i = 1; i &lt;= 54; i++) {
		if (i != 1) printf(&quot; &quot;);
		start[i]--;
		printf(&quot;%c%d&quot;, mp[start[i] / 13], start[i] % 13+1);
	}
	return 0;
}
</code></pre>
<h3 id="a1043">A1043</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
struct node{
	int data;
	node* lchild;
	node* rchild;
};
void insert(node*&amp; root, int x) {
	if (root == NULL) {
		root = new node;
		root-&gt;data = x;
		root-&gt;lchild = NULL;
		root-&gt;rchild = NULL;
		return;
	}
	if (x &lt; root-&gt;data) insert(root-&gt;lchild, x);
	else insert(root-&gt;rchild, x);
}
void preorder(node* root, vector&lt;int&gt;&amp; vi) {
	if (root == NULL) return;
	vi.push_back(root-&gt;data);
	preorder(root-&gt;lchild,vi);
	preorder(root-&gt;rchild, vi);
}
void preMorder(node* root, vector&lt;int&gt;&amp; vi) {
	if (root == NULL) return;
	vi.push_back(root-&gt;data);
	preMorder(root-&gt;rchild, vi);
	preMorder(root-&gt;lchild, vi);
}
void postorder(node*root,vector&lt;int&gt;&amp; vi) {
	if (root == NULL) return;
	postorder(root-&gt;lchild,vi);
	postorder(root-&gt;rchild,vi);
	vi.push_back(root-&gt;data);
}
void postMorder(node* root, vector&lt;int&gt;&amp; vi) {
	if (root == NULL) return;
	postMorder(root-&gt;rchild,vi);
	postMorder(root-&gt;lchild,vi);
	vi.push_back(root-&gt;data);
}
int main() {
	vector&lt;int&gt;origin, pre, preM, post, postM;
	int n,temp;
	scanf(&quot;%d&quot;, &amp;n);
	node* root = NULL;
	for(int i=0;i&lt;n;i++) {
		scanf(&quot;%d&quot;, &amp;temp);
		origin.push_back(temp);
		insert(root, temp);
	}
	preorder(root, pre);
	preMorder(root, preM);
	postorder(root, post);
	postMorder(root, postM);
	if (origin == pre) {
		printf(&quot;YES\n&quot;);
		for (int i = 0; i &lt; post.size(); i++) {
			printf(&quot;%d&quot;, post[i]);
			if (i &lt; post.size() - 1) printf(&quot; &quot;);
		}
	}
	else if (origin == preM) {
		printf(&quot;YES\n&quot;);
		for (int i = 0; i &lt; postM.size(); i++) {
			printf(&quot;%d&quot;, postM[i]);
			if (i &lt; postM.size()-1) printf(&quot; &quot;);
		}
	}
	else  printf(&quot;NO\n&quot;);
	return 0;
}
</code></pre>
<h3 id="a1044">A1044</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 100010;
int near_m = 100000010;
int diamond[maxn];
int sum[maxn];
int main() {
	int n, m;
	sum[0] = 0;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i = 1; i &lt;= n; i++) {
		scanf(&quot;%d&quot;, &amp;diamond[i]);
		sum[i] = sum[i-1]+diamond[i];
	}
	for (int i = 1; i &lt;= n; i++) {
		int j = upper_bound(sum+i, sum+n + 1, sum[i - 1] + m)-sum;
		if (sum[j - 1] - sum[i - 1] == m) {
			near_m = m;
			break; 
		}
		else if (sum[j] - sum[i - 1] &lt; near_m) {
			near_m = sum[j] - sum[i - 1];
		}
	}
	for (int i = 1; i &lt;= n; i++) {
		int j= upper_bound(sum+i, sum+n + 1, sum[i-1]+near_m)-sum;
		if ( sum[j - 1] - sum[i - 1]==near_m) {
			printf(&quot;%d-%d\n&quot;, i, j - 1);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1045">A1045</h3>
<pre><code>方法一:最长不下降子序列LIS
#include&lt;cstdio&gt; 
#include&lt;algorithm&gt;
using namespace std;
const int maxn=10010;
int hashtable[maxn],a[maxn],dp[maxn];
int main(){
	int num=0,ans=-1,n,m,L,temp;
	scanf(&quot;%d&quot;,&amp;n);
	scanf(&quot;%d&quot;,&amp;m);
	fill(hashtable,hashtable+maxn,-1);
	for(int i=0;i&lt;m;i++){
		scanf(&quot;%d&quot;,&amp;temp);
		hashtable[temp]=i;
	}
	scanf(&quot;%d&quot;,&amp;L);
	for(int i=0;i&lt;L;i++){
		scanf(&quot;%d&quot;,&amp;temp);
		if(hashtable[temp]&gt;=0){
			a[num++]=hashtable[temp];
		}
	}
	for(int i=0;i&lt;num;i++){
		dp[i]=1;
		for(int j=0;j&lt;i;j++){
			if(a[i]&gt;=a[j]&amp;&amp;dp[j]+1&gt;dp[i]){
				dp[i]=dp[j]+1;
			}
		}
		ans=max(ans,dp[i]);
	}
	printf(&quot;%d&quot;,ans);
	return 0;
}
方法二:最长公共子序列
#include&lt;cstdio&gt; 
#include&lt;algorithm&gt;
using namespace std;
const int maxn=10010;
int a[maxn],b[maxn],dp[maxn][maxn];
int main(){
	int n,m,L;
	scanf(&quot;%d&quot;,&amp;n);
	scanf(&quot;%d&quot;,&amp;m);
    for(int i=1;i&lt;=m;i++) scanf(&quot;%d&quot;,&amp;a[i]);
    scanf(&quot;%d&quot;,&amp;L);
    for(int i=1;i&lt;=L;i++) scanf(&quot;%d&quot;,&amp;b[i]);
    for(int i=0;i&lt;m;i++) dp[i][0]=0;
    for(int i=0;i&lt;L;i++) dp[0][i]=0;
    for(int i=1;i&lt;=m;i++){
    	for(int j=1;j&lt;=L;j++){
    		int maxone=max(dp[i-1][j],dp[i][j-1]);
    		if(a[i]==b[j]) dp[i][j]=maxone+1;
    		else dp[i][j]=maxone;
		}
	}
	printf(&quot;%d&quot;,dp[m][L]);
	return 0;
}
</code></pre>
<h3 id="a1046">A1046</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 100010;
int dis[maxn], A[maxn];
int main() {
	int n,times,left,right,sum=0;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 1; i &lt;= n; i++) {
		scanf(&quot;%d&quot;, &amp;A[i]);
		sum += A[i];
        dis[i] = sum;
	}
	scanf(&quot;%d&quot;, &amp;times);
	for (int i = 0; i &lt; times; i++) {
		scanf(&quot;%d%d&quot;, &amp;left, &amp;right);
		if (left &gt; right)  swap(left, right);
		int distance = dis[right - 1] - dis[left - 1];
			printf(&quot;%d\n&quot;, min(distance,sum-distance));
	}
	return 0;
}
</code></pre>
<h3 id="a1047">A1047</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
using namespace std;
vector&lt;int&gt; course[2510];
char stu[40010][5];
bool cmp(int a, int  b) {  return strcmp(stu[a], stu[b]) &lt; 0; }
int main() {
	int n,k,m;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;k);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%s&quot;, stu[i]);
		scanf(&quot;%d&quot;, &amp;m);
		for (int j = 0; j &lt; m; j++) {
			int id;
			scanf(&quot;%d&quot;,&amp;id);
			course[id].push_back(i);
		}	
	}
	for (int i = 1; i &lt;= k; i++) {
		printf(&quot;%d %d\n&quot;, i, course[i].size());
		sort(course[i].begin(), course[i].end(), cmp);
		for (int j = 0; j &lt; course[i].size(); j++) {
			printf(&quot;%s\n&quot;, stu[course[i][j]]);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1048">A1048</h3>
<pre><code>1.哈希散列解法
#include&lt;cstdio&gt;
const int maxn = 1010;
int hashtable[maxn] = { 0 };
int main() {
	int n, m;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i = 0; i &lt; n; i++) {
		int num;
		scanf(&quot;%d&quot;, &amp;num);
		hashtable[num]++;
	}
	for (int i = 1; i &lt; m; i++) {
		if (hashtable[i] &gt; 0 &amp;&amp; hashtable[m - i] &gt; 0) {
			if ((i == m - i &amp;&amp; hashtable[i] &gt; 1) || i != m - i) {
				printf(&quot;%d %d&quot;, i, m - i);
				return 0;
			}
		}
	}
	printf(&quot;No Solution&quot;);
	return 0;
}


2.二分法解法
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 100010;
int main() {
	int n, m;
	int num[maxn];
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;num[i]);
	}
	sort(num, num + n);
	int j,i;
	for ( i = 0; i &lt; n; i++) {
		 j = lower_bound(num + i, num +n, m - num[i]) - num;
		if ( (num[j] + num[i] == m&amp;&amp;j!=i)||(num[i]==num[i+1]&amp;&amp;num[i]*2==m)) {
			printf(&quot;%d %d&quot;, num[i], num[j]);
			break;
		}
	}
	if (i &gt;= n) printf(&quot;No Solution&quot;);
	return 0;
}

3.two points
#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 100010;
int main() {
	int n, m;
	int a[maxn];
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;a[i]);
	}
	sort(a, a + n);
	int j=n-1,i=0;
    while(i&lt;j){
        if(a[i]+a[j]==m){
            printf(&quot;%d %d&quot;,a[i],a[j]);
            return 0;
        }
        else if(a[i]+a[j]&gt;m) j--;
        else i++;
    }
	printf(&quot;No Solution&quot;);
	return 0;
}
</code></pre>
<h3 id="a1049">A1049</h3>
<pre><code>#include &lt;iostream&gt;
#include&lt;cmath&gt;
using namespace std;
int main() {
	int n,ans=0,a=1,index=0;
	cin &gt;&gt; n;
	int left, now, right;
	while (n / a != 0) {
		left = n / (a * 10);
		right = n % a;
		now = n/a%10;
		if (now == 0) ans += left * pow(10, index++);
		else if(now == 1) ans += left * pow(10, index++) + 1+right;
		else ans += (left + 1) * pow(10, index++);
		a *= 10;
	}
	cout &lt;&lt; ans;
	return 0;
}
</code></pre>
<h3 id="a1050">A1050</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
int main() {
	bool hashtable[128] = { false };
	string s1, s2;
	getline(cin, s1);
	getline(cin, s2);
	int len1 = s1.length();
	int len2 = s2.length();
	for (int i = 0; i &lt; len2; i++) {
		hashtable[s2[i]] = true;
	}
	string ans;
	for (int i = 0; i &lt; len1; i++) {
		if (hashtable[s1[i]] == false) {
			ans += s1[i];
		}
	}
	cout &lt;&lt; ans;
	return 0;
}
</code></pre>
<h3 id="a1051-栈">A1051 栈</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;stack&gt;
using namespace std;
const int maxn = 1010;
int out[maxn];
stack&lt;int&gt; st;
int main() {
	int m, n, k;
	scanf(&quot;%d%d%d&quot;, &amp;m, &amp;n, &amp;k);
	while (k--) {
		while (!st.empty()) {
			st.pop();
		}
		bool flag=true;
		for (int i = 1; i &lt;= n; i++) {
			scanf(&quot;%d&quot;, &amp;out[i]);
		}
		int current = 1;
		for (int i = 1; i &lt;= n; i++) {
			st.push(i);
			if (st.size() &gt; m) {
				flag = false;
				break;
			}
			while(!st.empty()&amp;&amp;st.top() == out[current]) {
					st.pop();
					current++;
			}
		}
		if (st.empty()&amp;&amp; flag == true) printf(&quot;YES\n&quot;);
		else printf(&quot;NO\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1052链表">A1052(链表)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=100010;
struct Node{
	int address,data,next;
	bool flag;
}node[maxn];
bool cmp(Node a,Node b){
	if(a.flag==false||b.flag==false) return a.flag&gt;b.flag;
	else return a.data&lt;b.data;
}
int main(){
	int n,begin;
	scanf(&quot;%d%d&quot;,&amp;n,&amp;begin);
	for(int i=0;i&lt;maxn;i++){
		node[i].flag=false;
	}
	int address1,data1,next1;
	for(int i=0;i&lt;n;i++){
		scanf(&quot;%d%d%d&quot;,&amp;address1,&amp;data1,&amp;next1);
		node[address1].address=address1;
		node[address1].data=data1;
		node[address1].next=next1;
	}
	int p=begin,count=0;
	while(p!=-1){
		node[p].flag=true;
		count++;
		p=node[p].next;
	}
	sort(node,node+maxn,cmp);
	if(count==0) printf(&quot;0 -1&quot;);
	else{
		printf(&quot;%d %05d\n&quot;,count,node[0].address);
		for(int i=0;i&lt;count-1;i++){
			printf(&quot;%05d %d %05d\n&quot;,node[i].address,node[i].data,node[i+1].address);
		}
		printf(&quot;%05d %d -1&quot;,node[count-1].address,node[count-1].data);
	}
	return 0;	
}
</code></pre>
<h3 id="a1053">A1053</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 110;
int n, m, s;
int path[maxn];
struct node {
	int weight;
	vector&lt;int&gt; child;
}Node[maxn];
bool cmp(int a, int b) {
	return Node[a].weight &gt; Node[b].weight;
}
void DFS(int index, int nodenum, int sum) {
	if (sum &gt; s) return;
	if (sum == s) {
		if (Node[index].child.size() != 0) return;
        for (int i = 0; i &lt; nodenum; i++) {
		     printf(&quot;%d&quot;,Node[path[i]].weight);
			 if (i &lt; nodenum - 1) printf(&quot; &quot;);
			 else printf(&quot;\n&quot;);
		}
	}
	for (int i = 0; i &lt; Node[index].child.size(); i++) {
		path[nodenum] = Node[index].child[i];
		DFS(Node[index].child[i], nodenum + 1, sum + Node[Node[index].child[i]].weight);
	}
}
int main() {
	scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;s);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;Node[i].weight);
	}
	int father,k, temp;
	while (m--) {
		scanf(&quot;%d%d&quot;, &amp;father,&amp;k);
		while (k--) {
			scanf(&quot;%d&quot;, &amp;temp);
			Node[father].child.push_back(temp);
		}
		sort(Node[father].child.begin(), Node[father].child.end(), cmp);
	}
	path[0] = 0;
	DFS(0, 1, Node[0].weight);
	return 0;
}
</code></pre>
<h3 id="a1054">A1054</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;map&gt;
using namespace std;
map&lt;int, int&gt; colors;
int main() {
	int m, n,temp;
    scanf(&quot;%d%d&quot;,&amp;m,&amp;n);
	for (int i = 0; i &lt; n; i++) {
		for (int j = 0; j &lt; m; j++) {
            int temp;
            scanf(&quot;%d&quot;,&amp;temp);
			if (colors.count(temp) == 0) colors[temp] = 1;
			else colors[temp]++;
		}
	}
	int ans, maxn=0;
	for (auto it = colors.begin(); it != colors.end(); it++) {
		if (it-&gt;second &gt; maxn) {
			ans = it -&gt;first;
			maxn = it-&gt; second;
		}
	}
    printf(&quot;%d&quot;,ans);
	return 0;
}
</code></pre>
<h3 id="a1055">A1055</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
#include&lt;vector&gt;
using namespace std;
struct node{
	char name[10];
	int age,money;
}; 
bool cmp(node a,node b){
	if(a.money!=b.money) return a.money&gt;b.money;
	else if(a.age!=b.age) return a.age&lt;b.age;
	else return strcmp(a.name,b.name)&lt;0;
}
int main(){
	int n,m;
	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
	vector&lt;node&gt; total(n),elect;
	vector&lt;int&gt; mark(210,0);
	for(int i=0;i&lt;n;i++) scanf(&quot;%s%d%d&quot;,total[i].name,&amp;total[i].age,&amp;total[i].money);
	sort(total.begin(),total.end(),cmp);
	for(int i=0;i&lt;n;i++){
		if(mark[total[i].age]&lt;=100){
			mark[total[i].age]++;
			elect.push_back(total[i]);
		}
	}
	int query,minage,maxage;
	for(int i=0;i&lt;m;i++){
		scanf(&quot;%d%d%d&quot;,&amp;query,&amp;minage,&amp;maxage);
		vector&lt;node&gt; t;
		for(int j=0;j&lt;elect.size();j++){
			if(elect[j].age&lt;=maxage&amp;&amp;elect[j].age&gt;=minage)
				t.push_back(elect[j]);
		}
		printf(&quot;Case #%d:\n&quot;,i+1);
		int needprintf=0;
		for(int k=0;k&lt;query&amp;&amp;k&lt;t.size();k++){
			needprintf++;
		    printf(&quot;%s %d %d\n&quot;,t[k].name,t[k].age,t[k].money);
		}
		if(needprintf==0) printf(&quot;None\n&quot;);
	} 
	return 0;
}
</code></pre>
<h3 id="a1056队列">A1056(队列)</h3>
<pre><code>#include&lt;queue&gt;
#include&lt;cstdio&gt;
using namespace std;
const int maxn = 1010;
struct node{
	int rank;
	int weight;
}mouse[maxn];
int main() {
    queue&lt;int&gt; q;
	int np, ng, order;
	scanf(&quot;%d%d&quot;, &amp;np, &amp;ng);
	for (int i = 0; i &lt; np; i++) {
		scanf(&quot;%d&quot;, &amp;mouse[i].weight);
	}
    int t=np;
	while(t--){
		scanf(&quot;%d&quot;, &amp;order);
		q.push(order);
	}
	int temp = np, group;
	while (q.size() != 1) {
		if (temp % ng == 0) group = temp / ng;
		else group = temp / ng + 1;
		for (int i = 0; i &lt; group; i++) {
			int k = q.front();
			for (int j = 0; j &lt; ng; j++) {
				if (i * ng + j &gt;= temp) break;
				int front = q.front();
				if (mouse[front].weight &gt; mouse[k].weight) {
					k = front;
				}
				mouse[front].rank = group + 1;
				q.pop();
			}
			q.push(k);
		}
		temp = group;
	}
	mouse[q.front()].rank = 1;
	for (int i = 0; i &lt; np; i++) {
		printf(&quot;%d&quot;, mouse[i].rank);
		if (i &lt; np - 1) printf(&quot; &quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a105730-分块-树状数组">A1057(30 分块、树状数组)</h3>
<pre><code>1.分块
#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;stack&gt;
using namespace std;
int table[100010],block[317];
stack&lt;int&gt; st;
void Peekmedian(int x) {
	int sum = 0, block_id = 0;
	while (sum + block[block_id] &lt; x) {
		sum += block[block_id++];
	}
	int num = block_id * 316;
	while (sum + table[num] &lt; x) sum+=table[num++];
	printf(&quot;%d\n&quot;, num);
}
void Push(int x) {
	st.push(x);
	table[x]++;
	block[x / 316]++;
}
void Pop() {
	int top = st.top();
	st.pop();
	table[top]--;
	block[top / 316]--;
	printf(&quot;%d\n&quot;, top);
}
int main() {
	int n, temp;
	char cmd[15];
	scanf(&quot;%d&quot;, &amp;n);
	memset(table, 0, sizeof(table));
	memset(block, 0, sizeof(block));
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%s&quot;, cmd);
		if (strcmp(cmd, &quot;Pop&quot;)==0) {
			if (st.empty()) printf(&quot;Invalid\n&quot;);
			else Pop();
		}
		else if (strcmp(cmd, &quot;Push&quot;)==0) {
			scanf(&quot;%d&quot;, &amp;temp);
			Push(temp);
		}
		else {
			if (st.empty()) printf(&quot;Invalid\n&quot;);
			else {
				int k = st.size();
				if (k % 2 == 0) k = k / 2;
				else k = k / 2 + 1;
				Peekmedian(k);
			}
		}
	}
	return 0;
}
2.树状数组

</code></pre>
<h3 id="a1058">A1058</h3>
<pre><code>#include&lt;cstdio&gt;
int main() {
	int sum[3], m1[3], m2[3];
	int  temp_sick, temp_knut;
	scanf(&quot;%d.%d.%d&quot;, &amp;m1[0], &amp;m1[1], &amp;m1[2]);
	scanf(&quot;%d.%d.%d&quot;, &amp;m2[0], &amp;m2[1], &amp;m2[2]);
	sum[2] = (m1[2] + m2[2]) % 29;
	temp_knut = (m1[2] + m2[2])/ 29;
	sum[1] = (m1[1] + m2[1] + temp_knut)%17;
	temp_sick = (m1[1] + m2[1] + temp_knut) / 17;
	sum[0] = m1[0] + m2[0] + temp_sick;
	printf(&quot;%d.%d.%d&quot;, sum[0], sum[1], sum[2]);
	return 0;
}
</code></pre>
<h3 id="a1059">A1059</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cmath&gt;
const int maxn = 100010;
bool isprime(int n) {
	if (n &lt;= 1) return false;
	int sqr = sqrt(1.0 * n);
	for (int i = 2; i &lt;= sqr; i++) {
		if (n % i == 0) return false;
	}
	return true;
}
int prime[maxn], pnum=0;
void find_prime() {
	for (int i = 1; i &lt; maxn; i++) {
		if (isprime(i)) {
			prime[pnum++] = i;
		}
	}
}
struct factor {
	int x, exp;
}fac[10];
int main() {
	find_prime();
	int n,num=0;
	scanf(&quot;%d&quot;, &amp;n);
	int sqr = (int)sqrt(1.0 * n);
	if (n == 1) printf(&quot;1=1&quot;);
	else {
		printf(&quot;%d=&quot;, n);
		for (int i = 0; i &lt; pnum &amp;&amp; prime[i] &lt;= sqr; i++) {
			if (n % prime[i] == 0) {
				fac[num].x = prime[i];
				fac[num].exp = 0;
				while (n % prime[i] == 0) {
					fac[num].exp++;
					n /= prime[i];
				}
				num++;
			}
			if (n == 1) break;
		}
		if (n != 1) {
			fac[num].x = n;
			fac[num++].exp = 1;
		}
		for (int i = 0; i &lt; num; i++) {
			if (i &gt; 0) printf(&quot;*&quot;);
			printf(&quot;%d&quot;, fac[i].x);
			if (fac[i].exp &gt; 1) printf(&quot;^%d&quot;, fac[i].exp);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1060">A1060</h3>
<pre><code>#include&lt;iostream&gt; 
#include&lt;string&gt;
using namespace std;
int n;
string deal(string s, int&amp; e) {
	int k = 0;
	
	while (s.length() &gt; 0 &amp;&amp; s[0] == '0') {
		s.erase(s.begin());
	}
	if (s[0] == '.') {
		s.erase(s.begin());
		while (s.length() &gt; 0 &amp;&amp; s[0] == '0') {
			s.erase(s.begin());
			e--;
		}
	}
	else {
		while (s.length() &gt; k &amp;&amp; s[k] != '.') {
			e++;
			k++;
		}
		if(k&lt;s.length()) s.erase(s.begin() + k);
	}
	if (s.length() == 0) e = 0;
    string ans;
    k=0;
    int num=0;
    while(num&lt;n){
        if(k&lt;s.length()) ans+=s[k++];
        else ans+='0';
        num++;
    }
	return ans;
}
int main() {
	string s1, s2, ans1, ans2;
	int e1=0, e2=0;
	cin &gt;&gt; n &gt;&gt; s1 &gt;&gt; s2;
	ans1 = deal(s1, e1);
	ans2 = deal(s2, e2);
	if (ans1 == ans2 &amp;&amp; e1 == e2)
		cout &lt;&lt; &quot;YES &quot; &lt;&lt; &quot;0.&quot; &lt;&lt; ans1 &lt;&lt; &quot;*10^&quot; &lt;&lt; e1;
	else
		cout &lt;&lt; &quot;NO &quot; &lt;&lt; &quot;0.&quot; &lt;&lt; ans1 &lt;&lt; &quot;*10^&quot; &lt;&lt; e1 &lt;&lt; &quot; &quot; &lt;&lt; &quot;0.&quot; &lt;&lt; ans2 &lt;&lt; &quot;*10^&quot; &lt;&lt; e2;
	return 0;
}
</code></pre>
<h3 id="a1061">A1061</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;string&gt;
#include&lt;cstring&gt;
using namespace std;
int main() {
	char s1[70], s2[70], s3[70], s4[70];
	string days[7] = { &quot;MON&quot;,&quot;TUE&quot;,&quot;WED&quot;,&quot;THU&quot;,&quot;FRI&quot;,&quot;SAT&quot;,&quot;SUN&quot; };
	scanf(&quot;%s%s%s%s&quot;, s1, s2, s3, s4);
	int len1 = strlen(s1);
	int len2 = strlen(s2);
	int len3 = strlen(s3);
	int len4 = strlen(s4);
	int i;
	for (i = 0; i &lt; len1 &amp;&amp; i &lt; len2; i++) {
		if (s1[i] == s2[i] &amp;&amp; s1[i] &gt;= 'A' &amp;&amp; s1[i] &lt;= 'G') {
			printf(&quot;%s &quot;, days[s1[i] - 'A'].c_str());
			break;
		}
	}
	for (i++; i &lt; len2 &amp;&amp; i &lt; len1; i++) {
		if (s1[i] == s2[i]) {
			if (s1[i] &gt;= '0' &amp;&amp; s1[i] &lt;= '9') {
				printf(&quot;%02d:&quot;, s1[i] - '0');
				break;
			}
			else if (s1[i] &gt;= 'A' &amp;&amp; s1[i] &lt;= 'N') {
				printf(&quot;%02d:&quot;, s1[i] - 'A' + 10);
				break;
			}
		}
	}
	for (int j = 0; j &lt; len3 &amp;&amp; j &lt; len4; j++) {
		if (s3[j] == s4[j]) {
			if ((s3[j] &gt;= 'a' &amp;&amp; s3[j] &lt;= 'z') || (s3[j] &gt;= 'A' &amp;&amp; s3[j] &lt;= 'Z')) {
				printf(&quot;%02d&quot;, j);
				break;
			}
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1062">A1062</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
struct test {
	char id[20];
	int de, cai, sum;
	int flag;
}student[100010];
bool cmp(test a, test b) {
	if (a.flag != b.flag) return a.flag &lt; b.flag;
	else if (a.sum != b.sum) return a.sum &gt; b.sum;
	else if (a.de != b.de) return a.de &gt; b.de;
	else return strcmp(a.id, b.id) &lt; 0;
}
int main() {
	int total, low, high;
	scanf(&quot;%d%d%d&quot;, &amp;total, &amp;low, &amp;high);
	int pass = total;
	for (int i = 0; i &lt; total; i++) {
		scanf(&quot;%s%d%d&quot;, student[i].id, &amp;student[i].de, &amp;student[i].cai);
		student[i].sum = student[i].de + student[i].cai;
		if (student[i].de &lt; low || student[i].cai &lt; low) {
			student[i].flag = 5;
			pass--;
		}
		else if (student[i].cai &gt;= high &amp;&amp; student[i].de &gt;= high) student[i].flag = 1;
		else if (student[i].cai &gt;= low &amp;&amp; student[i].cai &lt; high &amp;&amp; student[i].de &gt;= high) student[i].flag = 2;
		else if (student[i].cai &gt;= low &amp;&amp; student[i].cai &lt;= student[i].de &amp;&amp; student[i].de&lt;high) student[i].flag = 3;
		else  student[i].flag = 4;
	}
	sort(student, student + total, cmp);
	printf(&quot;%d\n&quot;, pass);
	for (int i = 0; i &lt; pass; i++) {
		printf(&quot;%s %d %d\n&quot;, student[i].id, student[i].de, student[i].cai);
	}
	return 0;
}
</code></pre>
<h3 id="a1063">A1063</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;set&gt;
using namespace std;
const int maxn = 51;
set&lt;int&gt; v[maxn];
int main() {
	int n,m,temp,k;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;m);
		for (int j = 0; j &lt; m; j++) {
			scanf(&quot;%d&quot;, &amp;temp);
			v[i].insert(temp);
		}
	}
	int a, b;
	scanf(&quot;%d&quot;, &amp;k);
	for (int i = 0; i &lt; k; i++) {
		scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
		int nc=0, nt=v[b-1].size();
		for (auto it = v[a - 1].begin(); it != v[a - 1].end(); it++) {
			if (v[b - 1].find(*it) != v[b - 1].end())  nc++;
			else nt++;
		}
		printf(&quot;%.1f%%\n&quot;, (nc * 100.0) / nt);
	}
}
</code></pre>
<h3 id="a1064">A1064</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 1010;
int CBT[maxn],index=0,number[maxn],n;
void inorder(int root) {
	if (root &gt; n) return;
	inorder(root * 2);
	CBT[root] = number[index++];
	inorder(root * 2 + 1);
}
int main() {
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;number[i]);
	}
	sort(number, number + n);
	inorder(1);
	for (int i = 1; i &lt;= n; i++) {
		printf(&quot;%d&quot;, CBT[i]);
		if (i &lt; n) printf(&quot; &quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1065">A1065</h3>
<pre><code>#include&lt;cstdio&gt;
int main() {
	long long a, b, c;
	int n,times=1;
	scanf(&quot;%d&quot;, &amp;n);
	while (n--) {
		scanf(&quot;%lld%lld%lld&quot;, &amp;a, &amp;b, &amp;c);
		bool flag;
		long long sum = a + b;
		if (a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; sum &lt; 0)
			flag = true;
		else if (a &lt; 0 &amp;&amp; b &lt; 0 &amp;&amp; sum &gt;= 0)
			flag = false;
		else if (sum &gt; c)
			flag = true;
		else flag = false;
		if (flag == true)
			printf(&quot;Case #%d:true&quot;, times++);
		if (flag == false)
			printf(&quot;Case #%d:false&quot;, times++);
	}
	return 0;
}
</code></pre>
<h3 id="a1066">A1066</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node {
	int v, height;
	node* lchild, *rchild;
};
node* newNode(int v) {
	node* Node = new node;
	Node-&gt;v = v;
	Node-&gt;height = 1;
	Node-&gt;lchild = Node-&gt;rchild = NULL;
	return Node;
}
int getheight(node* root) {
	if (root == NULL) return 0;
	return root-&gt;height;
}
void updateheight(node* root) {
	root-&gt;height = max(getheight(root-&gt;lchild), getheight(root-&gt;rchild)) + 1;
}
int getbalancefactor(node* root) {
	return getheight(root-&gt;lchild) - getheight(root-&gt;rchild);
}
void L(node*&amp; root) {
	node* temp = root-&gt;rchild;
	root-&gt;rchild = temp-&gt;lchild;
	temp-&gt;lchild = root;
	updateheight(root);
	updateheight(temp);
	root = temp;
}
void R(node*&amp; root) {
	node* temp = root-&gt;lchild;
	root-&gt;lchild = temp-&gt;rchild;
	temp-&gt;rchild = root;
	updateheight(root);
	updateheight(temp);
	root = temp;
}
void insert(node*&amp; root, int v) {
	if (root == NULL) {
		root = newNode(v);
		return ;
	}
	if (v &lt; root-&gt;v) {
		insert(root-&gt;lchild, v);
		updateheight(root);
		if (getbalancefactor(root) == 2) {
			if (getbalancefactor(root-&gt;lchild) == 1) {
				R(root);
			}
			else if (getbalancefactor(root-&gt;lchild) == -1) {
				L(root-&gt;lchild);
				R(root);
			}
		}
	}
	else {
		insert(root-&gt;rchild,v);
		updateheight(root);
		if (getbalancefactor(root) == -2) {
			if (getbalancefactor(root-&gt;rchild) == -1) {
				L(root);
			}
			else if (getbalancefactor(root-&gt;rchild) == 1) {
				R(root-&gt;rchild);
				L(root);
			}
		}
	}
}
int main() {
	int n, v;
	scanf(&quot;%d&quot;, &amp;n);
	node* root =NULL;
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;v);
		insert(root, v);
	}
	printf(&quot;%d&quot;, root-&gt;v);
	return 0;
}
</code></pre>
<h3 id="a1067">A1067</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 100010;
int main() {
	int n,p[maxn],ans=0;
	scanf(&quot;%d&quot;, &amp;n);
	int left = n - 1;
	for (int i = 0; i &lt; n; i++) {
		int num;
		scanf(&quot;%d&quot;, &amp;num);
		p[num] = i;
		if(num != 0 &amp;&amp; p[num] == num) {
			left--;
		}
	}
	int k = 1;
	while (left &gt; 0) {
		if (p[0] == 0) {
			while (k&lt;n) {
				if (p[k] != k) {
					swap(p[0], p[k]);
					ans++;
					break;
				}
				k++;
			}
		}
		while(p[0]!=0) {
			swap(p[p[0]], p[0]);
			ans++;
			left--;
		}
	}
	printf(&quot;%d&quot;, ans);
	return 0;
}
</code></pre>
<h3 id="a1068">A1068</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=10010;
const int maxv=110;
int dp[maxv]={0},w[maxn];
bool choice[maxn][maxv],flag[maxn];
bool cmp(int a,int b){
	return a&gt;b;
}
int main(){
	int n,m;
	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
	for(int i=1;i&lt;=n;i++){
		scanf(&quot;%d&quot;,&amp;w[i]);
	}
	sort(w+1,w+1+n,cmp);
	for(int i=1;i&lt;=n;i++){
		for(int v=m;v&gt;=w[i];v--){
			if(dp[v]&lt;=dp[v-w[i]]+w[i]){
				dp[v]=dp[v-w[i]]+w[i];
				choice[i][v]=1;
			}else{
				choice[i][v]=0;
			}
		}
	}
	if(dp[m]!=m) printf(&quot;No Solution&quot;);
	else{
		int k=n,num=0,v=m;
		while(k&gt;=0){
			if(choice[k][v]==1){
				flag[k]=true;
				v-=w[k];
				num++;
			}else flag[k]=false;
			k--;
		}
		for(int i=n;i&gt;0;i--){
			if(flag[i]==true){
				printf(&quot;%d&quot;,w[i]);
				num--;
				if(num&gt;0) printf(&quot; &quot;);
			}
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1069">A1069</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;string&gt;
using namespace std;
bool cmp(int a, int b) {
	return a &gt; b;
}
int a[4];
int to_number(int a[]) {
	int res = a[0] * 1000 + a[1] * 100 + a[2] * 10 + a[3] * 1;
	return res;
}
void to_arry(int num) {
	for (int j = 0; j &lt; 4; j++) {
		a[j] = num % 10;
		num = num / 10;
	}
}
int main() {
	int big, small, ans;
	scanf(&quot;%d&quot;, &amp;ans);
	do {
		to_arry(ans);
		sort(a, a + 4);
		small = to_number(a);
		sort(a, a + 4, cmp);
		big = to_number(a);
		ans = big - small;
		printf(&quot;%04d - %04d = %04d\n&quot;, big, small, ans);
		
	} while (ans &gt; 0 &amp;&amp; ans != 6174);
	return 0;
}
</code></pre>
<h3 id="a1070">A1070</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node {
	double price;
	double stock;
}mooncake[1001];
bool cmp(node a, node b) {
	return a.price/a.stock &gt; b.price/b.stock;
}
int main() {
	int n, d;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;d);
	for (int i = 0; i &lt; n; i++) {
		double stock;
		scanf(&quot;%lf&quot;, &amp;stock);
		mooncake[i].stock = stock;
	}
	for (int i = 0; i &lt; n; i++) {
		double price;
		scanf(&quot;%lf&quot;, &amp;price);
		mooncake[i].price = price;
	}
	sort(mooncake, mooncake + n, cmp);
	double nowneed = (double)d;
	double income = 0.0;
	for (int i = 0; i &lt; n; i++) {
		if (mooncake[i].stock &gt;= nowneed) {
			income =income+(mooncake[i].price/mooncake[i].stock)*nowneed;
			nowneed = 0;
			break;
		}
		else {
			nowneed -= mooncake[i].stock;
			income += mooncake[i].price;
		}
	}
	printf(&quot;%.2f&quot;, income);
	return 0;
}
</code></pre>
<h3 id="a1071">A1071</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;map&gt;
#include&lt;string&gt;
using namespace std;
bool check(char a) {
	if (a &gt;= '0' &amp;&amp; a &lt;= '9') return true;
	if (a &gt;= 'a' &amp;&amp; a &lt;= 'z') return true;
	if (a &gt;= 'A' &amp;&amp; a &lt;= 'Z') return true;
	return false;
}
map&lt;string, int&gt; text;
int main() {
	string str;
	getline(cin, str);
	int len = str.size();
	int i = 0;
	string ans,result;
	while (i &lt; len) {
		if (check(str[i])) {
			if (str[i] &gt;= 'A' &amp;&amp; str[i] &lt;= 'Z') {
				str[i] += 32;
			}
			ans += str[i];
			if (check(str[i + 1]) == false || i + 1 == len) {
				if (text.count(ans) == 0) text[ans] = 1;
				else text[ans]++;
				ans.clear();
			}
		}
		i++;
	}
	int maxtimes = 0;
	for (auto it = text.begin(); it != text.end(); it++) {
		if (it-&gt;second &gt; maxtimes) {
			result = it-&gt;first;
			maxtimes = it-&gt;second;
		}
	}
	cout &lt;&lt; result &lt;&lt; &quot; &quot; &lt;&lt; maxtimes;
	return 0;
}
</code></pre>
<h3 id="a1072">A1072</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;
const int maxn=1016;
const int INF=1000000000;
bool vis[maxn]={false};
int n,m,k,ds,G[maxn][maxn],d[maxn];
void dijkst(int s){
	fill(d,d+maxn,INF);
	fill(vis,vis+maxn,false);
	d[s]=0;
    for(int i=1;i&lt;=n+m;i++){
    	int u=-1,MIN=INF;
    	for(int j=1;j&lt;=n+m;j++){
    		if(vis[j]==false&amp;&amp;d[j]&lt;MIN){
    			u=j;
			    MIN=d[u];
			}
		}
		if(u==-1) return;
		vis[u]=true;
		for(int v=1;v&lt;=n+m;v++){
			if(vis[v]==false&amp;&amp;G[u][v]!=INF){
				if(d[v]&gt;d[u]+G[u][v]){
					d[v]=d[u]+G[u][v];
				}
			}
		}
	}	
}
int getid(char str[]){
	int i=0,len=strlen(str),id=0;
	while(i&lt;len){
		if(str[i]!='G'){
			id=id*10+(str[i]-'0');
		}
		i++;
	}
	if(str[0]=='G') return id+n;
	else return id;
}
int main(){
	scanf(&quot;%d%d%d%d&quot;,&amp;n,&amp;m,&amp;k,&amp;ds);
	fill(G[0],G[0]+maxn*maxn,INF);
	for(int i=0;i&lt;k;i++){
		char str1[6],str2[6];
		int distance,id1,id2;;
		scanf(&quot;%s %s %d&quot;,str1,str2,&amp;distance);
		id1=getid(str1);
		id2=getid(str2);
		G[id1][id2]=distance;
		G[id2][id1]=G[id1][id2];
	}
	double ansavg=INF,ansdis=-1;
	vector&lt;int&gt; ansid;
	for(int i=n+1;i&lt;=n+m;i++){
		dijkst(i);
		double mindis=INF,avgdis=0.0;
		int j;
		for(j=1;j&lt;=n;j++){
			if(d[j]&gt;ds) break;
			if(d[j]&lt;mindis){
				mindis=d[j];
			}
			avgdis+=d[j]*1.0/n;
		}
		if(j&lt;n+1) continue;
		if(mindis&gt;ansdis){
			ansdis=mindis;
			ansavg=avgdis;
			ansid.clear();
			ansid.push_back(i);
		}else if(mindis==ansdis){
			if(ansavg&gt;avgdis){
				ansavg=avgdis;
				ansid.clear();
			    ansid.push_back(i);
			} 
			else if(ansavg==avgdis) ansid.push_back(i);
		}
	}
	if(ansid.size()==0) printf(&quot;No Solution&quot;);
	else{
		printf(&quot;G%d\n&quot;,ansid[0]-n);
		printf(&quot;%.1f %.1f&quot;,ansdis,ansavg);
	}
	return 0;
}
</code></pre>
<h3 id="a1073-科学计数法">A1073 科学计数法</h3>
<pre><code>#include&lt;cstdio&gt; 
#include&lt;cstring&gt;
int main(){
	char str[10010];
	scanf(&quot;%s&quot;,str);
	int len=strlen(str);
	int pos=0;
	while(str[pos]!='E') pos++;
	if(str[0]=='-') printf(&quot;-&quot;);
	int exp=0;
	for(int i=pos+2;i&lt;len;i++){
		exp=exp*10+str[i]-'0';
	}
	if(exp==0){
		for(int i=1;i&lt;pos;i++){
			printf(&quot;%c&quot;,str[i]);
		}
	}
	if(str[pos+1]=='-'){
		printf(&quot;0.&quot;);
		for(int t=0;t&lt;exp-1;t++) printf(&quot;0&quot;);
		for(int j=1;j&lt;pos;j++){
			if(str[j]=='.') continue;
			printf(&quot;%c&quot;,str[j]);
		}
	}
	else{
		for(int i=1;i&lt;pos;i++){
			if(str[i]=='.') continue;
			printf(&quot;%c&quot;,str[i]);
			if(i==exp+2&amp;&amp;(pos-3)!=exp){
				printf(&quot;.&quot;);
			}
		}
		for(int k=0;k&lt;exp-(pos-3);k++) printf(&quot;0&quot;);
	} 
	return 0;
}
</code></pre>
<h3 id="a1074链表">A1074(链表)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 100010;
struct Node {
	int address, data, next;
	int order;
}node[maxn];
bool cmp(Node a, Node b) {
	return a.order &lt; b.order;
}
int main() {
	for (int i = 0; i &lt; maxn; i++) {
		node[i].order = maxn;
	}
	int begin, n, k,count=0;
	scanf(&quot;%d%d%d&quot;, &amp;begin, &amp;n, &amp;k);
	for (int i = 0; i &lt; n; i++) {
		int address;
		scanf(&quot;%d&quot;, &amp;address);
		scanf(&quot;%d%d&quot;, &amp;node[address].data, &amp;node[address].next);
		node[address].address = address;
	}
	int p = begin;
	while (p != -1) {
		node[p].order = count++;
		p = node[p].next;
	}
	sort(node, node + maxn, cmp);
	for (int i = 0; i &lt; count / k; i++) {
		for (int j = (i + 1) * k - 1; j &gt; i * k; j--) {
			printf(&quot;%05d %d %05d\n&quot;, node[j].address, node[j].data, node[j - 1].address);
		}
		printf(&quot;%05d %d &quot;, node[i * k].address, node[i * k].data);
		if (i &lt; count / k - 1) {
			node[i * k].next = node[(i + 2) * k - 1].address;
			printf(&quot;%05d\n&quot;, node[i * k].next);
		}
		else {
			if (count % k == 0) {
				printf(&quot;-1\n&quot;);
			}
			else {
				node[i * k].next = node[(i + 1) * k ].address;
				printf(&quot;%05d\n&quot;, node[i * k].next);
				if(count==(i+1)*k+1) printf(&quot;%05d %d -1\n&quot;, node[count - 1].address, node[count - 1].data);
				else {
					for (int x = (i + 1) * k; x &lt; count-1; x++) {
						printf(&quot;%05d %d %05d\n&quot;, node[x].address, node[x].data, node[x + 1].address);
					}
					printf(&quot;%05d %d -1\n&quot;, node[count - 1].address, node[count - 1].data);
				}
				
			}
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1075">A1075</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
using namespace std;
const int maxn = 10010;
struct node {
	int rank;
	int id;
	int score[6];
	int total;
	int perfect;
	bool canprint;
}user[maxn];
bool cmp(node a, node b) {
	if (a.canprint == false || b.canprint == false) return a.canprint &gt; b.canprint;
	else if (a.total != b.total) return a.total &gt; b.total;
	else if (a.perfect != b.perfect) return a.perfect &gt; b.perfect;
	else return a.id &lt; b.id;
}
int main() {
	int n, k, m, question[6] = { 0 };
	scanf_s(&quot;%d%d%d&quot;, &amp;n, &amp;k, &amp;m);
	for (int i = 1; i &lt;= k; i++) scanf_s(&quot;%d&quot;, &amp;question[i]);
	for (int i = 0; i &lt; maxn; i++) {
		memset(user[i].score, -1, sizeof(user[i].score));
		user[i].total = 0;
		user[i].perfect = 0;
		user[i].canprint = false;
	}
	for (int i = 0; i &lt; m; i++) {
		int id,problem_id,score;
		scanf_s(&quot;%d %d %d&quot;, &amp;id,&amp;problem_id,&amp;score);
		user[id].id = id;
		if (score == -1&amp;&amp;user[id].score[problem_id]==-1) user[id].score[problem_id] = 0;//第一次未能编译通过
		if (score != -1) {
			user[id].canprint = true;
			if (score == question[problem_id]&amp;&amp;user[id].score[problem_id]&lt;question[problem_id]) user[id].perfect++;
		}
		if (score &gt;= user[id].score[problem_id]) user[id].score[problem_id] = score;//第一次满分
	}
	for (int i = 0; i &lt; maxn; i++) {
		for (int j = 1; j &lt;= k; j++) {
			if (user[i].score[j] != -1) {
				user[i].total += user[i].score[j];
			}
		}
	}
	sort(user, user + maxn, cmp);
	user[0].rank = 1;
	for (int j = 1; j &lt; n; j++) {
		if (user[j].total == user[j - 1].total) {
			user[j].rank = user[j - 1].rank;
		}
		else user[j].rank = j + 1;
	}
	for (int i = 0; i &lt; n; i++) {
		if (user[i].canprint == true) {
			printf(&quot;%d %05d %d&quot;, user[i].rank, user[i].id, user[i].total);
			for (int j = 1; j &lt;= k; j++) {
				if (user[i].score[j] == -1) printf(&quot; -&quot;);
				else {
					printf(&quot; %d&quot;, user[i].score[j]);
				}
			}
			printf(&quot;\n&quot;);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1076">A1076</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;queue&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=1010;
bool inq[maxn]={false};
struct node{
	int id;
	int layer;
};
vector&lt;node&gt; adj[maxn];
int BFS(int s,int L){
	int numforward=0;
	queue&lt;node&gt; q;
	node start;
	start.id=s;
	start.layer=0;
	q.push(start);
	inq[start.id]=true;
	while(!q.empty()){
		node now;
		now.id=q.front().id;
		now.layer=q.front().layer;
		q.pop();
		for(int i=0;i&lt;adj[now.id].size();i++){
			node next=adj[now.id][i];
			next.layer=now.layer+1;
			if(inq[next.id]==false&amp;&amp;next.layer&lt;=L){
				q.push(next);
				inq[next.id]=true;
				numforward++;
			}
		}
	}
	return numforward;
}
int main(){
	int n,L,followid,m,k,userid,numforward=0;
	scanf(&quot;%d%d&quot;,&amp;n,&amp;L);
	for(int i=1;i&lt;=n;i++){
		node user;
		user.id=i;
		scanf(&quot;%d&quot;,&amp;m);
		while(m--){
			scanf(&quot;%d&quot;,&amp;followid);
			adj[followid].push_back(user);
		}
	}
	scanf(&quot;%d&quot;,&amp;k);
	while(k--){
		scanf(&quot;%d&quot;,&amp;userid);
		fill(inq,inq+maxn,false);
		numforward=BFS(userid,L);
		printf(&quot;%d\n&quot;,numforward);
	}
	return 0;
}
</code></pre>
<h3 id="a1078">A1078</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cmath&gt;
bool isprime(int n) {
	if (n &lt;= 1) return false;
	int sqr = sqrt(1.0 * n);
	for (int i = 2; i &lt;= sqr; i++) {
		if (n % i == 0) return false;
	}
	return true;
}
bool hashtable[100010] = { 0 };
int main() {
	int tsize, n, a;
	scanf(&quot;%d%d&quot;, &amp;tsize, &amp;n);
    while(!isprime(tsize)){
        tsize++;
    }
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;a);
		int m = a % tsize;
		if (hashtable[m] == false) {
			hashtable[m] = true;
			if (i == 0) printf(&quot;%d&quot;, m);
			else printf(&quot; %d&quot;, m);
		}
		else {
            int step;
			for (step = 1; step &lt; tsize; step++) {
                m=(a+step*step)%tsize;
				if (hashtable[m] == false) {
					hashtable[m] =true;
					printf(&quot; %d&quot;,m);
					break;
				}
			}
			if (step == tsize) {
				printf(&quot; -&quot;);
			}
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1079">A1079</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cmath&gt;
#include&lt;vector&gt;
using namespace std;
const int maxn=100010;
struct node{
	int data;
	vector&lt;int&gt;child;
}Node[maxn];
double p,r,ans=0;
int n;
void DFS(int index,int depth){
	if(Node[index].child.size()==0){
		ans+=Node[index].data*p*pow((1+r/100),depth);
		return;
	}
	for(int i=0;i&lt;Node[index].child.size();i++){
		DFS(Node[index].child[i],depth+1);
	}
}
int main(){
	int num;
	scanf(&quot;%d%lf%lf&quot;,&amp;n,&amp;p,&amp;r);
	for(int i=0;i&lt;n;i++){
		int temp;
		scanf(&quot;%d&quot;,&amp;num);
		if(num==0){
			scanf(&quot;%d&quot;,&amp;temp);
			Node[i].data=temp;
		}else{
			for(int j=0;j&lt;num;j++){
				scanf(&quot;%d&quot;,&amp;temp);
				Node[i].child.push_back(temp);
			}
		}	
	}
	DFS(0,0);
	printf(&quot;%.1f&quot;,ans);
	return 0;
}
</code></pre>
<h3 id="a1080">A1080</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;
const int maxn = 40010;
struct node {
	int rank;
	int GE, GI,fgrade;
	int id;
	int choice[6];
}app[maxn];
struct node1 {
	int num;
	int quota;
	int id[maxn];
	int lastadmit;
}sch[110];
bool cmpapp(node a, node b) {
	if (a.fgrade != b.fgrade) return a.fgrade &gt; b.fgrade;
	else return a.GE &gt; b.GE;
}
bool cmpstu(int a,int b) {
	return app[a].id &lt; app[b].id;
}
int main() {
	int n, m, k;
	scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;k);
	for (int i = 0; i &lt; m; i++) {
		scanf(&quot;%d&quot;, &amp;sch[i].quota);
		sch[i].num = 0;
		sch[i].lastadmit = -1;
	}
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d%d&quot;, &amp;app[i].GE, &amp;app[i].GI);
		app[i].id = i;
		for (int j = 0; j &lt; k; j++) {
			scanf(&quot;%d&quot;, &amp;app[i].choice[j]);
		}
		app[i].fgrade = app[i].GE + app[i].GI;
	}
	sort(app, app + n, cmpapp);
	for (int i = 0; i &lt; n; i++) {
		if (i &gt; 0 &amp;&amp; (app[i].fgrade == app[i - 1].fgrade) &amp;&amp; (app[i].GE == app[i - 1].GE)) {
			app[i].rank = app[i - 1].rank;
		}
		else {
			app[i].rank = i;
		}
	}
	for (int i = 0; i &lt; n; i++) {
		for (int j = 0; j &lt; k; j++) {
			int choice = app[i].choice[j];
			int num = sch[choice].num;
			int last = sch[choice].lastadmit;
			if (sch[choice].quota &gt; num || (last != -1 &amp;&amp; app[i].rank == app[last].rank)) {
				sch[choice].id[num] = i;
				sch[choice].num++;
				sch[choice].lastadmit = i;
				break;
			}
		}
	}
	for (int i = 0; i &lt; m; i++) {
		if (sch[i].num &gt; 0) {
			sort(sch[i].id, sch[i].id + sch[i].num, cmpstu);
			for (int j = 0; j &lt; sch[i].num; j++) {
				printf(&quot;%d&quot;, app[sch[i].id[j]].id);
				if (j &lt; sch[i].num - 1) {
					printf(&quot; &quot;);
				}
			}
		}
		printf(&quot;\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1081">A1081</h3>
<pre><code>#include&lt;cstdio&gt;
long long gcd(int a, int b) {
	return b == 0 ? a : gcd(b, a % b);
}
int main() {
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	long long a2 = 0, b2 = 1,gcdvalue;
	for (int i = 0; i &lt; n; i++) {
		long long a, b;
		scanf(&quot;%lld/%lld&quot;, &amp;a, &amp;b);
		gcdvalue = gcd(a, b);
		a /= gcdvalue;
		b /= gcdvalue;
		a2 = a * b2 + b * a2;
		b2 = b * b2;
		gcdvalue = gcd(a2, b2);
		a2 /= gcdvalue;
		b2 /= gcdvalue;
	}
	long long integer = a2 / b2;
	a2 = a2 - integer * b2;
	if (integer != 0) {
		printf(&quot;%lld&quot;, integer);
		if (a2 &gt; 0) printf(&quot; %lld/%lld&quot;,a2,b2);
		else if (a2 &lt; 0) printf(&quot; %lld/%lld&quot;, -a2, b2);
	}
	if (integer == 0 &amp;&amp; a2 != 0) printf(&quot;%lld/%lld&quot;, a2, b2);
	if (integer == 0 &amp;&amp; a2 == 0) printf(&quot;0&quot;);
	return 0;
}
</code></pre>
<h3 id="a1082">A1082</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
string num[10] = { &quot;ling&quot;,&quot;yi&quot;,&quot;er&quot;,&quot;san&quot;,&quot;si&quot;,&quot;wu&quot;,&quot;liu&quot;,&quot;qi&quot;,&quot;ba&quot;,&quot;jiu&quot; };
string wei[5] = { &quot;Shi&quot;,&quot;Bai&quot;,&quot;Qian&quot;,&quot;Wan&quot;,&quot;Yi&quot; };
int main() {
	string str;
	getline(cin, str);
	int len = str.length();
	int left = 0, right = len - 1;
	if (str[0] == '-') {
		cout &lt;&lt; &quot;Fu&quot;;
		left++;
	}
	while (left + 4 &lt;= right) {
		right -= 4;
	}
	while (left &lt; len) {
		bool flag = false;
		bool hasprint = false;
		while (left &lt;= right) {
			if (str[left] == '0' &amp;&amp; left &gt; 0) {
				flag = true;
			}
			else {
				if (flag == true) {
					cout &lt;&lt; &quot; ling&quot;;
					flag = false;
				}
				if (left&gt;=1) cout &lt;&lt; &quot; &quot;;
				cout &lt;&lt; num[str[left] - '0'];
				hasprint = true;
				if(left!=right) cout&lt;&lt;&quot; &quot;&lt;&lt; wei[right - left - 1];
			}
			left++;
		}
		if (hasprint == true &amp;&amp; left &lt;len ) {
			cout &lt;&lt; &quot; &quot; &lt;&lt; wei[(len - left) / 4 + 2];
		}
		right += 4;
	}
	return 0;
}
</code></pre>
<h3 id="a1083">A1083</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 100010;
struct node {
	char name[12];
	char id[12];
	int score;
}stu[maxn];
bool cmp(node a, node b) {
	return a.score &gt; b.score;
}
int main() {
	int n,grade1,grade2;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%s%s%d&quot;, stu[i].name, stu[i].id, &amp;stu[i].score);
	}
	scanf(&quot;%d%d&quot;, &amp;grade1, &amp;grade2);
	sort(stu, stu + n, cmp);
	bool canprint = false;
	for (int i = 0; i &lt; n; i++) {
		if (stu[i].score &gt;= grade1 &amp;&amp; stu[i].score &lt;= grade2) {
			canprint = true;
			printf(&quot;%s %s\n&quot;, stu[i].name, stu[i].id);
		}
	}
	if (canprint == false) printf(&quot;NONE&quot;);
	return 0;
}
</code></pre>
<h3 id="a1084">A1084</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
bool hashtable[128] = { false };
int main() {
	string str1,str2;
	getline(cin, str1);
	getline(cin, str2);
	int len1 = str1.length();
	int len2 = str2.length();
	for (int i = 0; i &lt; len1; i++) {
		int j;
		if (str1[i] &gt;= 'a' &amp;&amp; str1[i] &lt;= 'z') str1[i] -= 32;
		for (j = 0; j &lt; len2; j++) {
			if ((str1[i] &gt;= '0' &amp;&amp; str1[i] &lt;= '9') || str1[i] == '_') {
				if (str2[j] == str1[i]){
					break;
				}
			}
			else {
				if (str2[j] &gt;= 'a' &amp;&amp; str2[j] &lt;= 'z') str2[j] -= 32;
				if (str1[i] == str2[j]) break;
			}
		}
		if (j == len2 &amp;&amp; hashtable[str1[i]] == false) {
			hashtable[str1[i]] = true;
			printf(&quot;%c&quot;, str1[i]);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1085">A1085</h3>
<pre><code>二分法
#include&lt;algorithm&gt;
#include&lt;cstdio&gt;
using namespace std;
const int maxn = 100010;
int main() {
	int n, p,num[maxn];
	scanf(&quot;%d%d&quot;, &amp;n, &amp;p);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;num[i]);
	}
	sort(num,num + n);
	int ans = 0;
	for (int i = 0; i &lt; n; i++) {
        long long k=(long long)p*num[i];
		int* right=upper_bound(num+i+1, num+n, k);
        int j=right-num;
		ans = max(ans, j-i);
	}
	printf(&quot;%d&quot;, ans);
	return 0; 
}

two points
#include&lt;algorithm&gt;
#include&lt;cstdio&gt;
using namespace std;
const int maxn = 100010;
int main() {
	int n, p,num[maxn];
	scanf(&quot;%d%d&quot;, &amp;n, &amp;p);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;num[i]);
	}
	sort(num,num + n);
	int count=0,i=0,j=0;
    while(i&lt;n&amp;&amp;j&lt;n){
        while(j&lt;n&amp;&amp;num[j]&lt;=(long long)num[i]*p){
            count=max(count,j-i+1);
            j++;
        }
        i++;
    }
    printf(&quot;%d&quot;,count);
    return 0;
}
</code></pre>
<h3 id="a1086">A1086</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;stack&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 50;
struct node {
	int data;
	node* lchild;
	node* rchild;
};
int  pre[maxn], in1[maxn];
int n;
node* create(int preL, int preR, int inL, int inR) {
	if (preL &gt; preR) return NULL;
	node* root = new node;
	root-&gt;data = pre[preL];
	int k;
	for (k = inL; k &lt; inR; k++) {
		if (in1[k] == pre[preL]) {
			break;
		}
	}
	int numleft = k - inL;
	root-&gt;lchild = create(preL + 1, preL + numleft, inL, k - 1);
	root-&gt;rchild = create(preL + numleft + 1, preR, k + 1, inR);
	return root;
}
int num=0;
void postorder(node* root) {
	if (root == NULL) return;
	postorder(root-&gt;lchild);
	postorder(root-&gt;rchild);
	printf(&quot;%d&quot;, root-&gt;data);
	num++;
	if (num &lt; n) printf(&quot; &quot;);
}
int main() {
	scanf(&quot;%d&quot;, &amp;n);
	char str[5];
	stack&lt;int&gt; st;
	int preindex = 0, inindex = 0, x;
	for (int i = 0; i &lt;2*n; i++) {
		scanf(&quot;%s&quot;, str);
		if (strcmp(str,&quot;Push&quot;)==0) {
			scanf(&quot;%d&quot;, &amp;x);
			pre[preindex++] = x;
			st.push(x);
		}
		else {
			in1[inindex++] = st.top();
			st.pop();
		}
	}
	node* root = create(0, n - 1, 0, n - 1);
	postorder(root);
	return 0;
}
</code></pre>
<h3 id="a1087">A1087</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;string&gt;
#include&lt;map&gt;
using namespace std;
const int maxn=210;
const int INF=1000000000;
int pre[maxn],num[maxn],d[maxn],w[maxn],weight[maxn],pt[maxn],G[maxn][maxn];
int n,k;
bool vis[maxn];
map&lt;int,string&gt; inttostring;
map&lt;string,int&gt; stringtoint;
void dijkst(int s){
	fill(vis,vis+maxn,false);
	fill(d,d+maxn,INF);
	fill(w,w+maxn,0);
	fill(pt,pt+maxn,0);
	fill(num,num+maxn,0);
    for(int i=0;i&lt;n;i++) pre[i]=i;
	d[s]=0;
	w[s]=weight[s];
	num[s]=1;
	for(int i=0;i&lt;n;i++){
		int u=-1,MIN=INF;
		for(int j=0;j&lt;n;j++){
			if(vis[j]==false&amp;&amp;d[j]&lt;MIN){
				u=j;
				MIN=d[u];
			}
		}
		if(u==-1) return;
		vis[u]=true;
		for(int v=0;v&lt;n;v++){
			if(vis[v]==false&amp;&amp;G[u][v]!=INF){
				if(d[v]&gt;d[u]+G[u][v]){
					d[v]=d[u]+G[u][v];
					w[v]=w[u]+weight[v];	
					num[v]=num[u];
					pt[v]=pt[u]+1;
					pre[v]=u;
				}else if(d[v]==d[u]+G[u][v]){
					num[v]+=num[u];
					if(w[v]&lt;w[u]+weight[v]){
						w[v]=w[u]+weight[v];
						pt[v]=pt[u]+1;
						pre[v]=u;
					}else if(w[v]==weight[v]+w[u]){
						double avgfun1=w[v]*1.0/pt[v];
						double avgfun2=(weight[v]+w[u])*1.0/(pt[u]+1);
						if(avgfun2&gt;avgfun1){
							pt[v]=pt[u]+1;
							pre[v]=u;
						}
					}
				}
			}
		}
	}
}
void printpath(int v){
	if(v==0){
		cout&lt;&lt;inttostring[v];
		return;
	}
	printpath(pre[v]);
	cout&lt;&lt;&quot;-&gt;&quot;&lt;&lt;inttostring[v];
}
int main(){
	string begincity,tempcity,c1,c2;
	cin&gt;&gt;n&gt;&gt;k&gt;&gt;begincity;
	stringtoint[begincity]=0;
	inttostring[0]=begincity;
	fill(G[0],G[0]+maxn*maxn,INF);
	for(int i=1;i&lt;=n-1;i++){
		cin&gt;&gt;tempcity&gt;&gt;weight[i];
		stringtoint[tempcity]=i;
		inttostring[i]=tempcity;
	}
	for(int i=0;i&lt;k;i++){
		cin&gt;&gt;c1&gt;&gt;c2;
		int id1=stringtoint[c1];
		int id2=stringtoint[c2];
		cin&gt;&gt;G[id1][id2];
		G[id2][id1]=G[id1][id2];
	}
	dijkst(0);
	int end=stringtoint[&quot;ROM&quot;];
	printf(&quot;%d %d %d %d\n&quot;,num[end],d[end],w[end],w[end]/pt[end]);
    printpath(end);
    return 0;
}
</code></pre>
<h3 id="a1088">A1088</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
typedef long long ll;
ll gcd(ll a, ll b) {
	return b == 0 ? a : gcd(b, a % b);
}
struct fraction {
	ll up, down;
}a, b;
fraction reduction(fraction result) {
	if (result.down &lt; 0) {
		result.up = -result.up;
		result.down = -result.down;
	}
	if (result.up == 0) result.down = 1;
	else {
		ll gcdvalue = gcd(abs(result.up), abs(result.down));
		result.up /= gcdvalue;
		result.down /= gcdvalue;
	}
	return result;
}
fraction add(fraction f1, fraction f2) {
	fraction result;
	result.up = f1.up * f2.down + f1.down * f2.up;
	result.down = f1.down * f2.down;
	return reduction(result);
}
fraction subtract(fraction f1, fraction f2) {
	fraction result;
	result.up = f1.up * f2.down - f1.down * f2.up;
	result.down = f1.down * f2.down;
	return reduction(result);
}
fraction multi(fraction f1, fraction f2) {
	fraction result;
	result.up = f1.up * f2.up;
	result.down = f1.down * f2.down;
	return reduction(result);
}
fraction divide(fraction f1, fraction f2) {
	fraction result;
	result.up = f1.up * f2.down;
	result.down = f1.down * f2.up;
	return reduction(result);
}
void showresult(fraction r) {
	r = reduction(r);
	if (r.up &lt; 0) printf(&quot;(&quot;);
	if (r.down == 1) printf(&quot;%lld&quot;, r.up);
	else if (abs(r.up) &lt; r.down) printf(&quot;%lld/%lld&quot;, r.up, r.down);
	else if (abs(r.up) &gt; r.down) printf(&quot;%lld %lld/%lld&quot;, r.up / r.down, abs(r.up) % r.down, r.down);
	if (r.up &lt; 0) printf(&quot;)&quot;);
}
int main() {
	scanf(&quot;%lld/%lld %lld/%lld&quot;, &amp;a.up, &amp;a.down, &amp;b.up, &amp;b.down);
	showresult(a);
	printf(&quot; + &quot;);
	showresult(b);
	printf(&quot; = &quot;);
	showresult(add(a, b));
	printf(&quot;\n&quot;);
	showresult(a);
	printf(&quot; - &quot;);
	showresult(b);
	printf(&quot; = &quot;);
	showresult(subtract(a, b));
	printf(&quot;\n&quot;);
	showresult(a);
	printf(&quot; * &quot;);
	showresult(b);
	printf(&quot; = &quot;);
	showresult(multi(a, b));
	printf(&quot;\n&quot;);
	showresult(a);
	printf(&quot; / &quot;);
	showresult(b);
	printf(&quot; = &quot;);
	if (b.up == 0) printf(&quot;Inf&quot;);
	else showresult(divide(a, b));
	return 0;
}
</code></pre>
<h3 id="a1089-two-points">A1089  TWO POINTS</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
int main() {
	int a[100], b[100];
	int n,i,j;
	cin &gt;&gt; n;
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; a[i];
	}
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt;b[i];
	}
	for ( i = 0; b[i] &lt;= b[i + 1] &amp;&amp; i &lt; n-1; i++);
	for (j = i + 1; a[j] == b[j] &amp;&amp; j &lt; n; j++);
	if (j == n) {
		cout &lt;&lt; &quot;Insertion Sort&quot; &lt;&lt; endl;
		sort(a, a + i + 2);
	}
	else {
		cout &lt;&lt; &quot;Merge Sort&quot; &lt;&lt; endl;
		int k = 1;
		bool flag = true;
		while (flag) {
			flag = false;
			for (int k = 0; k &lt; n; k++) {
				if (a[k] != b[k]) {
					flag = true;
				}
			}
			k = k * 2;
			for (i = 0; i &lt; n / k; i++) {
				sort(a + i * k, a + i * k + k);
			}
			sort(a + n / k * k, a + n);
		}
	}
    cout&lt;&lt;a[0];
	for (int i = 1; i &lt; n; i++) {
		cout&lt;&lt;&quot; &quot; &lt;&lt; a[i];
	}
	return 0;
}
</code></pre>
<h3 id="a1090">A1090</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;cmath&gt;
using namespace std;
const int maxn=100010;
vector&lt;int&gt; children[maxn];
int maxdepth=0,num=0;
void DFS(int index,int depth){
	if(children[index].size()==0){
		if(depth&gt;maxdepth){
			maxdepth=depth;
			num=1;
		}
		else if(depth==maxdepth){
			num++;
		}
		return;
	}
	for(int i=0;i&lt;children[index].size();i++){
		DFS(children[index][i],depth+1);
	}
}
int main(){
	int n,father,root;
	double p,r;
	scanf(&quot;%d&quot;,&amp;n);
	scanf(&quot;%lf%lf&quot;,&amp;p,&amp;r);
	r/=100;
	for(int i=0;i&lt;n;i++){
		scanf(&quot;%d&quot;,&amp;father);
		if(father!=-1){
			children[father].push_back(i);
		}
		else root=i;
	}
	DFS(root,0);
	printf(&quot;%.2f %d&quot;,p*pow((1+r),maxdepth),num);
	return 0;
}
</code></pre>
<h3 id="a1091">A1091</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;queue&gt;
using namespace std;
int m, n, slice,T;
struct node {
	int x, y, z;
}Node;
int pixel[61][1290][128] = { 0 };
bool inq[61][1290][128] = { false };
int Y[6] = { 0,0,0,0,-1,1 };
int X[6] = { 0,0,1,-1,0,0 };
int Z[6] = { 1,-1,0,0,0,0 };
bool judge(int z, int x, int y) {
	if (z &gt;= slice || z &lt; 0 || x &gt;= m || x &lt; 0 || y &gt;= n || y &lt; 0) {
		return false;
	}
	if (inq[z][x][y]==true||pixel[z][x][y]==0) {
		return false;
	}
	return true;
}
int BFS(int z,int x,int y){
	int total=0;
	Node.x = x;
	Node.y = y;
	Node.z = z;
	inq[z][x][y] = true;
	queue&lt;node&gt; q;
	q.push(Node);
	while (!q.empty()) {
		node topp = q.front();
		q.pop();
		total++;
		int newx, newy, newz;
		for (int i = 0; i &lt; 6; i++) {
			newz = topp.z + Z[i];
			newx = topp.x + X[i];
			newy = topp.y + Y[i];
			if (judge(newz, newx, newy)) {
				Node.x = newx;
				Node.y = newy;
				Node.z = newz;
				q.push(Node);
				inq[Node.z][Node.x][Node.y] = true;
			}
		}
	}
	if (total &gt;= T) return total;
	else return 0;
}
int main() {
	int ans = 0;
	scanf(&quot;%d%d%d%d&quot;, &amp;m, &amp;n, &amp;slice, &amp;T);
	for (int i = 0; i &lt; slice; i++) {
		for (int j = 0; j &lt; m; j++) {
			for (int k = 0; k &lt; n; k++) {
				scanf(&quot;%d&quot;, &amp;pixel[i][j][k]);
			}
		}
	}
	for (int i = 0; i &lt; slice; i++) {
		for (int j = 0; j &lt; m; j++) {
			for (int k = 0; k &lt; n; k++) {
				if (pixel[i][j][k] == 1 &amp;&amp; inq[i][j][k] == false) {
					ans += BFS(i, j, k);
				}
			}
		}
	}
	printf(&quot;%d&quot;, ans);
	return 0;
}
</code></pre>
<h3 id="a1092">A1092</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
int main() {
	int  hashtable[128] = { 0 };
	string s1, s2;
	int miss = 0;
	getline(cin, s1);
	getline(cin, s2);
	int len1 = s1.length();
	int len2 = s2.length();
	for (int i = 0; i &lt; len1; i++) {
		hashtable[s1[i]]++;
	}
	for (int j = 0; j &lt; len2; j++) {
		if (hashtable[s2[j]] &gt; 0) {
			hashtable[s2[j]]--;
		}
		else {
			miss++;
		}
	}
	if (miss &gt; 0) printf(&quot;No %d&quot;, miss);
	else printf(&quot;Yes %d&quot;, len1 - len2);
	return 0;
}
</code></pre>
<h3 id="a1093">A1093</h3>
<pre><code>#include&lt;string&gt;
#include&lt;iostream&gt;
using namespace std;
const int maxn = 100010;
int main() {
	string str;
	cin &gt;&gt; str;
	int left_p[maxn] = { 0 };
	int len = str.length();
	for (int i = 0; i &lt; len; i++) {
		if (i &gt; 0) {
			left_p[i] = left_p[i - 1];
		}
		if (str[i] == 'P') {
			left_p[i]++;
		}
	}
	int res=0,count_T=0;
	for (int i = len-1; i &gt;=0; i--) {
		if (str[i] == 'T') {
			count_T++;
		}
		if (str[i] == 'A') {
			res = (res + (left_p[i] * count_T) % 1000000007) % 1000000007;
		}
	}
	cout &lt;&lt; res;
	return 0;
}
</code></pre>
<h3 id="a1094">A1094</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
const int maxn = 110;
vector&lt;int&gt; child[maxn];
int hashtable[maxn] = { 0 };
void DFS(int index, int level) {
	hashtable[level]++;
	if (child[index].size() == 0) return;
	for (int i = 0; i &lt; child[index].size(); i++) {
		DFS(child[index][i], level + 1);
	}
}
int main(){
	int n,m,index,k,temp;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i = 1; i &lt;= m; i++) {
		scanf(&quot;%d%d&quot;, &amp;index,&amp;k);
		for (int j = 1; j &lt;= k; j++) {
			scanf(&quot;%d&quot;, &amp;temp);
			child[index].push_back(temp);
		}
	}
	DFS(1, 1);
	int level, maxgeneration = 0;
	for (int i = 1; i &lt; maxn; i++) {
		if (hashtable[i] &gt; maxgeneration) {
			maxgeneration = hashtable[i];
			level = i;
		}
	}
	printf(&quot;%d %d&quot;, maxgeneration, level);
	return 0;
}
</code></pre>
<h3 id="a1096">A1096</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cmath&gt;
int main() {
	long long  n;
	scanf(&quot;%lld&quot;, &amp;n);
	long long  sqr = sqrt(n * 1.0);
	long long len=0, first;
	for (long long i = 2; i &lt;= sqr; i++) {
		long long j = i, product = 1 ;
		while (1) {
			product *= j;
			if (n % product != 0) break;
			else {
				if (j - i + 1 &gt; len) {
					len = j - i + 1;
					first = i;
				}
			}
			j++;
		}
	}
	if (len == 0) {
		printf(&quot;1\n&quot;);
		printf(&quot;%lld&quot;, n);
	}
	else {
		printf(&quot;%lld\n&quot;, len);
		for (long long i = first; i &lt; first + len; i++) {
			if (i == first) printf(&quot;%lld&quot;, i);
			else printf(&quot;*%lld&quot;, i);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1097">A1097</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=100010;
struct Node{
	int address,key,next;
	int order;
}node[maxn];
bool cmp(Node a,Node b){
	return a.order&lt;b.order;
}
bool judge[maxn]={false};
int main(){
	int begin,n,address;;
	scanf(&quot;%d%d&quot;,&amp;begin,&amp;n);
	for(int i=0;i&lt;maxn;i++){
		node[i].order=2*maxn;
	}
	for(int i=0;i&lt;n;i++){
		scanf(&quot;%d&quot;,&amp;address);
		scanf(&quot;%d%d&quot;,&amp;node[address].key,&amp;node[address].next);
		node[address].address=address;
	}
	int p=begin,countvalid=0,countremoved=0;
	while(p!=-1){
		if(judge[abs(node[p].key)]==false){
			judge[abs(node[p].key)]=true;
			node[p].order=countvalid++;
		}
		else{
			node[p].order=maxn+countremoved++;
		}
		p=node[p].next;
	}
	sort(node,node+maxn,cmp);
	int count=countvalid+countremoved;
	for(int i=0;i&lt;count;i++){
		if(i!=countvalid-1&amp;&amp;i!=count-1){
			printf(&quot;%05d %d %05d\n&quot;,node[i].address,node[i].key,node[i+1].address);
		}
		else{
			printf(&quot;%05d %d -1\n&quot;,node[i].address,node[i].key);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1098">A1098</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 110;
void downadjust(vector&lt;int&gt; &amp;b,int low, int high) {
	int i = low, j = 2 * i;
	while (j &lt;= high) {
		if (j + 1 &lt;= high &amp;&amp; b[j + 1] &gt; b[j]) {
			j = j + 1;
		}
		if (b[i] &lt; b[j]) {
			swap(b[i], b[j]);
			i = j;
			j = 2 * i;
		}
		else {
			break;
		}
	}
}
int main() {
	int n,p=2;
	scanf(&quot;%d&quot;, &amp;n);
	vector&lt;int&gt;a(n + 1);
	vector&lt;int&gt;b(n + 1);
	for (int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;a[i]);
	for (int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;b[i]);
	while (p &lt;= n &amp;&amp; b[p - 1] &lt;= b[p]) p++;
	int k = p;
	while (a[p] == b[p]&amp;&amp;p&lt;=n) p++;
	if (p == n + 1) {
		printf(&quot;Insertion Sort\n&quot;);
		sort(b.begin() + 1, b.begin() + k + 1);
	}
	else {
        printf(&quot;Heap Sort\n&quot;);
		p = n;
		while (p &gt; 2 &amp;&amp; b[p] &gt;= b[1]) p--;
		swap(b[1], b[p]);
		downadjust(b, 1, p - 1);
	}
    printf(&quot;%d&quot;, b[1]);
	for (int i = 2; i &lt;= n; i++) printf(&quot; %d&quot;, b[i]);
	return 0;
}
</code></pre>
<h3 id="a1099">A1099</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;queue&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 110;
int n,inorder[maxn],index=0,num=0;
struct node {
	int data;
	int left, right;
}Node[maxn];
void in_insert(int root) {
	if (root == -1) return;
	in_insert(Node[root].left);
	Node[root].data = inorder[index++];
	in_insert(Node[root].right);
}
void BFS(int root) {
	queue&lt;int&gt;q;
	q.push(root);
	while (!q.empty()) {
		int now = q.front();
		q.pop();
		printf(&quot;%d&quot;, Node[now].data);
		num++;
		if (num &lt; n) printf(&quot; &quot;);
		if (Node[now].left != -1) q.push(Node[now].left);
		if (Node[now].right != -1) q.push(Node[now].right);
	}
}
int main() {
	scanf_s(&quot;%d&quot;, &amp;n);
	int root = 0;
	for (int i = 0; i &lt; n; i++) {
		scanf_s(&quot;%d%d&quot;, &amp;Node[i].left, &amp;Node[i].right);
	}
	for (int i = 0; i &lt; n; i++) {
		scanf_s(&quot;%d&quot;, &amp;inorder[i]);
	}
	sort(inorder, inorder + n);
	in_insert(0);
	BFS(0);
	return 0;
}
</code></pre>
<h3 id="a1100">A1100</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;map&gt;
#include&lt;string&gt;
using namespace std;
string s1[13] = { &quot;tret&quot;,&quot;jan&quot;, &quot;feb&quot;, &quot;mar&quot;, &quot;apr&quot;, &quot;may&quot;, &quot;jun&quot;, &quot;jly&quot;, &quot;aug&quot;, &quot;sep&quot;, &quot;oct&quot;, &quot;nov&quot;, &quot;dec&quot; };
string s2[13] = { &quot;tret&quot;,&quot;tam&quot;, &quot;hel&quot;, &quot;maa&quot;, &quot;huh&quot;, &quot;tou&quot;, &quot;kes&quot;,&quot;hei&quot;, &quot;elo&quot;, &quot;syy&quot;, &quot;lok&quot;, &quot;mer&quot;, &quot;jou&quot; };
map&lt;string, int&gt;strtonum;
int main() {
	int n;
	string str;
	scanf(&quot;%d%*c&quot;, &amp;n);
	while (n--) {
		getline(cin, str);
		if (str[0] &gt;= '0' &amp;&amp; str[0] &lt;= '9') {
			int number = stoi(str);
			if (number &lt; 13) cout &lt;&lt; s1[number]&lt;&lt;endl;
			else {
				int unit = number % 13;
				number /= 13;
				int tens = number % 13;
				if (unit == 0) cout &lt;&lt; s2[tens] &lt;&lt; endl;
				else cout &lt;&lt; s2[tens] &lt;&lt; &quot; &quot; &lt;&lt; s1[unit] &lt;&lt; endl;
			}	
		}
		else {
			for (int i = 0; i &lt; 13; i++) {
				strtonum[s1[i]] = i;
			}
			for (int i = 1; i &lt; 13;i++ ) {
				strtonum[s2[i]] = 13 * i;
			}
			for (int i = 1; i &lt; 13; i++) {
				for (int j = 0; j &lt; 13; j++) {
					strtonum[s2[i] +&quot; &quot;+s1[j]] = i * 13 + j;
				}
			}
			cout &lt;&lt; strtonum[str] &lt;&lt; endl;
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1101">A1101</h3>
<pre><code>#include&lt;iostream&gt;
using namespace std;
const int maxn = 100010;
const int INF = 0x7fffffff;
int main() {
	int a[maxn], leftmax[maxn]  , rightmin[maxn] ;
	int n;
	cin &gt;&gt; n;
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; a[i];
	}
    leftmax[0]=0;
	for (int i = 1; i &lt; n; i++) {
			leftmax[i] = leftmax[i - 1];
			if (a[i - 1] &gt; leftmax[i]) leftmax[i] = a[i-1];
	}
	rightmin[n - 1] = INF;
	for (int i = n - 2; i &gt;= 0; i--) {
		rightmin[i] = rightmin[i + 1];
		if (a[i + 1] &lt; rightmin[i]) rightmin[i] = a[i + 1];
	}
	int count=0, num[maxn];
	for (int i = 0; i &lt; n; i++) {
		if (a[i] &gt; leftmax[i] &amp;&amp; a[i] &lt;rightmin[i]) {
			num[count++] = a[i];
		}
	}
	cout &lt;&lt; count&lt;&lt;endl;
	if(count!=0){
         cout &lt;&lt; num[0];
	    for (int i = 1; i &lt; count; i++) cout &lt;&lt; &quot; &quot; &lt;&lt; num[i];
    }
    cout&lt;&lt;endl;
	return 0;
}
</code></pre>
<h3 id="a1102">A1102</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;queue&gt;
#include&lt;cctype&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node {
	int lchild, rchild;
}Node[11];
int n;
void layerorder(int root) {
	int num = 0;
	queue&lt;int&gt; q;
	q.push(root);
	while (!q.empty()) {
		int now = q.front();
		q.pop();
		printf(&quot;%d&quot;, now);
		num++;
		if (num &lt; n) printf(&quot; &quot;);
		if (Node[now].lchild != -1) q.push(Node[now].lchild);
		if (Node[now].rchild != -1) q.push(Node[now].rchild);
	}
}
int num1 = 0; 
void inorder(int root) {
	if (root == -1) return;
    inorder(Node[root].lchild);
	printf(&quot;%d&quot;, root);
	num1++;
	if (num1 &lt; n) printf(&quot; &quot;);
	inorder(Node[root].rchild);
}
void postorder(int root) {
	if (root == -1) return;
	postorder(Node[root].lchild);
	postorder(Node[root].rchild);
	swap(Node[root].lchild, Node[root].rchild);
}
int main() {
	bool notroot[11] = { false };
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		char a, b;
		scanf(&quot;%*c%c %c&quot;, &amp;a, &amp;b);
		if (isdigit(a)) {
			Node[i].lchild = a - '0';
			notroot[Node[i].lchild] = true;
		}
		else {
			Node[i].lchild = -1;
		}
		if (isdigit(b)) {
			Node[i].rchild = b - '0';
			notroot[Node[i].rchild] = true;
		}
		else {
			Node[i].rchild = -1;
		}
	}
	int root;
	for (int i = 0; i &lt; n; i++) {
		if (notroot[i] == false) {
			root = i;
			break;
		}
	}
	postorder(root);
	layerorder(root);
	printf(&quot;\n&quot;);
	inorder(root);
	return 0;
}
</code></pre>
<h3 id="a1103">A1103</h3>
<pre><code>#include&lt;vector&gt;
#include&lt;cstdio&gt;
#include&lt;cmath&gt;
using namespace std;
int n, k, p,maxfacsum=-1;
vector&lt;int&gt; temp, ans, fac;
void init() {
	int i = 0, temp=0;
	while (temp &lt;= n) {
		fac.push_back(temp);
		temp = (int)pow(1.0 * (++i),1.0* p);
	}
}
void DFS(int index, int nowk, int sum, int facsum) {
	if (sum == n &amp;&amp; nowk == k) {
		if (facsum &gt; maxfacsum) {
			ans = temp;//更新最优序列
			maxfacsum = facsum;
		}
		return;
	}
	if (nowk &gt; k || sum &gt; n) return;
	if (index - 1 &gt;= 0) {
		temp.push_back(index);
		DFS(index, nowk + 1, sum + fac[index], facsum + index);
		temp.pop_back();
		DFS(index - 1, nowk, sum, facsum);
	}
}
int main() {
	scanf(&quot;%d%d%d&quot;, &amp;n, &amp;k, &amp;p);
	init();
	DFS(fac.size() - 1, 0, 0, 0);
	if (maxfacsum == -1) printf(&quot;Impossible&quot;);
	else {
		printf(&quot;%d = %d^%d&quot;, n, ans[0], p);
		for (int i = 1; i &lt; ans.size(); i++) {
			printf(&quot; + %d^%d&quot;, ans[i], p);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1104">A1104</h3>
<pre><code>#include&lt;cstdio&gt;
const int maxn = 100010;
int main() {
	int n;
	double a[maxn],sum=0;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 1; i &lt;= n; i++) {
		scanf(&quot;%lf&quot;, &amp;a[i]);
        sum += a[i] * (n - i + 1) * i;
	}
	printf(&quot;%.2f&quot;, sum);
	return 0;
}
</code></pre>
<h3 id="a1105">A1105</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
#include&lt;cmath&gt;
using namespace std;
const int maxn=100;
bool cmp(int a,int b){
	return a&gt;b;
}
int main(){
	int N,n,m,st=0;
	scanf(&quot;%d&quot;,&amp;N);
	vector&lt;int&gt; a(N);
	for(int i=0;i&lt;N;i++) scanf(&quot;%d&quot;,&amp;a[i]);
	n=sqrt(1.0*N);
	while(n&gt;=1){
		if(N%n==0) break;
		n--;
	}
	m=N/n;
	int level=m/2+m%2;
	sort(a.begin(),a.end(),cmp);
	int putm=m,putn=n;
	vector&lt;vector&lt;int&gt; &gt; ans(m, vector&lt;int&gt;(n));
	for(int i=0;i&lt;level;i++){
		for(int j=i;j&lt;n&amp;&amp;st&lt;=N-1;j++) ans[i][j]=a[st++];
		for(int k=i+1;k&lt;=m-2&amp;&amp;st&lt;=N-1;k++) ans[k][n-1]=a[st++];
		for(int x=n-1;x&gt;=i&amp;&amp;st&lt;=N-1;x--) ans[m-1][x]=a[st++];
		for(int t=m-2;t&gt;=i+1&amp;&amp;st&lt;=N-1;t--) ans[t][i]=a[st++];
		n--;
		m--;
	}
	for(int i=0;i&lt;putm;i++){
		for(int j=0;j&lt;putn;j++){
			printf(&quot;%d&quot;,ans[i][j]);
			if(j&lt;putn-1) printf(&quot; &quot;);
		}
		printf(&quot;\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1106">A1106</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;cmath&gt;
using namespace std;
const int maxn = 100010;
const int  INF = 0x7fffffff;
vector&lt;int&gt; child[maxn];
double minprice = INF;
int n,num=0;
double p, r;
void DFS(int index, int depth) {
	if (child[index].size() == 0) {
		if (p * pow((1 + r/100), depth) &lt; minprice) {
			minprice = p * pow((1 + r/100), depth);
			num = 1;
		}
		else if (p * pow((1 + r/100), depth) == minprice) {
			num++;
		}
		return;
	}
	for (int i = 0; i &lt; child[index].size(); i++) {
		DFS(child[index][i], depth + 1);
	}
}
int main() {
	scanf(&quot;%d%lf%lf&quot;, &amp;n, &amp;p, &amp;r);
	int  k,temp;
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;k);
		if (k == 0) continue;
		else {
			for (int j = 0; j &lt; k; j++) {
				scanf(&quot;%d&quot;, &amp;temp);
				child[i].push_back(temp);
			}
		}
	}
	DFS(0, 0);
	printf(&quot;%.4f %d&quot;, minprice, num);
	return 0;
}
</code></pre>
<h3 id="a1107">A1107</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=1010;
int n;
int father[maxn];
int isroot[maxn]={0};
int course[maxn]={0};
bool cmp(int a,int b){
	return a&gt;b;
}
int findfather(int v){
	if(father[v]==v) return v;
	else{
		int F=findfather(father[v]);
		father[v]=F;
		return F;
	}
}
void Union(int a,int b){
	int fatherA=findfather(a);
	int fatherB=findfather(b);
	if(fatherA!=fatherB){
		father[fatherA]=fatherB;
	}
}
void init(int x){
	for(int i=1;i&lt;=n;i++){
		father[i]=i;
	}
}
int main(){
	int k,h;
	scanf(&quot;%d&quot;,&amp;n);
	init(n);
	for(int i=1;i&lt;=n;i++){
		scanf(&quot;%d:&quot;,&amp;k);
		for(int j=0;j&lt;k;j++){
			scanf(&quot;%d&quot;,&amp;h);
			if(course[h]==0){
				course[h]=i;
			}
			Union(i,findfather(course[h]));
		}
	}
	for(int i=1;i&lt;=n;i++){
		isroot[findfather(i)]++;
	}
	int ans=0;
	for(int i=1;i&lt;=n;i++){
		if(isroot[i]!=0){
			ans++;
		}
	}
	printf(&quot;%d\n&quot;,ans);
	sort(isroot+1,isroot+n+1,cmp);
	for(int i=1;i&lt;=ans;i++){
		printf(&quot;%d&quot;,isroot[i]);
		if(i&lt;ans) printf(&quot; &quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1108">A1108</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#include&lt;cstring&gt;
using namespace std;
int main() {
	char a[100],b[100];
	int n,cnt=0;
	scanf(&quot;%d&quot;,&amp;n);
	double temp, sum = 0.0;
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%s&quot;, a);
		sscanf(a, &quot;%lf&quot;, &amp;temp);
		sprintf(b, &quot;%.2f&quot;, temp);
		bool flag = false;
		for (int j = 0; j &lt; strlen(a); j++) {
			if (a[j] != b[j]) flag = true;
		}
		if (flag || temp &lt; -1000 || temp&gt;1000) {
			printf(&quot;ERROR: %s is not a legal number\n&quot;, a);
		}
		else {
			sum += temp;
			cnt++;
		}
	}
	if (cnt == 0) printf(&quot;The average of 0 numbers is Undefined&quot;);
	else if (cnt == 1) printf(&quot;The average of 1 number is %.2f&quot;, sum);
	else printf(&quot;The average of %d numbers is %.2f&quot;, cnt, sum / cnt);
	return 0;
}
</code></pre>
<h3 id="a1109">A1109</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn = 10010;
struct node {
	int height;
	char name[10];
}person[maxn];
bool cmp(node a, node b) {
	if (a.height != b.height) return a.height &gt; b.height;
	else return strcmp(a.name, b.name) &lt; 0;
}
int main() {
	int n, k, cnt = 0;
	cin &gt;&gt; n &gt;&gt; k;
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; person[i].name;
		cin &gt;&gt; person[i].height;
	}
	int rownum = n / k;
	sort(person, person + n, cmp);
	for (int i = 0; i &lt; k; i++) {
		vector&lt;node&gt; ans(n+1);
		int num;
		if (i == 0)  num = n - (rownum * (k - 1));
		else  num = rownum;
		ans[num / 2 + 1] = person[cnt++];
		for (int j = 1; j &lt;= num / 2; j++) {
			if ((num / 2 + 1 - j) &gt;= 1) ans[num / 2 + 1 - j] = person[cnt++];
			if ((num / 2 + 1 + j) &lt;= num) ans[num / 2 + 1 + j] = person[cnt++];
		}
		for (int j = 1; j &lt;= num; j++) {
			cout &lt;&lt; ans[j].name;
			if (j &lt; num) cout &lt;&lt; &quot; &quot;;
		}
		cout &lt;&lt; endl;
		ans.clear();
	}
	return 0;
}
</code></pre>
<h3 id="a1110">A1110</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
struct node {
	int lchild;
	int rchild;
}a[21];
int ans, maxn = -1;
void dfs(int root, int index) {
	if (index &gt; maxn) {
		maxn = index;
		ans = root;
	}
	if (a[root].lchild != -1) dfs(a[root].lchild, index * 2);
	if (a[root].rchild != -1) dfs(a[root].rchild, index * 2 + 1);
}
int main() {
	int root = 0,n, have[30] = { 0 };
	string c;
	cin &gt;&gt; n;
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; c;
		if (c == &quot;-&quot;) a[i].lchild = -1;
		else {
			a[i].lchild = stoi(c);
			have[a[i].lchild] = 1;
		}
		cin &gt;&gt; c;
		if (c == &quot;-&quot;) a[i].rchild = -1;
		else {
			a[i].rchild = stoi(c);
			have[a[i].rchild] = 1;
		}
	}
	while (have[root] != 0) root++;
	dfs(root, 1);
	if (maxn == n) cout &lt;&lt; &quot;YES &quot; &lt;&lt; ans;
	else cout &lt;&lt; &quot;NO &quot; &lt;&lt; root;
	return 0;
}
</code></pre>
<h3 id="a1112">A1112</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;string&gt;
#include&lt;map&gt;
using namespace std;
int main(){
	bool surenobroken[256]={false},hasprint[256]={false};
	map&lt;char,bool&gt; broken;
	vector&lt;char&gt; needprint;
	string s;
	int k;
	scanf(&quot;%d&quot;,&amp;k);
	cin&gt;&gt;s;
	int cnt=1;
	char pre='@';
	s=s+'@';
	for(int i=0;i&lt;s.size();i++){
		if(s[i]==pre){
			cnt++;
		}else{
			if(cnt%k!=0) surenobroken[pre]=true;
			cnt=1;
		}
		if(i&lt;s.size()-1) broken[s[i]]=(cnt%k==0);
		pre=s[i];
	}
	for(int i=0;i&lt;s.size()-1;i++){
		if(surenobroken[s[i]]==true) broken[s[i]]=false;
		if(broken[s[i]]==true&amp;&amp;hasprint[s[i]]==false){
			needprint.push_back(s[i]);
			hasprint[s[i]]=true;
		}
	}
	for(int i=0;i&lt;needprint.size();i++) cout&lt;&lt;needprint[i];
	cout&lt;&lt;endl;
    for(int i=0;i&lt;s.length()-1;i++){
    	cout&lt;&lt;s[i];
    	if(broken[s[i]]==true) i=i+k-1;
	}
	return 0;
}
</code></pre>
<h3 id="a1113小技巧水题">A1113(小技巧，水题)</h3>
<pre><code>#include&lt;cstdio&gt; 
#include&lt;algorithm&gt; 
#include&lt;vector&gt;
using namespace std;
int main(){
	int n,sum=0,halfsum=0;
	scanf(&quot;%d&quot;,&amp;n);
	vector&lt;int&gt; v(n);
	for(int i=0;i&lt;n;i++) {
		scanf(&quot;%d&quot;,&amp;v[i]);
		sum+=v[i];
	}
	sort(v.begin(),v.end());
	for(int i=0;i&lt;n/2;i++) halfsum+=v[i]; 
    printf(&quot;%d %d&quot;,n%2,sum-2*halfsum);
	return 0;
}
</code></pre>
<h3 id="a1114-并查集">A1114 并查集</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node1 {
	int id, fid, mid,  num, area;
	int cid[10];
}person[100000];
struct node2 {
	int id, members = 0;
	double num = 0, area = 0;
	bool flag = false;
}ans[100000];
bool vis[100000] = { false };
int father[100000];
int findfather(int v) {
	while (v != father[v])
		v = father[v];
	return v;
}
void Union(int a, int b) {
	int fathera = findfather(a);
	int fatherb = findfather(b);
	if (fathera &lt; fatherb) father[fatherb] = fathera;
	else father[fathera] = fatherb;
}
bool cmp(node2 a, node2 b) {
	if (a.area != b.area ) return a.area &gt; b.area;
	else return a.id &lt; b.id;
}
int main() {
	int n, k, id, cnt = 0;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; 10000; i++) father[i] = i;
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d%d%d%d&quot;, &amp;person[i].id, &amp;person[i].fid, &amp;person[i].mid, &amp;k);
		vis[person[i].id] = true;
		if (person[i].fid != -1) {
			Union(person[i].id, person[i].fid);
			vis[person[i].fid] = true;
		}

		if (person[i].mid != -1) {
			Union(person[i].id, person[i].mid);
			vis[person[i].mid] = true;
		}
		for (int j = 0; j &lt; k; j++) {
			scanf(&quot;%d&quot;, &amp;person[i].cid[j]);
			Union(person[i].id, person[i].cid[j]);
			vis[person[i].cid[j]] = true;
		}
		scanf(&quot;%d%d&quot;, &amp;person[i].num, &amp;person[i].area);
	}
	for (int i = 0; i &lt; n; i++) {
		id = findfather(person[i].id);
		ans[id].id = id;
		ans[id].num += person[i].num;
		ans[id].area += person[i].area;
		ans[id].flag = true;
	}
	for (int i = 0; i &lt; 10000; i++) {
		if (ans[i].flag) cnt++;
		if (vis[i]) ans[findfather(i)].members++;
	}
	for (int i = 0; i &lt; 10000; i++) {
		if (ans[i].flag) {
			ans[i].num = (double)(ans[i].num * 1.0 / ans[i].members);
			ans[i].area = (double)(ans[i].area * 1.0 / ans[i].members);
		}
	}
	sort(ans, ans + 10000, cmp);
	printf(&quot;%d\n&quot;, cnt);
	for (int i = 0; i &lt; cnt; i++) {
		printf(&quot;%04d %d &quot;, ans[i].id, ans[i].members);
		printf(&quot;%.3f %.3f\n&quot;, ans[i].num, ans[i].area);
	}
	return 0;
}
</code></pre>
<h3 id="a1115二叉搜索树建立与dfs">A1115(二叉搜索树建立与DFS)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
using namespace std;
struct node{
	int data;
	node*lchild,*rchild; 
};
int maxdepth=-1,num[1001]={0},n;
node* create(node*root,int v){
	if(root==NULL){
		root=new node;
		root-&gt;data=v;
		root-&gt;lchild=root-&gt;rchild=NULL;
	}
	else if(root-&gt;data&gt;=v) root-&gt;lchild=create(root-&gt;lchild,v);
	else root-&gt;rchild=create(root-&gt;rchild,v);
	return root;
}
void dfs(node*root,int depth){
	if(root==NULL){
		maxdepth=max(depth,maxdepth);
		return;
	}
	num[depth]++;
	dfs(root-&gt;lchild,depth+1);
	dfs(root-&gt;rchild,depth+1); 
}	
int main(){
	scanf(&quot;%d&quot;,&amp;n);
	vector&lt;int&gt; v(n);
	node*root=NULL;
	for(int i=0;i&lt;n;i++) {
		scanf(&quot;%d&quot;,&amp;v[i]);
		root=create(root,v[i]);
	}
	dfs(root,0);
	printf(&quot;%d + %d = %d&quot;,num[maxdepth-1],num[maxdepth-2],num[maxdepth-1]+num[maxdepth-2]);
	return 0;
}
</code></pre>
<h3 id="a1116">A1116</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cmath&gt; 
#include&lt;algorithm&gt;
using namespace std;
const int maxn=10010;
bool isprime(int n){
	if(n&lt;=1) return false;
	int sqr=sqrt(1.0*n);
	for(int i=2;i&lt;=sqr;i++){
		if(n%i==0) return false;
	}
	return true;
}
int main(){
	int id,n,k,rank[maxn],query;
	bool vis[maxn]={false};
	scanf(&quot;%d&quot;,&amp;n);
	fill(rank,rank+maxn,0);
	for(int i=1;i&lt;=n;i++){
		scanf(&quot;%d&quot;,&amp;id);
		rank[id]=i;
	}
	scanf(&quot;%d&quot;,&amp;k);
	while(k--){
		scanf(&quot;%d&quot;,&amp;query);
		if(rank[query]==0) printf(&quot;%04d: Are you kidding?\n&quot;,query);
		else{
			if(vis[query]==true) printf(&quot;%04d: Checked\n&quot;,query);
		    else{
		    	vis[query]=true;
		    	if(rank[query]==1) printf(&quot;%04d: Mystery Award\n&quot;,query);
		    	else if(isprime(rank[query])) printf(&quot;%04d: Minion\n&quot;,query);
		    	else printf(&quot;%04d: Chocolate\n&quot;,query);
			}
		}
	}
	return 0;
}
</code></pre>
<h3 id="a1117逻辑题">A1117(逻辑题)</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
int main(){
	int a[100010]={0},n,j=0;
	scanf(&quot;%d&quot;,&amp;n);
	for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,&amp;a[i]);
	sort(a,a+n,greater&lt;int&gt;());
    while(j&lt;n&amp;&amp;a[j]&gt;j+1) j++;
	printf(&quot;%d&quot;,j);
	return 0;
}
</code></pre>
<h3 id="a1118-并查集">A1118  并查集</h3>
<pre><code>#include&lt;cstdio&gt;
using namespace std;
const int maxn = 10010;
int father[maxn], cnt[maxn] = { 0 };
int findfather(int v) {
	if (father[v] == v) return v;
	else {
		int F = findfather(father[v]);
		father[v] = F;
		return F;
	}
}
void Union(int a, int b) {
	int fa = findfather(a);
	int fb = findfather(b);
	if (fa != fb) father[fa] = fb;
}
bool vis[maxn] = { false };
int main() {
	int n, k, temp, id, num = 0, sum = 0,Q;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; maxn; i++) father[i] = i;
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d%d&quot;, &amp;k, &amp;id);
		vis[id] = true;
		for(int j = 0; j &lt; k-1; j++){
			scanf(&quot;%d&quot;, &amp;temp);
			vis[temp] = true;
			Union(id, temp);
		}
	}
	for (int i = 0; i &lt; maxn; i++) {
		if (vis[i]) cnt[findfather(i)]++;
	}
	for (int i = 0; i &lt; maxn; i++) {
		if (cnt[i] != 0) {
			num++;
			sum += cnt[i];
		}
	}
	printf(&quot;%d %d\n&quot;, num, sum);
	scanf(&quot;%d&quot;, &amp;Q);
	for (int i = 0; i &lt; Q; i++){
		int q1, q2;
		scanf(&quot;%d%d&quot;, &amp;q1, &amp;q2);
		if (findfather(q1) != findfather(q2)) printf(&quot;No\n&quot;);
		else printf(&quot;Yes\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1119-30-树的前序和后序-求中序">A1119 (30 树的前序和后序 求中序)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
vector&lt;int&gt; pre, post, in;
bool unique = true;
void getin(int prel, int prer, int postl, int postr) {
	if (prel == prer) {
		in.push_back(pre[prel]);
		return;
	}
	if (pre[prel] == post[postr]) {
		int i = prel + 1;
		while (i &lt;= prer &amp;&amp; pre[i] != post[postr - 1]) i++;
		if (i - prel &gt; 1) getin(prel + 1, i - 1, postl, postl + (i - prel - 1) - 1);
		else unique = false;
		in.push_back(post[postr]);
		getin(i, prer, postl + (i - prel - 1), postr - 1);
	}
}
int main() {
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	pre.resize(n);
	post.resize(n);
	for (int i = 0; i &lt; n; i++) scanf(&quot;%d&quot;, &amp;pre[i]);
	for (int i = 0; i &lt; n; i++) scanf(&quot;%d&quot;, &amp;post[i]);
	getin(0, n - 1, 0, n - 1);
	if (unique) printf(&quot;Yes\n&quot;);
	else printf(&quot;No\n&quot;);
	printf(&quot;%d&quot;, in[0]);
	for (int i = 1; i &lt; in.size(); i++) printf(&quot; %d&quot;, in[i]);
    printf(&quot;\n&quot;);
	return 0;
}
</code></pre>
<h3 id="a1120">A1120</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;set&gt;
#include&lt;string&gt;
using namespace std;
const int maxn=10010;
int main(){
	int n,sum[maxn]={0};
	string str;
	set&lt;int&gt; ans;
	cin&gt;&gt;n;
	bool flag[maxn]={false};
	for(int i=0;i&lt;n;i++){
		cin&gt;&gt;str;
		int len=str.size();
		for(int j=0;j&lt;len;j++){
			sum[i]+=(str[j]-'0');
		}
	}
	for(int i=0;i&lt;n;i++) ans.insert(sum[i]);
	printf(&quot;%d\n&quot;,ans.size());
	for(auto it=ans.begin();it!=ans.end();it++) {
		if(it!=ans.begin()) printf(&quot; %d&quot;,*it);
		else printf(&quot;%d&quot;,*it);
	}
	return 0;
}
</code></pre>
<h3 id="a1121-25-map-set应用">A1121 (25 map、set应用)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;set&gt;
#include&lt;vector&gt;
#include&lt;map&gt;
using namespace std;
bool flag[100000] = { false };
map&lt;int, int&gt;couple;
int main() {
	int n, m, p1, p2;
	set&lt;int&gt; ans;
	vector&lt;int&gt; guests;
	scanf(&quot;%d&quot;, &amp;n);
	while (n--) {
		scanf(&quot;%d%d&quot;, &amp;p1, &amp;p2);
		couple[p1] = p2;
		couple[p2] = p1;
	}
	scanf(&quot;%d&quot;, &amp;m);
	for (int i = 0; i &lt; m; i++) {
		scanf(&quot;%d&quot;, &amp;p1);
		guests.push_back(p1);
		flag[p1] = true;
	}
	for (int i = 0; i &lt; guests.size(); i++) {
		if (couple.count(guests[i])==0||(flag[couple[guests[i]]]==false)&amp;&amp; couple.count(guests[i]) != 0) ans.insert(guests[i]);
	}
	printf(&quot;%d\n&quot;, ans.size());
	for (auto it = ans.begin(); it != ans.end(); it++) {
		if (it != ans.begin()) printf(&quot; &quot;);
		printf(&quot;%05d&quot;, *it);
	}
	return 0;
}
</code></pre>
<h3 id="a112225-哈密顿回路-set">A1122(25 哈密顿回路  set)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;set&gt;
#include&lt;vector&gt;
using namespace std;
int main() {
	int n, m, g[201][201] = { 0 }, v1, v2;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i = 0; i &lt; m; i++) {
		scanf(&quot;%d%d&quot;, &amp;v1, &amp;v2);
		g[v1][v2] = 1;
		g[v2][v1] = 1;
	}
	int k, num, temp;
	scanf(&quot;%d&quot;, &amp;k);
	for (int i = 0; i &lt; k; i++) {
		int flag1 = 1, flag2 = 1;
		scanf(&quot;%d&quot;, &amp;num);
		vector&lt;int&gt; data;
		set&lt;int&gt; path;
		for (int j = 0; j &lt; num; j++) {
			scanf(&quot;%d&quot;, &amp;temp);
			data.push_back(temp);
			path.insert(temp);
		}
		if (path.size() != n || data[0] != data[data.size() - 1] || num - 1 != n) flag1 = 0;
		for (int j = 0; j &lt; num - 1; j++) {
			if (g[data[j]][data[j + 1]] != 1) flag2 = 0;
		}
		if (flag1 &amp;&amp; flag2) printf(&quot;YES\n&quot;);
		else printf(&quot;NO\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a112330-avl-层序遍历-判断是否是完全二叉树">A1123(30 AVL 、层序遍历、判断是否是完全二叉树)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;queue&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node {
	int data, height;
	node* lchild, * rchild;
};
node* newnode(int v) {
	node* Node = new node;
	Node-&gt;data = v;
	Node-&gt;height = 1;
	Node-&gt;lchild = Node-&gt;rchild = NULL;
	return Node;
}
int getheight(node* root) {
	if (root == NULL) return 0;
	else return root-&gt;height;
}
int getbalance(node* root) {
	return getheight(root-&gt;lchild) - getheight(root-&gt;rchild);
}
void updateheight(node* root) {
	root-&gt;height = max(getheight(root-&gt;lchild), getheight(root-&gt;rchild)) + 1;
}
void L(node*&amp; root) {
	node* temp = root-&gt;rchild;
	root-&gt;rchild = temp-&gt;lchild;
	temp-&gt;lchild = root;
	updateheight(root);
	updateheight(temp);
	root = temp;
}
void R(node*&amp; root) {
	node* temp = root-&gt;lchild;
	root-&gt;lchild = temp-&gt;rchild;
	temp-&gt;rchild = root;
	updateheight(root);
	updateheight(temp);
	root = temp;
}
void insert(node*&amp; root, int v) {
	if (root == NULL) {
		root = newnode(v);
		return;
	}
	if (root-&gt;data &gt; v) {
		insert(root-&gt;lchild, v);
		updateheight(root);
		if (getbalance(root) == 2) {
			if (getbalance(root-&gt;lchild) == 1) {
				R(root);
			}
			else if (getbalance(root-&gt;lchild) == -1) {
				L(root-&gt;lchild);
				R(root);
			}
		}
	}
	else {
		insert(root-&gt;rchild, v);
		updateheight(root);
		if (getbalance(root) == -2) {
			if (getbalance(root-&gt;rchild) == -1) {
				L(root);
			}
			else if (getbalance(root-&gt;rchild) == 1) {
				R(root-&gt;rchild);
				L(root);
			}
		}
	}
}
int iscomplete = 1, after = 0;
vector&lt;int&gt; levelorder(node* root) {
	queue&lt;node*&gt; q;
	vector&lt;int&gt; v;
	q.push(root);
	while (!q.empty()) {
		node* temp = q.front();
		q.pop();
		v.push_back(temp-&gt;data);
		if (temp-&gt;lchild != NULL) {
			if (after) iscomplete = 0;
			q.push(temp-&gt;lchild);
		}
		else after = 1;
		if (temp-&gt;rchild != NULL) {
			if (after) iscomplete = 0;
			q.push(temp-&gt;rchild);
		}
		else after = 1;
	}
	return v;
}
int main() {
	int n, temp;
	scanf(&quot;%d&quot;, &amp;n);
	node* root = NULL;
	vector&lt;int&gt; ans;
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;temp);
		insert(root, temp);
	}
	ans = levelorder(root);
	for (int i = 0; i &lt; ans.size(); i++) {
		if (i != 0) printf(&quot; &quot;);
		printf(&quot;%d&quot;, ans[i]);
	}
	printf(&quot;\n&quot;);
	if (iscomplete) printf(&quot;YES&quot;);
	else printf(&quot;NO&quot;);
	return 0;
}
</code></pre>
<h3 id="a1124-20-逻辑题">A1124  20 逻辑题</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
#include&lt;map&gt;
#include&lt;vector&gt;
using namespace std;
int main() {
	int m,n,s;
	string temp;
	cin&gt;&gt;m&gt;&gt;n&gt;&gt;s;
	vector&lt;string&gt; follower(m+1),ans;
	map&lt;string,bool&gt; exist;
	for (int i = 1; i &lt;= m; i++) {
		cin &gt;&gt; temp;
		follower[i] = temp;
	}
	while (s &lt;= m) {
		if (exist.count(follower[s]) == 0) {
			exist[follower[s]] = true;
			ans.push_back(follower[s]);
			s += n;
		}
		else s += 1;
	}
	if (ans.size() == 0) printf(&quot;Keep going...&quot;);
	else {
		for (int i = 0; i &lt; ans.size(); i++)
			cout &lt;&lt; ans[i] &lt;&lt; endl;
	}
	return 0;
}
</code></pre>
<h3 id="a112525-贪心-排序">A1125(25 贪心 排序)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
int main() {
	vector&lt;int&gt; v;
	int n, temp, ans = 0;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;temp);
		v.push_back(temp);
	}
	sort(v.begin(), v.end());
	ans = v[0];
	for (int i = 1; i &lt; v.size(); i++) ans = (ans + v[i] )/ 2;
	printf(&quot;%d&quot;, ans);
	return 0;
}
</code></pre>
<h3 id="a1126">A1126</h3>
<pre><code>#include&lt;vector&gt;
#include&lt;cstdio&gt;
using namespace std;
const int maxn = 520;
bool vis[maxn] = { false };
vector&lt;vector&lt;int&gt; &gt; g;
int cnt = 0;
void dfs(int index) {
	vis[index] = true;
	cnt++;
	for (int i = 0; i &lt; g[index].size(); i++) {
		if (vis[g[index][i]] == false) {
			dfs(g[index][i]);
		}
	}
}
int main() {
	int n, m, a, b, even = 0, odd = 0;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	g.resize(n + 1);
	for (int i = 1; i &lt;= m; i++) {
		scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
		g[a].push_back(b);
		g[b].push_back(a);
	}
	dfs(1);
	for (int i = 1; i &lt;= n; i++) {
		printf(&quot;%d&quot;, g[i].size());
		if (i &lt; n) printf(&quot; &quot;);
		else printf(&quot;\n&quot;);
		if (g[i].size() % 2 == 0) even++;
		else odd++;
	}
	if (cnt == n &amp;&amp; even == n) printf(&quot;Eulerian&quot;);
	else if (cnt == n &amp;&amp; even == n - 2 &amp;&amp; odd == 2) printf(&quot;Semi-Eulerian&quot;);
	else printf(&quot;Non-Eulerian&quot;);
	return 0;
}
</code></pre>
<h3 id="a112730-中序后序建树dfs输出z字形层序遍历">A1127(30 中序后序建树，dfs，输出z字形层序遍历)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;queue&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node {
	int v;
	node* lchild, * rchild;
};
vector&lt;int&gt; in, post;
vector&lt;int&gt;ans[31];
node* create(int inl, int inr, int postl, int postr) {
	if (inl &gt; inr) return NULL;
	node* root = new node;
	root-&gt;v = post[postr];
	int i=inl;
	while (in[i] != post[postr]) i++;
	int leafnum = i - inl;
	root-&gt;lchild = create(inl, i - 1, postl, postl + leafnum - 1);
	root-&gt;rchild = create(i + 1, inr, postl + leafnum, postr - 1);
	return root;
}
int maxdepth = -1;
void dfs(node* root,int depth) {
	if (root == NULL) return;
	maxdepth = max(depth, maxdepth);
	ans[depth].push_back(root-&gt;v);
	dfs(root-&gt;lchild, depth + 1);
	dfs(root-&gt;rchild, depth + 1);
}int main() {
	int n;
	scanf_s(&quot;%d&quot;, &amp;n);
	in.resize(n), post.resize(n);
	for (int i = 0; i &lt; n; i++) scanf_s(&quot;%d&quot;, &amp;in[i]);
	for (int i = 0; i &lt; n; i++) scanf_s(&quot;%d&quot;, &amp;post[i]);
	node* root = NULL;
	root = create(0, n - 1, 0, n - 1);
	dfs(root, 0);
	printf(&quot;%d&quot;, ans[0][0]);
	for (int i = 1; i &lt;= maxdepth; i++) {
		if (i % 2 == 1) {
			for (int j = 0; j &lt; ans[i].size(); j++) printf(&quot; %d&quot;, ans[i][j]);
		}
		else {
			for (int j = ans[i].size()-1; j &gt;=0; j--) printf(&quot; %d&quot;, ans[i][j]);
		}
	}
	return 0;
}
</code></pre>
<h3 id="a112820-n皇后问题">A1128(20  n皇后问题)</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
int main() {
	int k, n;
	cin &gt;&gt; k;
	while (k--) {
		cin &gt;&gt; n;
		vector&lt;int&gt; v(n);
		bool flag = true;
		for (int i = 0; i &lt; n; i++) {
			cin &gt;&gt; v[i];
			for (int j = 0; j &lt; i; j++) {
				if (v[i] == v[j] || abs(v[i] - v[j]) == abs(i - j)){
           flag = false;
           break;
        } 
			}
		}
		if (flag) cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;
		else cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;
	}
	return 0;
}
</code></pre>
<h3 id="a1129-25-set的应用-结构体内运算符重载">A1129 (25 set的应用 结构体内运算符重载)</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;set&gt;
using namespace std;
struct node {
	int id;
	int freq;
	bool operator &lt; (const node&amp; a) const {
		return (freq != a.freq) ? freq &gt; a.freq:id &lt; a.id;
	}
};
int book[50001] = { 0 };
int main() {
	int n, k, id;
	cin &gt;&gt; n &gt;&gt; k;
	set&lt;node&gt; s;
	for (int i = 0; i &lt; n; i++) {
		cin &gt;&gt; id;
		if (i != 0) {
			cout &lt;&lt; id &lt;&lt; &quot;:&quot;;
			int cnt = 0;
			for (auto it = s.begin(); cnt &lt; k &amp;&amp; it != s.end(); it++) {
				cout &lt;&lt; &quot; &quot; &lt;&lt; it-&gt;id;
				cnt++;
			}
			cout &lt;&lt; endl;
		}
		auto it = s.find(node{ id,book[id] });
		if (it != s.end())s.erase(it);//如果能找到，就移除
		book[id]++;
		s.insert(node{ id,book[id] });
	}
	return 0;
}
</code></pre>
<h3 id="a1130dfs二叉树-输出中缀表达式">A1130(dfs二叉树 输出中缀表达式)</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
struct node {
	string data;
	int l, r;
}tree[25];
string dfs(int root) {
	if (tree[root].l == -1 &amp;&amp; tree[root].r == -1) return tree[root].data;
	else if (tree[root].l == -1 &amp;&amp; tree[root].r != -1) return &quot;(&quot; + tree[root].data + dfs(tree[root].r) + &quot;)&quot;;
	else if (tree[root].l != -1 &amp;&amp; tree[root].r != -1) return &quot;(&quot; + dfs(tree[root].l) + tree[root].data + dfs(tree[root].r) + &quot;)&quot;;
}
int main() {
	int n, have[25] = { 0 }, root = 1;
	cin &gt;&gt; n;
	for (int i = 1; i &lt;= n; i++) {
		cin &gt;&gt; tree[i].data &gt;&gt; tree[i].l &gt;&gt; tree[i].r;
		have[tree[i].l] = 1;
		have[tree[i].r] = 1;
	}
	while (have[root] == 1) root++;
	string ans = dfs(root);
	if (ans[0] == '(') ans = ans.substr(1, ans.length() - 2);
	cout &lt;&lt; ans;
	return 0;
}
</code></pre>
<h3 id="a113130-dfs-unordered_map邻接矩阵-难题">A1131(30 DFS 、unordered_map邻接矩阵、 难题  )</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;unordered_map&gt;
using namespace std;
vector&lt;vector&lt;int&gt; &gt; v(10000);
int visit[10000] = { 0 }, mincnt, mintransfer, st, ed;
unordered_map&lt;int, int&gt; line;
vector&lt;int&gt; path, temppath;
int transfercnt(vector&lt;int&gt; a) {
	int cnt = -1, preline = 0;
	for (int i = 1; i &lt; a.size(); i++) {
		if (line[a[i - 1] * 10000 + a[i]] != preline) cnt++;
		preline = line[a[i - 1] * 10000 + a[i]];
	}
	return cnt;
}
void dfs(int node, int cnt) {
	if (node == ed &amp;&amp; (cnt &lt; mincnt || (cnt == mincnt &amp;&amp; transfercnt(temppath) &lt; mintransfer))) {
		mincnt = cnt;
		mintransfer = transfercnt(temppath);
		path = temppath;
    return;
	}
	for (int i = 0; i &lt; v[node].size(); i++) {
		if (visit[v[node][i]] == 0) {
			visit[v[node][i]] = 1;
			temppath.push_back(v[node][i]);
			dfs(v[node][i], cnt + 1);
			visit[v[node][i]] = 0;
			temppath.pop_back();
		}
	}
}
int main() {
	int n, m, pre, temp, k;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 1; i &lt;= n; i++) {
		scanf(&quot;%d%d&quot;, &amp;m, &amp;pre);
		for (int j = 1; j &lt; m; j++) {
			scanf(&quot;%d&quot;, &amp;temp);
			v[pre].push_back(temp);
			v[temp].push_back(pre);
			line[pre * 10000 + temp]=line[temp*10000+pre] = i;
			pre = temp;
		}
	}
	scanf(&quot;%d&quot;, &amp;k);
	while (k--) {
		mintransfer = mincnt = 1000000000;
		scanf(&quot;%d%d&quot;, &amp;st, &amp;ed);
		temppath.clear();
		temppath.push_back(st);
		visit[st] = 1;
		dfs(st, 0);
		visit[st] = 0;
		printf(&quot;%d\n&quot;, mincnt);
		int preline = 0, pretransfer = st;
		for (int i = 1; i &lt; path.size(); i++) {
			if (line[path[i - 1] * 10000 + path[i]] != preline) {
				if (preline != 0) printf(&quot;Take Line#%d from %04d to %04d.\n&quot;, preline, pretransfer, path[i - 1]);
				preline = line[path[i - 1] * 10000 + path[i]];
				pretransfer = path[i - 1];
			}
		}
		printf(&quot;Take Line#%d from %04d to %04d.\n&quot;, preline, pretransfer, ed);
	}
	return 0;
}
</code></pre>
<h3 id="a113220-字符串-水题">A1132(20 字符串 水题)</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;string&gt;
using namespace std;
int main() {
	string s, s1, s2;
	int n, len;
	cin &gt;&gt; n;
	while (n--) {
		cin &gt;&gt; s;
		len = s.size();
		s1 = s.substr(0, len / 2);
		s2 = s.substr(len / 2, len / 2);
		if (stoi(s1) == 0 || stoi(s2) == 0) cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;
		else if (stoi(s) % (stoi(s1) * stoi(s2)) == 0) cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;
		else cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;
	}
	return 0;
}
</code></pre>
<h3 id="a1133链表-重新排列">A1133(链表  重新排列)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
struct node {
	int id, data, next;
};
vector&lt;node&gt; v, ans;
int main() {
	node a[100010];
	int begin, n, k;
	int id, data, next;
	scanf(&quot;%d%d%d&quot;, &amp;begin, &amp;n, &amp;k);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d%d%d&quot;, &amp;id, &amp;data, &amp;next);
		a[id] = { id,data,next };
	}
	for (; begin != -1; begin = a[begin].next) v.push_back(a[begin]);
	for (int i = 0; i &lt; v.size(); i++) {
		if (v[i].data &lt; 0) ans.push_back(v[i]);
	}
	for (int i = 0; i &lt; v.size(); i++) {
		if (v[i].data &gt;= 0 &amp;&amp; v[i].data &lt;= k) ans.push_back(v[i]);
	}
	for (int i = 0; i &lt; v.size(); i++) {
		if (v[i].data &gt; k) ans.push_back(v[i]);
	}
	for (int i = 0; i &lt; ans.size() - 1; i++) {
		printf(&quot;%05d %d %05d\n&quot;, ans[i].id, ans[i].data, ans[i + 1].id);
	}
	printf(&quot;%05d %d -1&quot;, ans[ans.size() - 1].id, ans[ans.size() - 1].data);
	return 0;
}
</code></pre>
<h3 id="a1134图-结点与边的问题">A1134(图  结点与边的问题)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
int main() {
	int n, m, v1, v2, k, nv;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	vector&lt;int&gt; v[10010];
	for (int i = 0; i &lt; m; i++) {
		scanf(&quot;%d%d&quot;, &amp;v1, &amp;v2);
		v[v1].push_back(i);
		v[v2].push_back(i);
	}
	scanf(&quot;%d&quot;, &amp;k);
	for (int i = 0; i &lt; k; i++) {
		scanf(&quot;%d&quot;, &amp;nv);
		bool flag[10010] = { false };
		int temp, j;
		for (int j = 0; j &lt; nv; j++) {
			scanf(&quot;%d&quot;, &amp;temp);
			for (int x = 0; x &lt; v[temp].size(); x++) flag[v[temp][x]] = true;
		}
		for (j = 0; j &lt; m; j++) {
			if (flag[j] == false) {
				printf(&quot;No\n&quot;);
				break;
			}
		}
		if(j==m) printf(&quot;Yes\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a113530-判断红黑树-递归判断">A1135(30 判断红黑树 递归判断)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;cmath&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node{
	int v;
	node* lchild,*rchild;
};
node*create(node*root,int x){
	if(root==NULL) {
		root=new node;
		root-&gt;v=x;
		root-&gt;lchild=root-&gt;rchild=NULL;
	}
	else if(abs(root-&gt;v)&gt;abs(x)) root-&gt;lchild=create(root-&gt;lchild,x);
	else if(abs(root-&gt;v)&lt;=abs(x)) root-&gt;rchild=create(root-&gt;rchild,x);
	return root;
}
bool judge1(node*root){
	if(root==NULL) return true;
	if(root-&gt;v&lt;0){
		if(root-&gt;lchild!=NULL&amp;&amp;root-&gt;lchild-&gt;v&lt;0) return false;
		if(root-&gt;rchild!=NULL&amp;&amp;root-&gt;rchild-&gt;v&lt;0) return false;
	}
	return judge1(root-&gt;lchild)&amp;&amp;judge1(root-&gt;rchild);
}
int getblacknum(node*root){
	if(root==NULL) return 0;
	int l=getblacknum(root-&gt;lchild);
	int r=getblacknum(root-&gt;rchild);
	return root-&gt;v&gt;0?max(l,r)+1:max(l,r);
}
bool judge2(node*root){
	if(root==NULL) return true;
	int l=getblacknum(root-&gt;lchild);
	int r=getblacknum(root-&gt;rchild);
	if(l!=r) return false;
	return judge2(root-&gt;lchild)&amp;&amp;judge2(root-&gt;rchild);
}
int main(){
	int k,n;
	scanf(&quot;%d&quot;,&amp;k);
	while(k--){
		scanf(&quot;%d&quot;,&amp;n);
		vector&lt;int&gt; tree(n);
		node*root=NULL;
		for(int i=0;i&lt;n;i++){
			scanf(&quot;%d&quot;,&amp;tree[i]);
			root=create(root,tree[i]);
		}
		if(tree[0]&gt;0&amp;&amp;judge1(root)&amp;&amp;judge2(root)) printf(&quot;Yes\n&quot;);
		else printf(&quot;No\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1136-20-回文串-字符串">A1136 (20 回文串 字符串)</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#include&lt;string&gt;
using namespace std;
string add(string s1, string s2) {
	string s = s1;
	int carry = 0;
	for (int i = s1.size() - 1; i &gt;= 0; i--) {
		s[i] = ((s1[i] - '0') + (s2[i] - '0') + carry) % 10 + '0';
		carry = ((s1[i] - '0') + (s2[i] - '0') + carry) / 10;
	}
	if (carry &gt; 0) s = '1' + s;
	return s;
}
int main() {
	int n = 10;
	string origin, ans, ansv,rev;
	cin &gt;&gt; origin;
	rev = origin;
	reverse(rev.begin(), rev.end());
	if (origin == rev) {
		cout &lt;&lt; rev &lt;&lt; &quot; is a palindromic number.&quot;;
		return 0;
	}
	while (n--) {
		rev = origin;
		reverse(rev.begin(), rev.end());
		ans = add(origin, rev);
		ansv = ans;
		reverse(ansv.begin(), ansv.end());
		cout &lt;&lt; origin &lt;&lt; &quot; + &quot; &lt;&lt; rev &lt;&lt; &quot; = &quot; &lt;&lt; ans &lt;&lt; endl;
		if (ansv != ans) origin = ans;
		else {
			cout &lt;&lt; ans &lt;&lt; &quot; is a palindromic number.&quot;;
			return 0;
		}
	}
	cout &lt;&lt; &quot;Not found in 10 iterations.&quot;;
	return 0;
}
</code></pre>
<h3 id="a113725-map-排序">A1137(25 map 排序)</h3>
<pre><code>#include&lt;map&gt;
#include&lt;string&gt;
#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node{
	string s;
	int gp,gm,gf,g; 
};
bool cmp(const node &amp;a,const node &amp;b){
	return a.g!=b.g? a.g&gt;b.g : a.s&lt;b.s;
}
map&lt;string,int&gt; mp;
int main(){
	vector&lt;node&gt;v,ans;
	int p,m,n,score,cnt=0;
	cin&gt;&gt;p&gt;&gt;m&gt;&gt;n;
	string stuid;
	for(int i=0;i&lt;p;i++){
		cin&gt;&gt;stuid&gt;&gt;score;
		if(score&gt;=200){
			v.push_back(node{stuid,score,-1,-1,-1});
			mp[stuid]=cnt++;
		}
	}
	for(int i=0;i&lt;m;i++){
		cin&gt;&gt;stuid&gt;&gt;score;
		if(mp.count(stuid)!=0) v[mp[stuid]].gm=score; 
	}
	for(int i=0;i&lt;n;i++){
		cin&gt;&gt;stuid&gt;&gt;score;
		if(mp.count(stuid)!=0) v[mp[stuid]].gf=v[mp[stuid]].g=score;
		if(v[mp[stuid]].gf&lt;v[mp[stuid]].gm) v[mp[stuid]].g=(int)(v[mp[stuid]].gm*0.4+v[mp[stuid]].gf*0.6+0.5);
	}
	for(int i=0;i&lt;v.size();i++){
		if(v[i].g&gt;=60) ans.push_back(v[i]);
	}
	sort(ans.begin(),ans.end(),cmp);
	for(int i=0;i&lt;ans.size();i++) 
	    printf(&quot;%s %d %d %d %d\n&quot;,ans[i].s.c_str(),ans[i].gp,ans[i].gm,ans[i].gf,ans[i].g);
	return 0;
}
</code></pre>
<h3 id="a113930-逻辑题-unordered_map">A1139(30 逻辑题 unordered_map)</h3>
<pre><code>#include&lt;unordered_map&gt;
#include&lt;vector&gt;
#include&lt;string&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
struct node{
	int a,b;
};
bool cmp(const node &amp;i,const node &amp;j){
	return i.a!=j.a? i.a&lt;j.a : i.b&lt;j.b;
}
unordered_map&lt;int ,bool&gt; isfri;
int main(){
	int n,m,k,c,d;
	cin&gt;&gt;n&gt;&gt;m;
	string a,b;
	vector&lt;int&gt; v[10000];
	for(int i=0;i&lt;m;i++){
		cin&gt;&gt;a&gt;&gt;b;
		if(a.length()==b.length()) {
			v[abs(stoi(a))].push_back(abs(stoi(b)));
			v[abs(stoi(b))].push_back(abs(stoi(a)));
		}
isfri[abs(stoi(a))*10000+abs(stoi(b))]=isfri[abs(stoi(b))*10000+abs(stoi(a))]=true;
	}
	cin&gt;&gt;k;
	while(k--){
		vector&lt;node&gt; ans;
		cin&gt;&gt;c&gt;&gt;d;
		for(int i=0;i&lt;v[abs(c)].size();i++){
			for(int j=0;j&lt;v[abs(d)].size();j++){
				if(v[abs(c)][i]==abs(d)||v[abs(d)][j]==abs(c)) continue;
				if(isfri[v[abs(c)][i]*10000+v[abs(d)][j]]==true) ans.push_back(node{v[abs(c)][i],v[abs(d)][j]});
			}
		}
		sort(ans.begin(),ans.end(),cmp);
		cout&lt;&lt;ans.size()&lt;&lt;endl;
		for(int i=0;i&lt;ans.size();i++) printf(&quot;%04d %04d\n&quot;,ans[i].a,ans[i].b);
	}
	return 0;
}
</code></pre>
<h3 id="a1140">A1140</h3>
<pre><code>#include&lt;iostream&gt; 
#include&lt;string&gt;
using namespace std;
int main(){
	string s;
	int n,j;
	cin&gt;&gt;s&gt;&gt;n;
	for(int x=1;x&lt;n;x++){
       string ans;
       for(int i=0;i&lt;s.length();i=j){
       	for(j=i;j&lt;s.length()&amp;&amp;s[j]==s[i];j++);
       	ans+=s[i]+to_string(j-i);
	   }
	   s=ans;
	}
	cout&lt;&lt;s;
	return 0;
} 
</code></pre>
<h3 id="a1141">A1141</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;iostream&gt; 
#include&lt;map&gt;
#include&lt;cctype&gt;
#include&lt;string&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=100010;
struct node{
	string name;
	double totalscore;
	int num;
}school[maxn];
bool cmp(node a,node b){
	if((int)a.totalscore!=(int)b.totalscore) return (int)a.totalscore&gt;(int)b.totalscore;
	else if(a.num!=b.num) return a.num&lt;b.num;
	else return a.name&lt;b.name;
}
map&lt;string,int&gt; s;
int main(){
	int n,num=0;
	double score;
	string id,schoolname;
	scanf(&quot;%d&quot;,&amp;n);
	for(int i=0;i&lt;maxn;i++){
		school[i].totalscore=0;
		school[i].num=0;
	}
	for(int i=0;i&lt;n;i++){
		cin&gt;&gt;id&gt;&gt;score&gt;&gt;schoolname;
		for(int j=0;j&lt;schoolname.size();j++){
			if(isupper(schoolname[j])) schoolname[j]+=32;
		}
		if(s.count(schoolname)==0){
			s[schoolname]=num;
			school[s[schoolname]].name=schoolname;
			num++;
		}
		if(id[0]=='B') score=score/1.5;
		if(id[0]=='T') score=score*1.5;
		school[s[schoolname]].totalscore+=score;
		school[s[schoolname]].num++;
	}
	cout&lt;&lt;num&lt;&lt;endl;
	sort(school,school+num,cmp);
	int r=1;
	printf(&quot;%d %s %d %d\n&quot;,r,school[0].name.c_str(),(int)school[0].totalscore,school[0].num);
	for(int i=1;i&lt;num;i++){
		if((int)school[i].totalscore!=(int)school[i-1].totalscore) r=i+1;
		printf(&quot;%d %s %d %d\n&quot;,r,school[i].name.c_str(),(int)school[i].totalscore,school[i].num);
	}
	return 0;
}
</code></pre>
<h3 id="a114225-无向完全图-最大子图-两点相连">A1142(25 无向完全图 最大子图  两点相连)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
int main(){
	int g[210][210]={0};
	int nv,ne,v1,v2,k,n;
	scanf(&quot;%d%d&quot;,&amp;nv,&amp;ne);
	for(int i=0;i&lt;ne;i++){
		scanf(&quot;%d%d&quot;,&amp;v1,&amp;v2);
		g[v1][v2]=1;
		g[v2][v1]=1;
	}
	scanf(&quot;%d&quot;,&amp;k);
	while(k--){
		int hash[nv+1]={0};
		int ismax=1,iscli=1;
		scanf(&quot;%d&quot;,&amp;n);
		vector&lt;int&gt; v(n);
		for(int i=0;i&lt;n;i++){
			scanf(&quot;%d&quot;,&amp;v[i]);
			hash[v[i]]=1;
		}
		for(int i=0;i&lt;n-1;i++){
			for(int j=i+1;j&lt;n;j++){
				if(g[v[i]][v[j]]==0)
				iscli=0;
				break;
			}
		}
		if(iscli==0) {
			printf(&quot;Not a Clique\n&quot;);
			continue;
		}
		for(int i=1;i&lt;=nv;i++){
			if(hash[i]==0){
				for(int j=0;j&lt;n;j++){
					if(g[v[j]][i]==0) break;
					if(j==n-1) ismax=0;
				}
			}
		}
		if(iscli==1&amp;&amp;ismax==1) printf(&quot;Yes\n&quot;);
		else if(iscli==1&amp;&amp;ismax==0) printf(&quot;Not Maximal\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1143">A1143</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;map&gt;
using namespace std;
const int maxn = 10010;
map&lt;int, bool&gt; node;
int main() {
	int m, n, v, u, a;
	scanf(&quot;%d%d&quot;, &amp;m, &amp;n);
	vector&lt;int&gt; pre(n);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d&quot;, &amp;pre[i]);
		node[pre[i]] = true;
	}
	for (int i = 0; i &lt; m; i++) {
		scanf(&quot;%d%d&quot;, &amp;u, &amp;v);
		for (int j = 0; j &lt; n; j++) {
			a = pre[j];
			if ((a &gt;= u &amp;&amp; a &lt;= v) || (a &lt;= u &amp;&amp; a &gt;= v)) break;
		}
		if (node.count(u) == 0 &amp;&amp; node.count(v) == 0) printf(&quot;ERROR: %d and %d are not found.\n&quot;, u, v);
		else if (node.count(u) == 0 || node.count(v) == 0) printf(&quot;ERROR: %d is not found.\n&quot;, node.count(u) == 0?u:v);
		else if ((a &lt; u &amp;&amp; a &gt; v) || (a &gt; u &amp;&amp; a &lt; v)) printf(&quot;LCA of %d and %d is %d.\n&quot;, u, v, a);
		else if (a == v || a == u) printf(&quot;%d is an ancestor of %d.\n&quot;, a, a == v ? u : v);
	}
	return 0;
}
</code></pre>
<h3 id="a114525-hash-平方探查">A1145(25 hash 平方探查)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;cmath&gt;
using namespace std;
bool isprime(int x){
	int sqr=sqrt(1.0*x);
	for(int i=2;i&lt;=sqr;i++){
		if(x%i==0) return false;
	}
	return true;
}
int main(){
	int msize,n,m,a;
	scanf(&quot;%d%d%d&quot;,&amp;msize,&amp;n,&amp;m);
	while(!isprime(msize)) msize++;
	vector&lt;int&gt; v(msize);
	for(int i=0;i&lt;n;i++){
		scanf(&quot;%d&quot;,&amp;a);
		int flag=0;
		for(int j=0;j&lt;msize;j++){
			int pos=(a+j*j)%msize;
			if(v[pos]==0){
				flag=1;
				v[pos]=a;
				break;
			}
		}
		if(flag==0) printf(&quot;%d cannot be inserted.\n&quot;,a);
	}
	int cnt=0,temp;
	for(int i=0;i&lt;m;i++){
		scanf(&quot;%d&quot;,&amp;temp);
		for(int j=0;j&lt;=msize;j++){//注意这里的&lt;=，因为要回到初始的位置才知道是否能插入
			cnt++;
			if(v[(temp+j*j)%msize]==temp||v[(temp+j*j)%msize]==0) break;
		}
	}
	printf(&quot;%.1f&quot;,cnt*1.0/m);
    return 0;
}
</code></pre>
<h3 id="a1144">A1144</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;map&gt;
using namespace std;
int main(){
    int n,temp,num=0;
    map&lt;int,int&gt; s;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=0;i&lt;n;i++) {
        scanf(&quot;%d&quot;,&amp;temp);
        s[temp]++;
    }
    while(++num){
        if(s.count(num)==0){
            printf(&quot;%d&quot;,num);
            break;
        }
    }
    return 0;
}
</code></pre>
<h3 id="a1146判断是否为拓扑排序序列">A1146(判断是否为拓扑排序序列 )</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
int main() {
	int a, b, flag = 0, in[1010] = { 0 }, n, m, k;
	vector&lt;int&gt; v[1010];
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for (int i = 0; i &lt; m; i++) {
		scanf(&quot;%d%d&quot;, &amp;a, &amp;b);
		v[a].push_back(b);
		in[b]++;
	}
	scanf(&quot;%d&quot;, &amp;k);
	for (int i = 0; i &lt; k; i++) {
		int judge = 1;
		vector&lt;int&gt; query(in, in + n + 1);
		for (int j = 0; j &lt; n; j++) {
			scanf(&quot;%d&quot;, &amp;a);
			if (query[a] != 0) judge = 0;
			for (int x = 0; x &lt; v[a].size(); x++) query[v[a][x]]--;
		}
    if(judge==1) continue;
		else if (flag == 1 &amp;&amp; judge == 0) printf(&quot; %d&quot;, i);
		else if (flag == 0 &amp;&amp; judge == 0) printf(&quot;%d&quot;, i);
		flag = 1;
	}
	return 0;
}
</code></pre>
<h3 id="a114730-判断大顶堆小顶堆-后序遍历">A1147(30  判断大顶堆小顶堆 后序遍历)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
int m, n, num = 0;
vector&lt;int&gt;v;
void dfs(int index) {//后序遍历
	if (index &gt; n) return;
	dfs(index * 2);
	dfs(index * 2 + 1);
	printf(&quot;%d&quot;, v[index]);
	if (num &lt; n - 1)printf(&quot; &quot;);
	num++;
}
int main() {
	scanf_s(&quot;%d%d&quot;, &amp;m, &amp;n);
	while (m--) {
		v.resize(n+1);
		bool flagmin = true, flagmax = true;
		for (int i = 1; i &lt;= n; i++) scanf_s(&quot;%d&quot;, &amp;v[i]);
		for (int i = 2; i &lt;= n; i++) {
			if (v[i] &gt;= v[i / 2]) flagmax = false;
			if (v[i] &lt;= v[i / 2]) flagmin = false;
		}
		if (flagmin) printf(&quot;Min Heap\n&quot;);
		else if (flagmax) printf(&quot;Max Heap\n&quot;);
		else if (flagmax == false &amp;&amp; flagmin == false) printf(&quot;Not Heap\n&quot;);
		dfs(1);
		num = 0;
		printf(&quot;\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a1148狼人杀-找到两个狼人">A1148(狼人杀 找到两个狼人)</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
int main(){
	int n;
	cin&gt;&gt;n;
	vector&lt;int&gt; v(n+1);
	for(int i=1;i&lt;=n;i++) cin&gt;&gt;v[i];
	for(int i=1;i&lt;=n;i++){
		for(int j=i+1;j&lt;=n;j++){
			vector&lt;int&gt; lie,a(n+1,1);
			a[i]=a[j]=-1;
			for(int k=1;k&lt;=n;k++){
				if(v[k]*a[abs(v[k])]&lt;0) lie.push_back(k);
			}
			if(lie.size()==2&amp;&amp;(a[lie[0]]+a[lie[1]])==0){
				cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j;
				return 0;
			}
		}
	}
	cout&lt;&lt;&quot;No Solution&quot;;
	return 0;
}
</code></pre>
<h3 id="a1149">A1149</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;map&gt;
#include&lt;vector&gt;
using namespace std;
map&lt;int, vector&lt;int&gt; &gt;danger;
int main() {
	int n, m, k, d1, d2;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	vector&lt;int&gt; G(n + 1);
	for (int i = 0; i &lt; n; i++) {
		scanf(&quot;%d%d&quot;, &amp;d1, &amp;d2);
		danger[d1].push_back(d2);
		danger[d2].push_back(d1);
	}
	for (int i = 0; i &lt; m; i++) {
		bool flag = false;
        vector&lt;int&gt; G(n + 1);
		int exist[100000] = { 0 };
		scanf(&quot;%d&quot;, &amp;k);
		for (int j = 0; j &lt; k; j++) {
			scanf(&quot;%d&quot;, &amp;G[j]);
			exist[G[j]] = 1;
		}
		for (int j = 0; j &lt; k; j++) {
			for (int p = 0; p &lt; danger[G[j]].size(); p++) {
				if (exist[danger[G[j]][p]] == 1) flag = true;
			}
		}
		if (flag == false) printf(&quot;Yes\n&quot;);
		else printf(&quot;No\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a115025-判断循环图-输出最小路径">A1150(25 判断循环图 输出最小路径)</h3>
<pre><code>#include&lt;vector&gt;
#include&lt;cstdio&gt;
#include&lt;set&gt;
using namespace std;
int main(){
	int n,m,k,mindis=1000000000,ansid;
	int g[210][210]={0};
	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
	for(int i=0;i&lt;m;i++){
		int v1,v2,d;
		scanf(&quot;%d%d%d&quot;,&amp;v1,&amp;v2,&amp;d);
		g[v1][v2]=d;
		g[v2][v1]=d;
	}
	scanf(&quot;%d&quot;,&amp;k);
	for(int y=1;y&lt;=k;y++){
		int cnt,flag=1,index,sum=0;
		scanf(&quot;%d&quot;,&amp;cnt);
		set&lt;int&gt;s;
		vector&lt;int&gt; v(cnt);
		for(int i=0;i&lt;cnt;i++){
			scanf(&quot;%d&quot;,&amp;v[i]);
			s.insert(v[i]);
		} 
		for(int i=0;i&lt;cnt-1;i++){
			if(g[v[i]][v[i+1]]==0) flag=0;
			sum+=g[v[i]][v[i+1]];
		}
		if(flag==0) printf(&quot;Path %d: NA (Not a TS cycle)\n&quot;,y);
		else if(v[0]!=v[cnt-1]||s.size()!=n) printf(&quot;Path %d: %d (Not a TS cycle)\n&quot;,y,sum);
		else if(cnt!=n+1){
			if(sum&lt;mindis){
				mindis=sum;
				ansid=y;
			}
			printf(&quot;Path %d: %d (TS cycle)\n&quot;,y,sum);
		}else{
			if(sum&lt;mindis){
				mindis=sum;
				ansid=y;
			}
			printf(&quot;Path %d: %d (TS simple cycle)\n&quot;,y,sum);
		}
	}
	printf(&quot;Shortest Dist(%d) = %d&quot;,ansid,mindis);
	return 0;
}
</code></pre>
<h3 id="a1151">A1151</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;map&gt;
#include&lt;vector&gt;
using namespace std;
const int maxn=10010;
map&lt;int,int&gt; pos;
vector&lt;int&gt; ins,pre;
void lca(int inl,int inr,int preroot,int a,int b){
	if(inl&gt;inr) return;
	int inroot=pos[pre[preroot]],ain=pos[a],bin=pos[b];
	if(ain&lt;inroot&amp;&amp;bin&lt;inroot) lca(inl,inroot-1,preroot+1,a,b);
	else if((ain&lt;inroot&amp;&amp;bin&gt;inroot)||(ain&gt;inroot&amp;&amp;bin&lt;inroot)){
		printf(&quot;LCA of %d and %d is %d.\n&quot;,a,b,ins[inroot]);
	}
	else if(ain&gt;inroot&amp;&amp;bin&gt;inroot) lca(inroot+1,inr,preroot+1+(inroot-inl),a,b);
	else if(ain==inroot) printf(&quot;%d is an ancestor of %d.\n&quot;,a,b);
	else if(bin==inroot) printf(&quot;%d is an ancestor of %d.\n&quot;,b,a);
}
int main(){
	int m,n,a,b;
	scanf(&quot;%d%d&quot;,&amp;m,&amp;n);
	ins.resize(n + 1), pre.resize(n + 1);
	for(int i=1;i&lt;=n;i++){
		scanf(&quot;%d&quot;,&amp;ins[i]);
		pos[ins[i]]=i;
	}
	for(int i=1;i&lt;=n;i++) scanf(&quot;%d&quot;,&amp;pre[i]);
	for(int i=0;i&lt;m;i++){
		scanf(&quot;%d%d&quot;,&amp;a,&amp;b);
		if(pos.count(a)==0&amp;&amp;pos.count(b)!=0) printf(&quot;ERROR: %d is not found.\n&quot;,a);
		if(pos.count(b)==0&amp;&amp;pos.count(a)!=0) printf(&quot;ERROR: %d is not found.\n&quot;,b);
		if(pos.count(a)==0&amp;&amp;pos.count(b)==0) printf(&quot;ERROR: %d and %d are not found.\n&quot;,a,b);
		if(pos.count(a)!=0&amp;&amp;pos.count(b)!=0) lca(1,n,1,a,b);
	}
	return 0;
}
</code></pre>
<h3 id="a115325-模拟-排序引用传参-vector-unordered_map">A1153(25 模拟 排序引用传参 vector unordered_map)</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
#include&lt;string&gt;
#include&lt;unordered_map&gt;
using namespace std;
struct node {
	string info;
	int score;
};
bool cmp(const node&amp; a, const node&amp; b) {
	return a.score != b.score ? a.score &gt; b.score : a.info &lt; b.info;
}
int main() {
	int n, m, type;
	string t;
	cin &gt;&gt; n &gt;&gt; m;
	vector&lt;node&gt; v(n);
	for (int i = 0; i &lt; n; i++) cin &gt;&gt; v[i].info &gt;&gt; v[i].score;
	for (int i = 1; i &lt;= m; i++) {
		vector&lt;node&gt; ans;
		cin &gt;&gt; type &gt;&gt; t;
		printf(&quot;Case %d: %d %s\n&quot;, i, type, t.c_str());
		int sum = 0, cnt = 0;
		if (type == 1) {
			for (int j = 0; j &lt; n; j++) {
				if (t[0] == v[j].info[0]) ans.push_back(v[j]);
			}
		}
		else if (type == 2) {
			for (int j = 0; j &lt; n; j++) {
				if (v[j].info.substr(1, 3) == t) {
					cnt++;
					sum += v[j].score;
				}
			}
			if (cnt != 0) printf(&quot;%d %d\n&quot;, cnt, sum);
		}
		else {
			unordered_map&lt;string, int&gt; m;
			for (int j = 0; j &lt; n; j++) {
				if (v[j].info.substr(4, 6) == t) m[v[j].info.substr(1, 3)]++;
			}
			for (auto it : m) ans.push_back({ it.first,it.second });
		}
		sort(ans.begin(), ans.end(), cmp);
		for (int j = 0; j &lt; ans.size(); j++) printf(&quot;%s %d\n&quot;, ans[j].info.c_str(), ans[j].score);
		if (((type == 1 || type == 3) &amp;&amp; ans.size() == 0) || (type == 2 &amp;&amp; cnt == 0)) printf(&quot;NA\n&quot;);
	}
	return 0;
}
</code></pre>
<h3 id="a115425-图-边的两端点的判断">A1154(25 图  边的两端点的判断  )</h3>
<pre><code>#include&lt;iostream&gt;
#include&lt;vector&gt;
#include&lt;set&gt;
using namespace std;
struct node {
	int v1, v2;
};
int main() {
	int n, m, k;
	cin &gt;&gt; n &gt;&gt; m;
	vector&lt;node&gt; g(10010);
	for (int i = 0; i &lt; m; i++) cin &gt;&gt; g[i].v1 &gt;&gt; g[i].v2;
	cin &gt;&gt; k;
	for (int i = 0; i &lt; k; i++) {
		set&lt;int&gt; color; 
		vector&lt;int&gt; e(n);
		bool flag = true;
		for (int j = 0; j &lt; n; j++) {
			cin &gt;&gt; e[j];
			color.insert(e[j]);
		}
		for (int j = 0; j &lt; m; j++) {
			if (e[g[j].v1] == e[g[j].v2]) flag = false;
		}
		if (flag == false) cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;
		else cout &lt;&lt; color.size() &lt;&lt; &quot;-coloring&quot; &lt;&lt; endl;
	}
	return 0;
}
</code></pre>
<h3 id="a115530-完全二叉树-判断大顶堆小顶堆-dfs-打印路径">A1155(30 完全二叉树  判断大顶堆小顶堆 dfs  打印路径)</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;vector&gt;
using namespace std;
vector&lt;int&gt;v;
int n, a[1010];
void dfs(int index) {
	if (index * 2 &gt; n &amp;&amp; index * 2 + 1 &gt; n) {
		if (index &lt;= n) {
			for (int i = 0; i &lt; v.size(); i++) {
				if (i != 0) printf(&quot; &quot;);
				printf(&quot;%d&quot;, v[i]);
			}
			printf(&quot;\n&quot;);
		}
	}
	else {
		v.push_back(a[index * 2 + 1]);
		dfs(index * 2 + 1);
		v.pop_back();
		v.push_back(a[index * 2]);
		dfs(index * 2);
		v.pop_back();
	}
}
int main() {
	bool minflag = true, maxflag = true;
	scanf(&quot;%d&quot;, &amp;n);
	for (int i = 1; i &lt;= n; i++) scanf(&quot;%d&quot;, &amp;a[i]);
	v.push_back(a[1]);
	for (int i = 2; i &lt;= n; i++) {
		if (a[i] &gt;= a[i / 2]) maxflag = false;
		if (a[i] &lt;= a[i / 2]) minflag = false;
	}
	dfs(1);
	if (minflag) printf(&quot;Min Heap&quot;);
	else if (maxflag) printf(&quot;Max Heap&quot;);
	else if (maxflag == false &amp;&amp; minflag == false) printf(&quot;Not Heap&quot;);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[c++刷题笔记]]></title>
        <id>https://liuxbo.github.io/post/cshua-ti-bi-ji/</id>
        <link href="https://liuxbo.github.io/post/cshua-ti-bi-ji/">
        </link>
        <updated>2020-05-06T13:20:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-c字符串数组的0问题">1. c++字符串数组的\0问题</h3>
<pre><code>#include&lt;stdio.h&gt;
int main() {
	char str1[8] = { 'd','e','d','g','o' };
	char str2[5] = { 'd','e','d','g','o' };
	printf(&quot;%d\n&quot;, sizeof(str1));
	printf(&quot;%d\n&quot;, sizeof(str2));
	return 0;
}
</code></pre>
<p>![](C:\Users\lxb\Pictures\Camera Roll\KG1V`[}F4D7YE5L_NIJ289O.png)</p>
<p>对于字符串数组，当定义时直接对其赋值，无论元素是否占满数组，其储存的字符个数都是数组的元素个数，未占满时会自动用\0补全</p>
<pre><code>#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
int main() {
	char str[14];
	for (int i = 0; i &lt; 5; i++) {
		str[i] = getchar();
	}
	puts(str);
	return 0;
}
</code></pre>
<p>输出会乱码</p>
<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5Clxb%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191205103056228.png" alt="image-20191205103056228" loading="lazy"></figure>
<p>使用<code>getchar</code>要在输入的每个字符串后面加\0,例如</p>
<pre><code>#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
int main() {
	char str[14];
	for (int i = 0; i &lt; 5; i++) {
		str[i] = getchar();
	}
	str[5] = '\0';
	puts(str);
	return 0;
}
</code></pre>
<h3 id="2数组相关问题">2.数组相关问题</h3>
<ul>
<li>
<p>反转一个一维数组</p>
<pre><code>#include &lt;cstdio&gt;
int main() {
	int a[5] = { 5,2,3,6,9 };
	for (int i = 0, j = 4; i &lt;= j; i++, j--) {
		int temp = a[i];
		a[i] = a[j];
		a[j] = temp;
	}
	for(int i=0;i&lt;5;i++)
	printf(&quot;%d&quot;, a[i]);
	return 0;
}
</code></pre>
</li>
<li>
<p>找二维(或三维)数组中的“块”(比如相邻的若干个数组元素1)</p>
<p>用BFS，要设置增量数组，</p>
<p>对于一维的情况，可以设置</p>
<pre><code>int X[4]={0,0,1,-1};
int Y[4]={1,-1,0,0};
</code></pre>
<p>以便于访问上下左右四个位置</p>
<p>对于三维的情况，可以设置</p>
<pre><code>int X[6]={0,0,0,0,1,-1};
int Y[6]={0,0,1,-1,0,0};
int Z[6]={1,-1,0,0,0,0};
</code></pre>
<p>对应前后左右上下6个位置</p>
</li>
</ul>
<h3 id="3字符串问题">3.字符串问题</h3>
<ul>
<li>
<p><code>scanf (&quot;%s&quot;)</code>识别空格作为字符串结尾</p>
<p><code>getchar</code>  <code>putchar</code> 用来输入输出单个字符</p>
<p><code>gets</code> <code>puts</code> 用来输入输出一行字符串，<code>gets</code> 识别换行符\n作为输入结束  ，gets现在已经不支持了</p>
</li>
<li>
<p><code>cin</code> 读入字符串时，以空格为分隔符，如果想读入一整行字符串，用<code>getline(cin,s)</code>，注意前面如果输入数字n，一定要注意<code>scanf(&quot;%d\n&quot;,&amp;n);</code> 这样写，防止getline读入错误</p>
</li>
<li>
<p>判断两个字符串是否一样时可以用<code>strcmp()==0</code>，该函数其中一个参数可以为字符数组的名称</p>
</li>
<li>
<p>使⽤ <code>stoi()</code> 、 <code>stod()</code>  可以将字符串 string 转化为对应的 int 型、 double 型变量</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
using namespace std;
int main() {
 string str = &quot;123&quot;;
 int a = stoi(str);
 cout &lt;&lt; a;//输出123
 str = &quot;123.44&quot;;
 double b = stod(str);
 cout &lt;&lt; b;//输出123.44
 return 0;
}
</code></pre>
<p><code>stoi</code>如果遇到的是⾮法输⼊（⽐如<code>stoi(&quot;123.4&quot;)</code>，123.4不是⼀个int型变量）： 1.会⾃动截取最前⾯的     数字，直到遇到不是数字为⽌ (所以说如果是浮点型，会截取前⾯的整数部分) 2.如果最前⾯不是数字，会运⾏时发⽣错误</p>
<p><code>stod</code>如果是⾮法输⼊： 1.会⾃动截取最前⾯的浮点数，直到遇到不满⾜浮点数为⽌ 2.如果最前⾯不是数字或者⼩数点，会运⾏时发⽣错误 3.如果最前⾯是⼩数点，会⾃动转化后在前⾯补0</p>
<p>不仅有<code>stoi</code>、<code>stod</code>两种，相应的还有：</p>
<p><code>stof (string to float)</code></p>
<p><code>stold (string to long double)</code></p>
<p><code>stol (string to long)</code></p>
<p><code>stoll (string to long long)</code></p>
<p><code>stoul (string to unsigned long)</code></p>
<p><code>stoull (string to unsigned long long)</code></p>
</li>
<li>
<p><code>to_string()</code>将数值转化为字符串。返回对应的字符串。头文件同样为<code>include&lt;string&gt;</code></p>
</li>
<li>
<p><code>printf(&quot;%s\n&quot;, (s1 + s2).c_str());</code>  如果想⽤<code>printf</code>输出string，需要加⼀ 个<code>.c_str()</code></p>
</li>
<li>
<p>字符串形式的两个数字相加</p>
<pre><code>string add(string s1, string s2) {
	string s = s1;
	int carry = 0;
	for (int i = s1.size() - 1; i &gt;= 0; i--) {
		s[i] = ((s1[i] - '0') + (s2[i] - '0') + carry) % 10 + '0';
		carry = ((s1[i] - '0') + (s2[i] - '0') + carry) / 10;
	}
	if (carry &gt; 0) s = '1' + s;
	return s;
}
</code></pre>
</li>
<li>
<p>涉及到的题目:A1035，A1077,A1082,A1093,A1061，<strong>A1073</strong>(科学计数法)，A1077(公共后缀)，<strong>A1082</strong>,</p>
<p>A1112, A1152, A1140  A1136(回文串、字符串) 、 A1132(20 水题)</p>
</li>
</ul>
<h3 id="4中序序列和-后序或先序或层序-搭配-确定一棵二叉树">4.中序序列和 后序或先序或层序 搭配， 确定一棵二叉树</h3>
<ul>
<li>
<p>先由后序序列或先序序列确定根节点</p>
</li>
<li>
<p>利用在先序或后序序列找到的根节点的值，确定中序序列中根节点的位置</p>
</li>
<li>
<p>确定左子树、右子树的 先序/后序  和中序序列（左子树所有节点的个数只能在中序序列中得知）</p>
</li>
<li>
<p>分别向左孩子和右孩子递归构建</p>
<p>注意递归时区间的书写格式</p>
</li>
</ul>
<h3 id="5-映射问题hash-map-散列">5. 映射问题(hash 、map、散列...)</h3>
<ul>
<li>
<p>直接开数组，将数组下标与下标对应的内容作为映射,ASCII码表有128个字符，对于一些题目可以直接开<code>hashtable[128]</code>数组，关于其下标，可以用以下函数获得</p>
<pre><code>int change(char c){
    if(c&gt;='0'&amp;&amp;c&lt;='9') return c-'0';
    if(c&gt;='a'&amp;&amp;c&lt;='z') return c-'a'+10;
    if(c&gt;='A'&amp;&amp;c&lt;='Z') return c-'A'+36;
}
</code></pre>
</li>
<li>
<p>字符串hash</p>
<ul>
<li>
<pre><code>for(int i = 0; i &lt; 3; i++)  id = 26 * id + (name[i] - 'A'); //大写字母字符串映射为整数
</code></pre>
</li>
</ul>
</li>
<li>
<p>涉及到的题目</p>
<p>A1084,A1092,A1041,A1050，A1048  <strong>A1129(25 set的应用 结构体内运算符重载)</strong></p>
<p>A1145(25 hash 平方探查)</p>
</li>
</ul>
<h3 id="6-stl容器">6. <code>STL</code>容器</h3>
<ul>
<li>
<p>vector</p>
<p>定义一个m行n列的数组 <code>vector&lt;vector&lt;int&gt; &gt; b(m, vector&lt;int&gt;(n));</code></p>
<pre><code>vector&lt;int&gt; vec1(4,1);              //vec1的内容为1,1,1,1
vector&lt;int&gt; vec1{ 1, 2, 3, 4, 5, 6 };       //vec1内容1,2，3,4,5,6
</code></pre>
<pre><code>vector&lt;int&gt; vec(&amp;arr[1], &amp;arr[4]); //将arr[1]~arr[4]范围内的元素作为vec的初始值
</code></pre>
<pre><code>vector&lt;int&gt; vec(arr, arr + 5);   //将arr数组的元素用于初始化vec向量
//说明：当然不包括arr[4]元素，末尾指针都是指结束元素的下一个元素，
//这个主要是为了和vec.end()指针统一。
</code></pre>
</li>
<li>
<p>异同</p>
<p>只有<code>vector</code>和<code>string</code>支持<code>*(it+i)</code>的访问方式 ,<code>set</code>只能通过迭代器访问(即*it)，</p>
<p><code>map</code> 、<code>string</code>和<code>vector</code>支持下标访问和迭代器访问。</p>
<p>map与set内部都会自动递增排序，(这里指map的key），并且set的元素值与map的key在其各自内部都是唯一的，包括数字和字</p>
</li>
<li>
<p>常用函数</p>
<ul>
<li>
<p><code>string</code>  <code>s.begin() s.end()</code>  <code>s.c_str()</code> <code>s.length() s.size()</code> <code>s.substr()</code></p>
</li>
<li>
<p><code>map</code></p>
<p>使用count，返回的是被查找元素的个数。如果有，返回1；否则，返回0。注意，map中不存在相同元素，所以返回值只能是1或0。count(key值)</p>
<p>find() erase() size() clear()</p>
</li>
</ul>
</li>
<li>
<p>注意</p>
<p>begin()函数返回一个迭代器,指向字符串的第一个元素.</p>
<p>end()函数返回一个迭代器，指向字符串的末尾(最后一个字符的下一个位置).</p>
<p>rbegin()返回一个逆向迭代器，指向字符串的最后一个字符。</p>
<p>rend()函数返回一个逆向迭代器，指向字符串的开头（第一个字符的前一个位置）。</p>
<p>vector数组可以直接用==判断两个数组是否相同</p>
<p>string类型可以直接用&lt;  或 &gt; 或== 直接进行字典序的比较，而char数组必须用strcmp比较</p>
<p>vector使用下标访问前注意先resize一下</p>
</li>
</ul>
<p>A1039,A1047,A1063,A1060,A1100,A1054，A1071,A1022 A1120 ,A1149(map、vector)</p>
<p>A1121 (25 map、set应用)   A1137(25 map 排序)    A1139(30 逻辑题 unordered_map)</p>
<h3 id="7-输入输出问题">7. 输入输出问题</h3>
<p><code>scanf</code>中 ，<code>long long</code>型 ：<code>scanf(&quot;%lld&quot;,&amp;n)</code> , <code>double</code>型：<code>scanf(&quot;lf&quot;,&amp;n)</code></p>
<p><code>printf</code>中，<code>long long</code> 型：<code>printf(&quot;%lld&quot;,n)</code>   , <code>double</code> 型：<code>printf(&quot;%f&quot;,n)</code></p>
<p>若<code>getline(cin, str);</code>前有<code>scanf(&quot;%d%*c&quot;, &amp;n);</code>输入，可以用%*c忽略一个字符型(比如换行),或者%*d忽略一个数字型。也可以用getchar()吸收掉字符</p>
<p><code>scanf(&quot;%*c%d&quot;,&amp;n);可以吸收掉上一行末尾的的换行符</code></p>
<p>若输入格式为数字<code>空格</code> 字符<code>空格</code> 数字，可以写成<code>scanf(&quot;%d %c %d&quot;)</code> ,因为空格也算字符。</p>
<p>注意string类型用printf输出时一定要用c_str()转化一下</p>
<p><code>sscanf(a, &quot;%lf&quot;, &amp;temp);</code> 从左到右，将字符数组a以浮点数的形式存到double类型temp中；</p>
<p><code>sprintf(b, &quot;%.2f&quot;, temp);</code> 从右到左，将double类型temp以保留两位小数的形式存到字符数组b中</p>
<h3 id="8-提取数中的元素">8. 提取数中的元素</h3>
<pre><code>while (b != 0) {
		if (b % 10 == db) pb = pb * 10 + db;
		b = b / 10;
	}
提取b中的重复数字组成新的数字 b=38633 ，db为3，新数字为333
</code></pre>
<h3 id="9-常用函数">9. 常用函数</h3>
<ul>
<li>
<p><code>math.h</code>头文件函数</p>
<p><code>fabs(double x)</code>  取绝对值 ，</p>
<p><code>floor(double x)</code>和<code>ceil(double x)</code> ，分别为向上取整和向下取整，返回double型</p>
<p><code>pow(double r,double p)</code> 用于返回r^p</p>
<p><code>sqrt(double x)</code> ,返回算数平方根</p>
<p><code>log(double x)</code> ,返回以自然对数为底的对数，用换底公式求具体对数</p>
<p><code>sin(double x)</code> <code>cos(double x)</code> <code>tan(double x)</code></p>
<p><code>asin(double x)</code> <code>acos(double x)</code> <code>atan(double x)</code></p>
<p><code>round(double x)</code> 将x四舍五入，返回为double型</p>
</li>
<li>
<p><code>algorithm</code>头文件下的函数，加<code>using namespace std;</code></p>
<p><code>max(x,y)</code> <code>min(x,y)</code>  <code>abs(x)</code> 返回x的绝对值，x必须为整数</p>
<p><code>swap(x,y)</code></p>
<p><code>reverse(it,it2)</code> <code>reverse(a,a+4)</code>  ,将数组元素反转</p>
<p><code>next_permutation(a,a+...)</code> ,给出一个序列在全排列中的下一个序列，该函数在到达全排列的最后一个时会返回false</p>
<p><code>fill(a,a+4,233)</code> ,赋相同值，对于<code>G[maxn] [maxn]</code>二维数组<code>fill(G[0],G[0]+maxn*maxn,INF);</code></p>
<p><code>sort(首元素地址，尾元素地址的下一个地址，比较函数（非必填)）</code>,无比较函数，默认递增排序。</p>
<p><code>sort(a, a+n, greater());</code>  从大到小排序(要用<code>iostream</code>头文件)</p>
<p><code>lower_bound(first,last,val)</code>  <code>upper_bound(first,last,val)</code> ,用于有序数组或容器，前者用来寻找[first,last)范围内第一个值大于等于val的元素的位置，后者寻找第一个值大于val的元素位置.若是数组，这两个函数返回的是地址，如<code>int* right=upper_bound(num, num+n, k)</code>，返回num数组中第一个大于k的元素所在地址，其下标=<code>right-num</code></p>
<p><code>max_element(a, a+len)</code>返回序列中最大元素地址（迭代器）,可用其减去数组首地址(即数组名)获取其下标,若要获取该元素值，直接在前面加一个*,表示取地址即可</p>
<p><code>min_element(begin, end)</code> 返回序列中最小元素地址</p>
</li>
<li>
<p><code>string.h</code> 头文件(<code>cstring</code>头文件)</p>
<p><code>memset(数组名,-1或0,sizeof(数组名))</code></p>
<p><code>strlen(字符数组)</code> 得到字符数组中第一个\0前的字符个数</p>
<p><code>strcmp(字符数组1，字符数组2)</code>返回两个字符串大小比较结果，按字典序。字符数组1&lt;2 ,返回负整数;1=2，返回0;1&gt;2，返回正整数</p>
<p><code>strcpy(字符数组1，字符数组2)</code>，把字符数组2复制给字符数组1，包括\0</p>
<p><code>strcat(字符数组1，字符数组2)</code> ,把2接在1后面</p>
</li>
<li>
<p><code>cctype</code>头文件</p>
<p>1.不仅仅能判断字⺟，还能判断数字、⼩写字⺟、⼤写字⺟等</p>
<p><code>isalpha</code>字⺟（包括⼤写、⼩写）</p>
<p><code>islower</code> （⼩写字⺟）</p>
<p><code>isupper</code>（⼤写字⺟）</p>
<p><code>isalnum</code> （字⺟⼤写⼩写+数字）</p>
<p><code>isblank</code>（space和 \t ）</p>
<p><code>isspace</code>（ space 、 \t 、 \r 、 \n ）</p>
<p><code>isdigit</code>(数字)</p>
<p>2 .<code>tolower (char c)</code>和 <code>toupper(char c)</code> 将某个字符转为⼩写或⼤写</p>
</li>
</ul>
<h3 id="10进制转换">10.进制转换</h3>
<ul>
<li>十进制转化为其他进制</li>
</ul>
<pre><code>int z[maxn],num=0;
do{
z[num++]=n%b;
n/=b;
}while(n!=0);
或者
void change(int n,int b){
	if(n&gt;0){
		int i=0;
		change(n/b,b);
		a.push_back(n%b);
	}
	else return;
}
</code></pre>
<ul>
<li>
<p>给定⼀个数值和⼀个进制，将它转化为10进制。转化过程中可能产⽣溢出,数值中只有小写字母和数字</p>
<pre><code>long long convert(string n, long long radix) {
 long long sum = 0;
 int index = 0, temp = 0;
 for (auto it = n.rbegin(); it != n.rend(); it++) {
 temp = isdigit(*it) ? *it - '0' : *it - 'a' + 10;
 sum += temp * pow(radix, index++);
 }
 return sum;
}
</code></pre>
</li>
</ul>
<h3 id="11-ascll-码表">11. <code>ASCLL</code> 码表</h3>
<p>A-Z对应十进制65-90</p>
<p>a-z对应十进制97-122</p>
<h3 id="12回文串">12.回文串</h3>
<pre><code>bool judge(int arr[],int index){
    for(int i = 0; i &lt;index / 2; i++) {
       if(arr[i] != arr[index-i-1]) {
           return false;
     }
   }
   return true;
}

</code></pre>
<h3 id="13数字-字符数组相互转换">13.数字、字符数组相互转换</h3>
<pre><code>1.数字存到数组中
void to_array(int n,int a[]){
    int j=0;
    while(n){
        a[j++]=n%10;
        n/=10;
    }
}
2.数组变为数字
int exp=0;
for(int i=0;i&lt;len;i++){
    exp=exp*10+(str[i]='0');
}
或

</code></pre>
<h3 id="14-排序-找最值">14 排序、找最值</h3>
<ul>
<li>
<pre><code>int best=0;
for (int j = 0; j &lt; 4; j++) {
	if (a[j] &lt; a[best])
	best = j;
}
找出数组a中最小元素的位置
</code></pre>
</li>
<li>
<p>结构体内重载运算符</p>
<p>运算符重载的格式如下：</p>
<p>函数类型 operator 运算符名称（形参表列）{对运算符的重载处理},例如：</p>
<pre><code>struct node {
	int id;
	int freq;
	bool operator &lt; (const node&amp; a) const {
		return (freq != a.freq) ? freq &gt; a.freq:id &lt; a.id;
	}
};
</code></pre>
</li>
<li>
<p>使用sort()对char数组排序</p>
<p>正确方法：</p>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
char name[3][4] = {&quot;wu&quot;,&quot;jia&quot;,&quot;jun&quot;};//二维数组保存n个字符串 
bool cmp(int a,int b){
    return strcmp(name[a],name[b]) &lt; 0;
}
int main(){
    int arr[3] = {0,1,2};//与字符串数组下标一一对应 
    sort(arr,arr+3,cmp);//排列的实际是标号 ，这么做更快 
    for(int i = 0;i &lt;3 ;i++){
        printf(&quot;%s &quot;,name[arr[i]]);
    }
}
</code></pre>
<p>错误方法：</p>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
#include&lt;cstring&gt;
using namespace std;
char stu[6][6] = { &quot;ahda&quot;,&quot;jwnd&quot;,&quot;djsh&quot;,&quot;yrhw&quot;,&quot;JWJs&quot; };
bool cmp(int a, int  b) { return strcmp(stu[a], stu[b]) &lt; 0; }
int main() {
	sort(stu, stu + 5, cmp);
	for (int i = 0; i &lt; 5; i++)
		printf(&quot;%s&quot;, stu[i]);
	return 0;
}
</code></pre>
</li>
<li>
<pre><code> testee[0].rank=1;
  	for(int k=1;k&lt;total;k++){
  		if(testee[k].grade==testee[k-1].grade) testee[k].rank=testee[k-1].rank;
  		else testee[k].rank=k+1;
  	}
确保排名为 1 1 3 3 4...的形式
</code></pre>
</li>
<li>
<p>A1062 ,A1075,A1012,A1016,A1025,A1028,A1055,A1075,A1083,A1080,A1095,A1109,A1141(注意1080中cmp的写法和使用)</p>
<p>思路：</p>
<p>定义结构体，cmp函数，初始化结构体内的变量，for循环中边输入边处理</p>
<p>排序时注意是否能用学号等信息作为数组下标，因为排序后下标会改变，所以可以在结构体中设置id变量</p>
<p>平均数作为最后成绩可以不用除，直接用总和比较</p>
<p>有些题要找出有效记录(比如常出现的配对问题)</p>
</li>
<li>
<p>各种排序算法</p>
<ul>
<li>
<p>选择排序</p>
<pre><code>void selectsort(){
    for(int i=0;i&lt;n;i++){
        int k=i;
        for(int j=k;j&lt;n;j++){
            if(A[j]&lt;A[k]){
                k=j;
            }
        }
        int temp=A[K];
        A[k]=A[i];
        A[i]=temp;
    }
}
</code></pre>
</li>
<li>
<p>插入排序</p>
<pre><code>void insertSort(){
   for(int i=2;i&lt;=n;i++){
      int temp=a[i],j=i;
      while(j&gt;1&amp;&amp;a[j-1]&gt;temp){
         a[j]=a[j-1];
         j--;
      }
      a[j]=temp;
   }
}
</code></pre>
</li>
<li>
<p>归并排序  (合并两个有序序列时，注意其中一个数列先扫描完的情况)</p>
<pre><code>
</code></pre>
</li>
<li>
<p>快排(递归法)</p>
<pre><code>int partition(int A[],int left,int right){
    int temp=A[left];
    while(left&lt;right){
        while(right&gt;left&amp;&amp;A[right]&gt;temp) right--;
        A[left]=A[right];
        while(left&lt;right&amp;&amp;A[left]&lt;=temp) left++;
        A[right]=A[left];
    }
    A[left]=temp;
    return left;
}
void quicksort(int A[],int left,int right){
    if(left&lt;right){
        int pos=partition(A,left,right);
        quicksort(A,left,pos-1);
        quciksort(A,pos+1,right);
    }
}
</code></pre>
<p>快排(改进后)</p>
<p>生成随机数需要添加stdlib.h与time.h头文件，mian函数内开头加上srand((unsigned)time(NULL));</p>
<pre><code>int partition(int A[],int left,int right){//只改进该函数
    int p=(round(1.0*rand()/RAND_MAX*(right-left)+left);
    //生成[left,right]范围内的随机数
    swap(A[left],A[p]);
    int temp=A[left];
    while(left&lt;right){
        while(right&gt;left&amp;&amp;A[right]&gt;temp) right--;
        A[left]=A[right];
        while(left&lt;right&amp;&amp;A[left]&lt;=temp) left++;
        A[right]=A[left];
    }
    A[left]=temp;
    return left;
}
void quicksort(int A[],int left,int right){//该函数不变
    if(left&lt;right){
        int pos=partition(A,left,right);
        quicksort(A,left,pos-1);
        quciksort(A,pos+1,right);
    }
}
</code></pre>
</li>
<li>
<p>堆排序</p>
<pre><code>void downadjust(int low, int high) {
	int i = low, j = 2 * i;
	while (j &lt;= high) {
		if (j + 1 &lt;= high &amp;&amp; heap[j + 1] &gt; heap[j]) {
			j = j + 1;
		}
		if (heap[i] &lt; heap[j]) {
			swap(heap[i], heap[j]);
			i = j;
			j = 2 * i;
		}
		else {
			break;
		}
	}
}
void upadjust(int low, int high) {
	int i = high, j = i / 2;
	while (j &gt;= low) {
		if (heap[i] &lt; heap[j]) {
			swap(heap[i], heap[j]);
			i = j;
			j = i / 2;
		}
		else {
			break;
		}
	}
}
void createheap() {//建堆
	for (int i = n / 2; i &gt;= 1; i--) {
		downadjust(i, n);
	}
}
void heapsort(){
    createheap();
    for(int i=n;i&gt;1;i--){
        swap(heap[1],heap[i]);
        upadjust(1,i-1);
    }
}
</code></pre>
</li>
<li>
<p>拓扑排序</p>
<pre><code>
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="15-计算时长">15 计算时长</h3>
<ul>
<li>
<p>对已知的起止时间，不断将起始时间加1，判断是否到达终止时间</p>
<pre><code>void get_ans(int on, int off, int&amp; time, int&amp; money) {
	temp = rec[on];
  while (temp.dd &lt; rec[off].dd || temp.hh &lt; rec[off].hh || temp.mm &lt; rec[off].mm) {
		time++;
		money += toll[temp.hh];
		temp.mm++;
		if (temp.mm &gt;= 60) {
			temp.mm = 0;
			temp.hh++;
		}
		if (temp.hh &gt;= 24) {
			temp.hh = 0;
			temp.dd++;
		}
	}
}
</code></pre>
</li>
<li>
<p>对于<code>hh:mm:ss</code>类型的时间处理：可以<code>hh * 3600 + mm * 60 + ss</code> 转化成秒，方便处理</p>
</li>
</ul>
<h3 id="16数据类型问题">16.数据类型问题</h3>
<ul>
<li>且C++把所有⾮零值解释为 true ，零值解 释为 false ～所以直接赋值⼀个数字给 <code>bool</code> 变量也是可以的，它会⾃动根据 int 值是不是零来决定 给 <code>bool</code> 变量赋值 true 还是 false ～</li>
</ul>
<pre><code>bool flag = true;//flag为1，若是flase则为0
bool flag2 = -2; // flag2为true
bool flag3 = 0; // flag3为false
</code></pre>
<h3 id="17栈-队列-链表">17.栈、队列、链表</h3>
<p>在使用栈的pop()和top()函数前必须使用empty()判断栈是否非空。</p>
<p>栈：A1051</p>
<p>记得清空栈</p>
<pre><code>while(!st.empty()){
    st.pop();
}
</code></pre>
<p>队列：A1056</p>
<p>链表：A1074，A1032，A1052, A1097 A1133(链表  重新排列)</p>
<pre><code>for(int i=0;i&lt;n;i++){
		scanf(&quot;%d&quot;,&amp;address);
		scanf(&quot;%d%d&quot;,&amp;node[address].key,&amp;node[address].next);
		node[address].address=address;
	}
</code></pre>
<p>当结点的地址是比较小的整数(比如5位数的整数),可以使用静态链表，没有必要建立动态链表。</p>
<p>注意初始化，排除无效结点(可以结合sort，cmp中针对order)。用count计数有效结点</p>
<p>某些情况下的最后一个结点要特殊处理(比如令next为-1)。</p>
<p>注意链表结构体元素order的使用</p>
<h3 id="18贪心">18.贪心</h3>
<p>A1070 ,<strong>A1033</strong> ,A1037,A1067 A1125(简单贪心 排序)</p>
<h3 id="19-二分">19 二分</h3>
<p>A1085,A1010,A1044 A1048</p>
<p>注意二分法的几种写法,以及非严格递增序列的处理,可以使用<code>lower_bound</code>和<code>upper_bouned</code></p>
<h3 id="20-two-points">20 two points</h3>
<p>A1085,A1089,A1029</p>
<h3 id="21-数学问题">21 数学问题</h3>
<ul>
<li>
<p>求最大公约数,(最小公倍数：a和b的最大公约数为d，则a和b的最小公倍数为ab/d)</p>
<pre><code>long long gcd(long long a, long long b) {
     return b == 0 ? abs(a) : gcd(b, a %b);
 }
</code></pre>
</li>
<li>
<p>分数化简</p>
<pre><code>struct fraction {
	ll up, down;
}a, b;
fraction reduction(fraction result) {
	if (result.down &lt; 0) {
		result.up = -result.up;
		result.down = -result.down;
	}
	if (result.up == 0) result.down = 1;
	else {
		ll gcdvalue = gcd(abs(result.up), abs(result.down));
		result.up /= gcdvalue;
		result.down /= gcdvalue;
	}
	return result;
}
</code></pre>
</li>
<li>
<p>四则运算</p>
<pre><code>fraction add(fraction f1, fraction f2) {
	fraction result;
	result.up = f1.up * f2.down + f1.down * f2.up;
	result.down = f1.down * f2.down;
	return reduction(result);
}
</code></pre>
</li>
<li>
<p>分数输出</p>
<pre><code>void showresult(fraction r) {
	r = reduction(r);
	if (r.up &lt; 0) printf(&quot;(&quot;);
	if (r.down == 1) printf(&quot;%lld&quot;, r.up);
	else if (abs(r.up) &lt; r.down) printf(&quot;%lld/%lld&quot;, r.up, r.down);
	else if (abs(r.up) &gt; r.down) printf(&quot;%lld %lld/%lld&quot;, r.up / r.down, abs(r.up) % r.down, r.down);
	if (r.up &lt; 0) printf(&quot;)&quot;);
}
</code></pre>
</li>
<li>
<p>判断是否为素数</p>
<pre><code>bool isprime(int n) {
	if (n &lt;= 1) return false;
    int sqr = sqrt(1.0 * n);
	for (int i = 2; i &lt;= sqr; i++) {
		if (n % i == 0) return false;
	}
	return true;
}

</code></pre>
</li>
<li>
<p>建立素数表</p>
<pre><code>
int prime[maxn], pnum=0;
void find_prime() {
	for (int i = 1; i &lt; maxn; i++) {
		if (isprime(i)) {
			prime[pnum++] = i;
		}
	}
}
</code></pre>
</li>
<li>
<p>大整数运算</p>
<pre><code>struct bign {
	int d[1000];
	int len;
	bign() {
		len = 0;
		memset(d, 0, sizeof(d));
	}
};
bign change(string str) {
	bign a;
	a.len = str.length();
	for (int i = 0; i &lt; a.len; i++) {
		a.d[i] = str[a.len - 1 - i]-'0';
	}
	return a;
}
bign multi(bign a, int b) {
	bign c;
	int carry=0;
	for (int i = 0; i &lt; a.len; i++) {
		int temp = a.d[i] * b + carry;
		c.d[c.len++] = temp % 10;
		carry = temp / 10;
	}
	while (carry != 0) {
		c.d[c.len++] = carry % 10;
		carry /= 10;
	}
	return c;
}
</code></pre>
</li>
</ul>
<p>A1069,A1049,A1088,A1015,A1078,A1096,A1023,A1024</p>
<h3 id="22入门模拟">22.入门模拟</h3>
<p>A1042(洗扑克牌) ，A1046(环形两点间距离) ，A1065(两数相加判断大小)， A1002(多项式相加)，A1009(多项式相乘)，A1011，A1006(签到签离) ，A1036(找最值)，A1031(输出图形)，A1019(回文串)，A1027(进制转换)，A1058(加法进位)，A1061(字符串问题)，***A1073(科学计数法)***，A1001(a+b)，A1005,A1035,A1077(公共后缀)，<strong>A1082(用汉语读数字)</strong></p>
<h3 id="23技巧-逻辑">23.技巧、逻辑</h3>
<p>A1093,A1101, A1113 A1117(逻辑)  A1148(狼人杀 找到两个狼人)</p>
<h3 id="24-dfs-bfs">24 DFS BFS</h3>
<ul>
<li>
<p>DFS用递归实现，A1103</p>
<pre><code>void DFS(int index, int nowk, int sum, int facsum) {
	if (sum == n &amp;&amp; nowk == k) {
		if (facsum &gt; maxfacsum) {
			ans = temp;//更新最优序列
			maxfacsum = facsum;
		}
		return;
	}
	if (nowk &gt; k || sum &gt; n) return;
	if (index - 1 &gt;= 0) {
		temp.push_back(index);
		DFS(index, nowk + 1, sum + fac[index], facsum + index);
		temp.pop_back();
		DFS(index - 1, nowk, sum, facsum);
	}
}
</code></pre>
</li>
<li>
<p>BFS用队列实现    A1091</p>
<pre><code>void BFS(int s){
    queue&lt;int&gt; q;
    q.push(s);
    while(!q.empty()){
        取出队首元素top;
        访问队首元素top;
        将队首元素出队;
        将top的下一层结点中未曾入队的结点全部入队，并设置为已入队;
    }
}
</code></pre>
<pre><code>int BFS(int z,int x,int y){
	int total=0;
	Node.x = x;
	Node.y = y;
	Node.z = z;
	inq[z][x][y] = true;
	queue&lt;node&gt; q;
	q.push(Node);
	while (!q.empty()) {
		node topp = q.front();
		q.pop();
		total++;
		int newx, newy, newz;
		for (int i = 0; i &lt; 6; i++) {
			newz = topp.z + Z[i];
			newx = topp.x + X[i];
			newy = topp.y + Y[i];
			if (judge(newz, newx, newy)) {
				Node.x = newx;
				Node.y = newy;
				Node.z = newz;
				q.push(Node);
				inq[Node.z][Node.x][Node.y] = true;
			}
		}
	}
	if (total &gt;= T) return total;
	else return 0;
}
</code></pre>
</li>
</ul>
<h3 id="25-树">25 树</h3>
<p>A1020,A1086,A1102 , A1151(二叉树LCA)，A1143(二叉搜索树LCA) 、A1119(前序和后序求中序)</p>
<p>A1123(30 AVL 、层序遍历、判断是否是完全二叉树) 、 A1110(判断是否为完全二叉树)</p>
<p>A1127(30 中序后序建树，dfs，输出z字形层序遍历)   A1130(dfs二叉树 输出中缀表达式)</p>
<p>A1155(30 完全二叉树  判断大顶堆小顶堆 dfs 打印路径)    A1147(30  判断大顶堆小顶堆 后序遍历)</p>
<p>A1135(30 判断红黑树 递归判断)</p>
<ul>
<li>
<p>二叉树</p>
<ul>
<li>
<p>存储结构</p>
<pre><code>struct node{
    typename data;
    node* lchild;
    node* rchild;
}
</code></pre>
</li>
<li>
<p>新建结点</p>
<pre><code>node* newNode(int v){
    node* root=new node;
    Node-&gt;data=v;
    Node-&gt;lchild=Node-&gt;rchild=NULL;
    return Node;
}
</code></pre>
</li>
<li>
<p>中序遍历</p>
<pre><code>void inorder(node* root){
    if(root==NULL) return;
    inorder(root-&gt;lchild);
    printf(&quot;%d&quot;,root-&gt;data);
    inorder(root-&gt;rchild);
}
</code></pre>
</li>
<li>
<p>二叉树的层序遍历(BFS)</p>
<pre><code>void layerorder(node* root) {
	queue&lt;node*&gt; q;
	q.push(root);
	while (!q.empty()) {
		node* now = q.front();
		q.pop();
		printf(&quot;%d&quot;, now-&gt;data);
		if (now-&gt;lchild != NULL) q.push(now-&gt;lchild);
	if (now-&gt;rchild != NULL) q.push(now-&gt;rchild);
	}
}
</code></pre>
</li>
<li>
<p>用已知的两个序列构建唯一二叉树</p>
<pre><code>node* create(int postL, int postR, int inL, int inR) {//后序加中序
	if (postL &gt; postR) return NULL;
	node* root = new node;
	root-&gt;data = postorder[postR];
	int k;
	for (int i = inL; i &lt;= inR; i++) {
		if (inorder[i] == root-&gt;data) {
			k = i;
			break;
		}
	}
	int leafnum = k - inL;
	root-&gt;lchild = create(postL, postL + leafnum - 1, inL, k - 1);
	root-&gt;rchild = create(postL + leafnum, postR - 1, k + 1, inR);
	return root;
}

</code></pre>
<pre><code>#include&lt;iostream&gt;
#include&lt;stdlib.h&gt;
#include&lt;stdio.h&gt;
#include&lt;string.h&gt;
#include&lt;math.h&gt;
#include&lt;algorithm&gt;
#include&lt;vector&gt;
#include&lt;string&gt;
#include&lt;map&gt;
#include&lt;unordered_map&gt;
#include&lt;queue&gt;
#include&lt;set&gt;
#include&lt;stack&gt;
using namespace std;
#define INF 0x3fffffff
typedef struct node{				//结点定义 
	int data;
	struct node *right,*left;
}Node;
vector&lt;int&gt; inor,layor;				//中序和层序序列 
unordered_map&lt;int,int&gt; inmp,laymp;	//序列与其下标的映射，（建立映射可以减少递归时候查找序列的次数） 
Node *creat(int il,int ir){			//建树函数 ，il表示中序序列的左端，ir便是中序序列的右端 
	if(il&gt;ir) return NULL;			//如果树中序列长度为0，表示到了空结点 
	int min=INF,id;					//min表示中序序列中的元素在层序中下标最小的那个，其中序的下标 
	for(int i=il;i&lt;=ir;i++){		//遍历中序序列，找出对应层序中下边最小的元素 
		if(laymp[inor[i]]&lt;min){
			min=laymp[inor[i]];
		}
	}
	Node *root=new node;			
	root-&gt;data=layor[min];			//中序序列中 层序中下标最小的便是根 
	id=inmp[root-&gt;data];			//获得根在中序的位置，划分为左子树和右子树 
	root-&gt;left=creat(il,id-1);		//递归左子树 
	root-&gt;right=creat(id+1,ir);		//递归右子树 
	return root;					//返回当前子树的根 
}
void preorder(Node *root){			//递归的先序遍历函数 
	if(root==NULL) return;
	printf(&quot;%d &quot;,root-&gt;data);
	preorder(root-&gt;left);
	preorder(root-&gt;right);
}
int main(void){

	int n;
	cin&gt;&gt;n;
	inor.resize(n); layor.resize(n);//读入元素个数并初始化 
	for(int i=0;i&lt;n;i++){			//读入中序序列并完成映射 
		cin&gt;&gt;inor[i];
		inmp[inor[i]]=i;
	} 
	for(int i=0;i&lt;n;i++){			//读入层序序列并完成映射 
		cin&gt;&gt;layor[i];
		laymp[layor[i]]=i;
	} 
	Node *root=creat(0,n-1);		//建树 
	preorder(root);					//先序遍历，验证树的结构 
	return 0;
} 
</code></pre>
</li>
<li>
<p>前序后序 求中序</p>
<pre><code>void getin(int prel, int prer, int postl, int postr) {
	if (prel == prer) {
		in.push_back(pre[prel]);
		return;
	}
	if (pre[prel] == post[postr]) {
		int i = prel + 1;
	while (i &lt;= prer &amp;&amp; pre[i] != post[postr - 1]) i++;
		if (i - prel &gt; 1) getin(prel + 1, i - 1, postl, postl + (i - prel - 1) - 1);
		else unique = false;
		in.push_back(post[postr]);
		getin(i, prer, postl + (i - prel - 1), postr - 1);
	}
}
</code></pre>
</li>
<li>
<p>静态二叉树(如果题目中直接给出结点序号之间的父子关系，可以用静态)</p>
<pre><code>struct node{
    typename data;
    int lchild;
    int rchild;
}Node[maxn];
</code></pre>
</li>
<li>
<p>二叉树反转(静态)</p>
<pre><code>void postorder(int root) {
	if (root == -1) return;
	postorder(Node[root].lchild);
	postorder(Node[root].rchild);
	swap(Node[root].lchild, Node[root].rchild);
}
</code></pre>
</li>
<li>
<p>完全二叉树</p>
<p>1.判断是否是完全二叉树</p>
<pre><code>int iscomplete = 1, after = 0;
vector&lt;int&gt; levelorder(node* root) {//层序遍历中
	queue&lt;node*&gt; q;
	vector&lt;int&gt; v;
	q.push(root);
	while (!q.empty()) {
		node* temp = q.front();
		q.pop();
		v.push_back(temp-&gt;data);
		if (temp-&gt;lchild != NULL) {
			if (after) iscomplete = 0;
			q.push(temp-&gt;lchild);
		}
		else after = 1;
		if (temp-&gt;rchild != NULL) {
			if (after) iscomplete = 0;
			q.push(temp-&gt;rchild);
		}
		else after = 1;
	}
	return v;
}
</code></pre>
<p>2.给出⼀个n表示有n个结点，这n个结点为0~n-1，给出这n个结点的左右孩⼦，求问这棵树是 不是完全⼆叉树</p>
<p>分析：递归出最⼤的下标值，完全⼆叉树⼀定把前⾯的下标充满： 最⼤的下标值 == 最⼤的节点数； 不完全⼆叉树前满⼀定有位置是空，会往后挤： 最⼤的下标值 &gt; 最⼤的节点数</p>
</li>
<li>
<p>注意点</p>
<ul>
<li>完全二叉树的存储中，如果根节点下标为1，则该树中任何一个结点i，其左孩子编号为2i，右孩子编号为2i+1，父亲节点为下取整(i/2);如果根节点下标为0，对树中某结点i,父亲结点为下取整((i-1)/2);左孩子为2i+1，右孩子为2i+2</li>
<li>函数参数中，对指针指向的结点内容进行修改是不需要加引用的，。如果函数中需要新建结点，即对二叉树的结构做出修改，就需要加引用(如insert，)，如果是修改当前已有结点的内容，或者是遍历树，就不需要加引用。</li>
<li>无论是先序还是后序，都必须知道中序序列才能唯一确定一棵树</li>
<li>对于题目中给出左右孩子结点编号的情况，没有被当做孩子结点的结点编号即为根结点，可以用一个数组来判断</li>
</ul>
</li>
</ul>
</li>
<li>
<p>普通树</p>
<p>深度遍历，递归边界为无孩子结点，根节点深度为0</p>
<pre><code>void DFS(int index,int depth){
	if(Node[index].child.size()==0){
		ans+=Node[index].data*p*pow((1+r/100),depth);
		return;
	}
	for(int i=0;i&lt;Node[index].child.size();i++){
		DFS(Node[index].child[i],depth+1);
	}
}
</code></pre>
<p>广度遍历</p>
<pre><code>void BFS() {
  	level[1] = 1;
  	queue&lt;int&gt; q;
  	q.push(1);
  	while (!q.empty()) {
  		int now = q.front();
  		q.pop();
  		if (child[now].size() == 0) {
  			hashtable[level[now]]++;
  			maxlevel = max(maxlevel, level[now]);
  		}
  		for (int i = 0; i &lt; child[now].size(); i++) {
  			level[child[now][i]] = level[now] + 1;
  			q.push(child[now][i]);
  		}
  	}
  }`
</code></pre>
<p>二叉查找树BST</p>
<ul>
<li>
<p>存储结构</p>
<pre><code>struct node{
	int data;
	node* lchild;
	node* rchild;
};
</code></pre>
</li>
<li>
<p>插入</p>
<pre><code>void insert(node*&amp; root, int x) {
	if (root == NULL) {
		root = new node;
		root-&gt;data = x;
		root-&gt;lchild = NULL;
		root-&gt;rchild = NULL;
		return;
	}
	if (x &lt; root-&gt;data) insert(root-&gt;lchild, x);
	else insert(root-&gt;rchild, x);
}
</code></pre>
</li>
<li>
<p>完全二叉查找树</p>
<p>用数组存放完全二叉查找树时，可以先将待插入的权值递增排列，然后用中序遍历的方式将其插入到树中，并且要注意结点序号的关系</p>
<pre><code>void inorder(int root) {
	if (root &gt; n) return;
	inorder(root * 2);
	CBT[root] = number[index++];
	inorder(root * 2 + 1);
}
</code></pre>
</li>
<li>
<p>注意点：对二叉查找树进行中序遍历，其结果是有序的</p>
</li>
</ul>
</li>
<li>
<p>平衡二叉树(AVL)</p>
<p>A1066</p>
<p>任意结点左子树与右子树的高度之差的绝对值不超过1</p>
<p>某结点左子树与右子树的高度之差成为该结点的平衡因子。</p>
<p>在对AVL进行插入操作时，只要把最靠近插入结点的失衡结点调整到正常，路径上的所有结点就都会平衡。</p>
<ul>
<li>
<p>存储结构</p>
<pre><code>struct node {
	int data, height;
	node* lchild, * rchild;
};
</code></pre>
</li>
<li>
<p>生成一个新结点</p>
<pre><code>node* newNode(int v) {
	node* Node = new node;
	Node-&gt;v = v;
	Node-&gt;height = 1;
	Node-&gt;lchild = Node-&gt;rchild = NULL;
	return Node;
}
</code></pre>
</li>
<li>
<p>获取结点root所在子树当前高度</p>
<pre><code>int getheight(node* root) {
    if (root == NULL) return 0;
	return root-&gt;height;
}
</code></pre>
</li>
<li>
<p>更新高度</p>
<pre><code>void updateheight(node* root) {
	root-&gt;height = max(getheight(root-&gt;lchild), getheight(root-&gt;rchild)) + 1;
}
</code></pre>
</li>
<li>
<p>计算平衡因子</p>
<pre><code>int getbalancefactor(node* root) {
	return getheight(root-&gt;lchild) - getbalancefactor(root-&gt;rchild);
	//注意是左减右
}
</code></pre>
</li>
<li>
<p>左旋</p>
<pre><code>void L(node*&amp; root) {
	node* temp = root-&gt;rchild;
	root-&gt;rchild = temp-&gt;lchild;
	temp-&gt;lchild = root;
	updateheight(root);
	updateheight(temp);
	root = temp;
}
</code></pre>
</li>
<li>
<p>右旋</p>
<pre><code>void R(node*&amp; root) {
	node* temp = root-&gt;lchild;
	root-&gt;lchild = temp-&gt;rchild;
	temp-&gt;rchild = root;
	updateheight(root);
	updateheight(temp);
	root = temp;
}
</code></pre>
</li>
<li>
<p>建树</p>
<pre><code>void insert(node*&amp; root, int v) {
	if (root == NULL) {
		root = newnode(v);
		return;
	}
	if (root-&gt;data &gt; v) {
		insert(root-&gt;lchild, v);
		updateheight(root);
		if (getbalance(root) == 2) {
			if (getbalance(root-&gt;lchild) == 1) {
				R(root);
			}
			else if (getbalance(root-&gt;lchild) == -1) {
				L(root-&gt;lchild);
				R(root);
			}
		}
	}
	else {
		insert(root-&gt;rchild, v);
		updateheight(root);
		if (getbalance(root) == -2) {
			if (getbalance(root-&gt;rchild) == -1) {
				L(root);
			}
			else if (getbalance(root-&gt;rchild) == 1) {
				R(root-&gt;rchild);
				L(root);
			}
		}
	}
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>堆(完全二叉树(大顶堆、小顶堆))，下面以大顶堆为例</p>
<ul>
<li>
<p>向下调整</p>
<pre><code>void downadjust(int low, int high) {
	int i = low, j = 2 * i;
	while (j &lt;= high) {
		if (j + 1 &lt;= high &amp;&amp; heap[j + 1] &gt; heap[j]) {
			j = j + 1;
		}
		if (heap[i] &lt; heap[j]) {
			swap(heap[i], heap[j]);
			i = j;
			j = 2 * i;
		}
		else {
			break;
		}
	}
}
</code></pre>
</li>
<li>
<p>删除堆顶元素</p>
<pre><code>void deletetop() {
	heap[1] = heap[n--];
	downadjust(1, n);
}
</code></pre>
</li>
<li>
<p>向上调整</p>
<pre><code>void upadjust(int low, int high) {
	int i = high, j = i / 2;
	while (j &gt;= low) {
		if (heap[i] &lt; heap[j]) {
			swap(heap[i], heap[j]);
			i = j;
			j = i / 2;
		}
		else {
			break;
		}
	}
}
</code></pre>
</li>
<li>
<p>插入元素</p>
<pre><code>void insert(int x) {
	heap[++n] = x;
	upadjust(1, n);
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="26-并查集">26 并查集</h3>
<p>A1107 A1114 A1118</p>
<ul>
<li>
<p>找根结点</p>
<pre><code>for(int i=0;i&lt;N;i++){//初始化，千万不要忘了
    father[i]=i;
}
int findfather(int x){//普通版找根节点
    while(x!=father[x]){
    x=father[x];
    }
    return x;
}
int findfather(int v){//路径压缩版找根结点
	if(father[v]==v) return v;
	else{
		int F=findfather(father[v]);
		father[v]=F;//把路径上所有结点的父节点都变为根节点
		return F;
	}
}
</code></pre>
</li>
<li>
<p>合并两个集合</p>
<pre><code>void union(int a,int b){
    int fatherA=findfather(a);
    int fatherB=findfather(b);
    if(fatherA!=fatherB) father[fatherA]=fatherB;
}
</code></pre>
</li>
</ul>
<h3 id="27-图">27 图</h3>
<p>A1013 A1021, A1034 <strong>A1076</strong> A1003 <strong>A1018</strong> A1030 A1072 A1087，A1126(欧拉图)  A1134(图  结点与边的问题)</p>
<p>A1146(判断是否为拓扑排序序列 )    A1154(25 图  边的两端点的判断 )    A1142(25 无向完全图 最大子图  两点相连)</p>
<p>A1150(25 判断循环图 输出最小路径)    A1131(30 DFS 、unordered_map邻接矩阵、 难题  )</p>
<ul>
<li>
<p>存储方式</p>
<p>邻接表或邻接矩阵</p>
<p>G[maxn] [maxn] 或者vector&lt; vector <int> &gt; G 或vector<int> G[maxn] 等等</p>
<pre><code>struct node{
   int id;
   int layer;
}
vector&lt;node&gt; adj[amxn];
</code></pre>
</li>
<li>
<p>深度遍历</p>
<pre><code>void DFS(u) {//访问顶点u所在的连通块
	vis[u] = true;
	......
	for (从u出发能到达的所有顶点v) {
        ......
		if (vis[i] == false) {
			DFS(v);
		}
	}
}
void DFStrave(G) {//遍历图G
	for (G的所有顶点u) {
		if (vis[u] == false) {
			......
			DFS(u);
		    ......
		}
	}
}
</code></pre>
</li>
<li>
<p>广度遍历</p>
<pre><code>BFS(u){
   queue q;
   inq[u]=true;
   while(q非空){
     取出队首元素u进行访问；
     for(从u出发可以到达的所有顶点v){
       if(inq[v]==false){
         将v入队;
       inq[v]=true;
       }
     }
}
BFStrave(G){
   for(G的所有结点u){
      if(inq[u]==false){
         BFS(u);
      }
   }
}
</code></pre>
</li>
<li>
<p>判断是否为连通图的两种方法</p>
<ul>
<li>
<p>深度搜索记录访问结点的数量，如果记录的访问的节点数等于总结点数，则为连通图</p>
<pre><code>void dfs(int index) {
 visit[index] = true;
 cnt++;
 for (int i = 0; i &lt; v[index].size(); i++)
 if (visit[v[index][i]] == false)
 dfs(v[index][i]);
}
</code></pre>
</li>
<li>
<p>深度搜索记录连通块数量</p>
</li>
</ul>
<pre><code>for(int j=1;j&lt;=n;j++){
			if(vis[j]==false){
				DFS(j);
				block++;
			}
		}
</code></pre>
</li>
<li>
<p>最短路径dijkstra</p>
<ul>
<li>
<p>dijkstra函数内首先进行初始化</p>
<p>包括fill(vis,vis+maxn,false);//某个结点是否访问<br>
fill(d,d+maxn,INF);//到某个结点的最短路径<br>
fill(w,w+maxn,0);//到某个结点路径上的总点权(一般为最大值)<br>
fill(pt,pt+maxn,0);//路径上的结点个数<br>
fill(num,num+maxn,0);//最短路径条数，</p>
<p>​     for(int i=0;i&lt;n;i++) pre[i]=i;//每个结点的前驱结点设为其本身</p>
<p>最后在main函数中还有对临接矩阵或临接链表的初始化，即设为INF</p>
</li>
<li>
<p>输出路径</p>
<pre><code>void printpath(int v){
	if(v==0){//到达起始节点，开始输出，并逐层返回
		cout&lt;&lt;inttostring[v];
		return;
	}
	printpath(pre[v]);
	cout&lt;&lt;&quot;-&gt;&quot;&lt;&lt;inttostring[v];
}
</code></pre>
</li>
<li>
<p>dijkstra示例代码</p>
<pre><code>void dijkst(int s){
	fill(vis,vis+maxn,false);
	fill(d,d+maxn,INF);
	fill(w,w+maxn,0);
	fill(pt,pt+maxn,0);
	fill(num,num+maxn,0);
    for(int i=0;i&lt;n;i++) pre[i]=i;
	d[s]=0;
	w[s]=weight[s];
	num[s]=1;
	for(int i=0;i&lt;n;i++){
		int u=-1,MIN=INF;
		for(int j=0;j&lt;n;j++){
			if(vis[j]==false&amp;&amp;d[j]&lt;MIN){
				u=j;
				MIN=d[u];
			}
		}
		if(u==-1) return;
		vis[u]=true;
		for(int v=0;v&lt;n;v++){
			if(vis[v]==false&amp;&amp;G[u][v]!=INF){
				if(d[v]&gt;d[u]+G[u][v]){
					d[v]=d[u]+G[u][v];
					w[v]=w[u]+weight[v];	
					num[v]=num[u];
					pt[v]=pt[u]+1;
					pre[v]=u;
				}else if(d[v]==d[u]+G[u][v]){
					num[v]+=num[u];
					if(w[v]&lt;w[u]+weight[v]){
						w[v]=w[u]+weight[v];
						pt[v]=pt[u]+1;
						pre[v]=u;
					}else if(w[v]==weight[v]+w[u]){
						double avgfun1=w[v]*1.0/pt[v];
						double avgfun2=(weight[v]+w[u])*1.0/(pt[u]+1);
						if(avgfun2&gt;avgfun1){
							pt[v]=pt[u]+1;
							pre[v]=u;
						}
					}
				}
			}
		}
	}
}
</code></pre>
</li>
</ul>
</li>
<li>
<p>哈密顿问题</p>
<p>A1122(哈密顿回路 set)</p>
</li>
<li>
<p>笔记</p>
<ul>
<li>
<p>连通的、且边数为N-1的具有N个结点的图一定是棵树。在这N个结点中选择合适的根节点，使树的高度最大的办法是：先任意选择一个结点，从该结点出发遍历整个树，获取能达到的最深的结点(记为集合A)，然后从集合A中任意一个结点出发遍历整个树，获取能达到的最深的结点(记为集合B)，集合A与集合B的并集即为所求的使树的高度最大的根结点。</p>
</li>
<li>
<p>删除图中某个顶点及其相连的边时，不用真的删除，可以在DFS访问到该顶点时返回即可,如下</p>
<pre><code>void DFS(int v){
	if(v==deletepoint) return;//访问到删除的结点时返回
	vis[v]=true;
	for(int i=0;i&lt;G[v].size();i++){
		if(vis[G[v][i]]==false){
			DFS(G[v][i]);
		}
	}
}
</code></pre>
</li>
<li>
<p>结点标号为字符串时，可以用map进行和数字间的转化</p>
</li>
<li>
<p>对于每个结点只能访问一次的情况，可以优先考虑BFS(A1076)</p>
</li>
<li>
<p>不论是DFS、BFS、djkst都要先初始化传入参数(即起始结点)的相关信息</p>
</li>
</ul>
</li>
</ul>
<h3 id="28-动态规划">28 动态规划</h3>
<ul>
<li>
<p>最大连续子序列和  A1007</p>
<p>状态转移方程:<code>dp[i]=max{a[i],dp[i-1]+a[i]}</code></p>
<p>注意边界初始条件</p>
<pre><code>#include&lt;cstdio&gt;
const int maxn=10010;
int a[maxn],dp[maxn],s[maxn]={0};//s数组记录最大连续子序列的起始元素
int main(){
	int n;
	scanf(&quot;%d&quot;,&amp;n);
	bool flag=false;
	for(int i=0;i&lt;n;i++){
		scanf(&quot;%d&quot;,&amp;a[i]);
		if(a[i]&gt;=0) flag=true;
	}
	if(flag==false){
		printf(&quot;0 %d %d&quot;,a[0],a[n-1]);
		return 0;
	}
    dp[0]=a[0];//边界初始条件--------------------------------------------------------
	for(int i=1;i&lt;n;i++){
		if(a[i]&gt;dp[i-1]+a[i]){
			dp[i]=a[i];
			s[i]=i;
		} 
		else {
			dp[i]=dp[i-1]+a[i];
			s[i]=s[i-1];
		}
	}
	int k=0;
	for(int i=1;i&lt;n;i++){
		if(dp[i]&gt;dp[k]){//题目要求输出i，j最小的序列，所以这里的判断是&gt;而不是&gt;=
			k=i;
		}
	}
	printf(&quot;%d %d %d&quot;,dp[k],a[s[k]],a[k]);
	return 0;
}
</code></pre>
</li>
<li>
<p>最长不下降子序列 (LIS) A1045</p>
<p>状态转移方程:<code>dp[i]=max{1,dp[j]+1}</code></p>
<p>如果存在a[i]之前的元素a[j] (j&lt;i)，使得a[j]&lt;=a[i]并且dp[j]+1&gt;dp[i],那么就把a[i]跟在以a[j]为结尾的LIS后面，形成一条更长的不下降子序列(令dp[i]=dp[j]+1)</p>
<p>如果a[i]之前的元素都比a[i]大，那么a[i]就只好自己形成一条LIS，长度为1</p>
<pre><code>#include&lt;cstdio&gt; 
#include&lt;algorithm&gt;
using namespace std;
const int maxn=10010;
int hashtable[maxn],a[maxn],dp[maxn];
int main(){
	int num=0,ans=-1,n,m,L,temp;
	scanf(&quot;%d&quot;,&amp;n);
	scanf(&quot;%d&quot;,&amp;m);
	fill(hashtable,hashtable+maxn,-1);
	for(int i=0;i&lt;m;i++){
		scanf(&quot;%d&quot;,&amp;temp);
		hashtable[temp]=i;
	}
	scanf(&quot;%d&quot;,&amp;L);
	for(int i=0;i&lt;L;i++){
		scanf(&quot;%d&quot;,&amp;temp);
		if(hashtable[temp]&gt;=0){
			a[num++]=hashtable[temp];
		}
	}
	for(int i=0;i&lt;num;i++){
		dp[i]=1;//边界初始条件--------------------------------------
		for(int j=0;j&lt;i;j++){
			if(a[i]&gt;=a[j]&amp;&amp;dp[j]+1&gt;dp[i]){
				dp[i]=dp[j]+1;
			}
		}
  	ans=max(ans,dp[i]);
	}
	printf(&quot;%d&quot;,ans);
	return 0;
}
</code></pre>
</li>
<li>
<p>最长公共子序列 A1045</p>
<ul>
<li>经典LCS模型，两个序列的元素匹配必须一一对应：</li>
</ul>
<p>​      状态转移方程:如果a[i]==b[j],<code>dp[i] [j]=dp[i-1] [j-1]+1</code>,</p>
<p>​      如果a[i]!=b[j],<code>dp[i] [j]=max{dp[i-1] [j],dp[i] [j-1]}</code></p>
<ul>
<li>
<p>本题中允许公共部分产生重复元素</p>
<p>状态转移方程修改为:</p>
<p>如果a[i]==b[j],<code>dp[i] [j]=max{dp[i-1] [j],dp[i] [j-1]}+1</code></p>
<p>如果a[i]!=b[j],<code>dp[i] [j]=max{dp[i-1] [j],dp[i] [j-1]}</code></p>
</li>
</ul>
<pre><code>#include&lt;cstdio&gt; 
#include&lt;algorithm&gt;
using namespace std;
const int maxn=10010;
int a[maxn],b[maxn],dp[maxn][maxn];
int main(){
	int n,m,L;
	scanf(&quot;%d&quot;,&amp;n);
	scanf(&quot;%d&quot;,&amp;m);
    for(int i=1;i&lt;=m;i++) scanf(&quot;%d&quot;,&amp;a[i]);
    scanf(&quot;%d&quot;,&amp;L);
    for(int i=1;i&lt;=L;i++) scanf(&quot;%d&quot;,&amp;b[i]);
    for(int i=0;i&lt;m;i++) dp[i][0]=0;//边界起始条件
    for(int i=0;i&lt;L;i++) dp[0][i]=0;//边界起始条件
    for(int i=1;i&lt;=m;i++){
    	for(int j=1;j&lt;=L;j++){
    		int maxone=max(dp[i-1][j],dp[i][j-1]);
    		if(a[i]==b[j]) dp[i][j]=maxone+1;                   
    		else dp[i][j]=maxone;
		}
	}
	printf(&quot;%d&quot;,dp[m][L]);
	return 0;
}
</code></pre>
</li>
<li>
<p>最长回文子串 A1040</p>
<p>dp[i] [j]表示s[i]至s[j]表示的子串是否为回文子串</p>
<p>状态转移方程: 如果s[i]==s[j],<code>dp[i] [j]=dp[i+1] [j-1]</code></p>
<p>如果s[i]!=s[j], <code>dp[i] [j]=0</code></p>
</li>
</ul>
<p>​       边界：<code>dp[i] [i] =1;dp[i] [i+1]=(s[i]==s[i+1])? 1 : 0</code></p>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstring&gt;
#include&lt;string&gt;
using namespace std;
const int maxn=1010;
string str;
int dp[maxn][maxn];
int main(){
	memset(dp,0,sizeof(dp));
	getline(cin,str);
	int ans=1,len=str.length();
	for(int i=0;i&lt;len;i++){//边界初始化
		dp[i][i]=1;
		if(i&lt;len-1){
			if(str[i]==str[i+1]){
				dp[i][i+1]=1;
				ans=2;//初始化时注意最长回文子串的长度
			}
		}
	}
	for(int L=3;L&lt;=len;L++){
		for(int i=0;i+L-1&lt;len;i++){
			int j=i+L-1;
			if(str[i]==str[j]&amp;&amp;dp[i+1][j-1]==1){
				dp[i][j]=1;
				ans=L;
			}
		}
	}
	printf(&quot;%d&quot;,ans);
	return 0;
}
</code></pre>
<ul>
<li>
<p>背包问题</p>
<ul>
<li>
<p>01背包 A1068</p>
<p>dp[i] [v]=max{dp[i-1] [v],dp[i-1] [v-w[i]]+c[i]}(1&lt;=i&lt;=n, w[i]&lt;=v&lt;=V)</p>
<pre><code>#include&lt;cstdio&gt;
#include&lt;algorithm&gt;
using namespace std;
const int maxn=10010;
const int maxv=110;
int dp[maxv]={0},w[maxn];
bool choice[maxn][maxv],flag[maxn];
bool cmp(int a,int b){
	return a&gt;b;
}
int main(){
	int n,m;
	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
	for(int i=1;i&lt;=n;i++){
		scanf(&quot;%d&quot;,&amp;w[i]);
	}
	sort(w+1,w+1+n,cmp);
	for(int i=1;i&lt;=n;i++){
		for(int v=m;v&gt;=w[i];v--){
			if(dp[v]&lt;=dp[v-w[i]]+w[i]){
				dp[v]=dp[v-w[i]]+w[i];
				choice[i][v]=1;
			}else{
				choice[i][v]=0;
			}
		}
	}
	if(dp[m]!=m) printf(&quot;No Solution&quot;);
	else{
		int k=n,num=0,v=m;
		while(k&gt;=0){
			if(choice[k][v]==1){
				flag[k]=true;
				v-=w[k];
				num++;
			}else flag[k]=false;
			k--;
		}
		for(int i=n;i&gt;0;i--){
			if(flag[i]==true){
				printf(&quot;%d&quot;,w[i]);
				num--;
				if(num&gt;0) printf(&quot; &quot;);
			}
		}
	}
	return 0;
}
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="29-分块-实时查询问题">29 分块  (实时查询问题)</h3>
<p>A1057</p>
<p>某非负整数序列元素的取值范围为0到N，则每块中元素个数是根号N(向下取整)，块数是根号N(向上取整)</p>
<p>例如所有元素都不超过100000，则可以将序列分为317块，每块316个元素，并用table[]数组记录每个元素出现的次数，用block[]数组记录每块中的元素个数</p>
<h3 id="30-树状数组bit-实时查询">30 树状数组(BIT) (实时查询)</h3>
<p><code>#define lowbit(i) ((i) &amp; (-i))</code></p>
<p>C[i]的覆盖长度是<code>lowbit(i)</code>,树状数组的下标必须从1开始</p>
<pre><code>int getsum(int x)//返回前x个整数之和{
   int sum=0;
   for(int i=x;i&gt;0;i-=lowbit(i)){
      sum+=c[i];
   }
   return sum;
}
</code></pre>
<pre><code>void update(int x,int v){
   for(int i=x;i&lt;=N;i+=lowbit(i)){
      c[i]+=v;
   }
}
</code></pre>
<h3 id="31-可怕模拟">31 可怕模拟</h3>
<p>A1017(25 )   A1153( 25 模拟 排序引用传参 vector unordered_map)</p>
<p>A1014(30 模拟  难题)</p>
<h3 id="32-n皇后">32 n皇后</h3>
<p>A1128(20)</p>
<h1 id="注意">注意</h1>
<p>1.= 与 ==</p>
<p>2.变量初始化赋值时有时必须赋值为0或1</p>
<p>3.注意全局变量与局部变量</p>
<p>4.<code>s1[i]-'0'</code>，字符数组变为整型数字</p>
<p>5.<code>s1[i]&gt;='0' &amp;&amp; s1[1]&lt;='9'</code>，字符数组中寻找0到9之间的数字</p>
<p>6.注意输出结果为0时的特殊情况，隐藏的测试点等</p>
<p>7.段错误很可能是数组越界，可能是定义的数组长度不符合题目限制的最大范围</p>
<p>8.注意if 和else if 的搭配使用， 注意函数传入值node* root ，下面对应root=new node,而不是node*root=new node,输出格式<code>printf(&quot;\n&quot;)</code>,<code>printf(&quot; &quot;)</code>是否正确</p>
<p>9.如果想要在 Dev-Cpp ⾥⾯使⽤C++11, 在菜单栏中⼯具-编译选项-编译器-编译时加⼊ -std=c++11 这句命令即可</p>
<p>11.有时并不一定真的要实现出正确的算法，最后不管用什么方式，只要能输出正确的格式就好</p>
<p>12.注意设置bool型的变量用于判断</p>
<p>13.注意输入的例子中可能有无效的数据，要找出有效的数据进行处理</p>
<p>14.<code>cmp</code>中写按字母大小排序，注意写成<code>strcmp()&lt;0</code>......的形式</p>
<p>15.看题目中的数据是整数还是浮点数，注意题目中数据的保留位数</p>
<p>16.注意是使用while还是if，不要忘了break或continue，注意区分是用break还是continue</p>
<p>17.<code>long long k=(long long)p*num[i]</code>;    若新声明的变量为long long 型，右边为int乘int型，最好在右边带上强制转换(long long)，其他情况也这样吧....</p>
<p>18.注意是多个if并列 还是if与else if结合使用</p>
<p>19.int上限为<code>0x7fffffff</code>, 即2^31 -1,可以用<code>const int INF=0x7fffffff</code>,也可以写成<code>(1&lt;&lt;31)-1</code></p>
<p>​     int下限为-2^31。const double eps=1e-8(即10的-8次方，注意是数字1不是字母l)，const double     INF=1e12(即10^12)</p>
<p>20.字符数组变为数字时要注意减'0',<code>res.d[i] = str[res.len - 1 - i]-'0'</code></p>
<p>21.函数的参数前有时需要加引用&amp;</p>
<p>22.操作放在花括号内还是花括号外，注意条件的判断</p>
<p>23.注意DFS的下一层进行DFS时，要写DFS(i,height+1)  不要写height++</p>
<p>24.涉及到排序问题时，可以考虑使用set或map内部自动排序的容器，也可以先把题目中给出的数据先排序再处理</p>
<p>25.提交时出现“运行时发生错误”的情况，一般是开的数组太小，没有达到题目要求的最大值</p>
<p>26.不要忘了一些算法的初始化，比如使用并查集千万不要忘了初始化<code>father[i]=i</code></p>
<p>27一些题目处理的是五位数的格式，(比如id号)，所以输出时注意<code>printf(&quot;%05d&quot;)</code></p>
<p>28.四舍五入为整数<code>int(v[temp].gm * 0.4 + v[temp].gf * 0.6 + 0.5);</code></p>
<p>​      在最后加上0.5并强制转换为int型</p>
<p>29.A1139邻接矩阵的巧妙写法</p>
<pre><code>unordered_map&lt;int ,bool&gt; isfri;
isfri[abs(stoi(a))*10000+abs(stoi(b))]=isfri[abs(stoi(b))*10000+abs(stoi(a))]=true;
10000为超过最大范围的整数
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://liuxbo.github.io/post/hello-gridea/</id>
        <link href="https://liuxbo.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>